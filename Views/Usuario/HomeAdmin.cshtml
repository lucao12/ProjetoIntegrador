<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Home Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/NovaPasta/loader.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        :root {
            --bg-light: #f6ead4;
            --green: #426841;
            --blue: #007bff;
            --blue-dark: #0056b3;
            --input-border: #ddd;
            --input-focus: #007bff;
            --dark-bg: #1e1e1e;
            --dark-border: #555;
            --dark-text: #eee;
            /* Novas variáveis para substituir cores fixas */
            --primary: var(--blue);
            --secondary: var(--green);
            --bg-card: #ffffff;
            --text-main: #333333;
            --text-muted: #666666;
            --border: #cccccc;
            --shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);
            /* Variáveis para o modal (novas ou ajustadas para o tema) */
            --modal-bg: var(--bg-card);
            --modal-text: var(--text-main);
            --modal-header-bg: var(--primary);
            --modal-header-text: #ffffff;
            --modal-footer-bg: var(--bg-card);
            --modal-button-primary-bg: var(--primary);
            --modal-button-primary-text: #ffffff;
            --modal-button-secondary-bg: var(--secondary);
            --modal-button-secondary-text: #ffffff;
            --modal-button-danger-bg: #dc3545;
            --modal-button-danger-text: #ffffff;
            /* Variáveis para o elemento .refeicao no dark mode */
            --refeicao-dark-bg: #2a2a2a;
            --refeicao-dark-border: #444;
            --refeicao-dark-text: #f1f1f1;
            /* Novas variáveis para o labels-container e alimento-container */
            --labels-container-bg: #f8f9fa;
            --labels-container-border: var(--border);
            --alimento-label-color: var(--text-main);
            --alimento-input-bg: var(--bg-card);
            --alimento-input-border: var(--input-border);
            --alimento-input-color: var(--text-main);
            /* Variáveis para o dark mode do labels-container e alimento-container */
            --labels-container-dark-bg: #2a2a2a;
            --labels-container-dark-border: #444;
            --alimento-label-dark-color: var(--dark-text);
            --alimento-input-dark-bg: #1e1e1e;
            --alimento-input-dark-border: #555;
            --alimento-input-dark-color: var(--dark-text);
            /* Novas variáveis para o VirtualSelect */
            --virtual-select-bg: var(--bg-card);
            --virtual-select-border: var(--input-border);
            --virtual-select-text: var(--text-main);
            --virtual-select-placeholder: var(--text-muted);
            --virtual-select-option-hover-bg: #f0f0f0;
            --virtual-select-active-option-bg: var(--primary);
            --virtual-select-active-option-text: #ffffff;
            --virtual-select-selected-item-bg: var(--primary);
            --virtual-select-selected-item-text: #ffffff;
            --virtual-select-clear-button: #dc3545;
            /* Variáveis para o dark mode do VirtualSelect */
            --virtual-select-dark-bg: #2a2a2a;
            --virtual-select-dark-border: #555;
            --virtual-select-dark-text: var(--dark-text);
            --virtual-select-dark-placeholder: #ccc;
            --virtual-select-dark-option-hover-bg: #3a3a3a;
            --virtual-select-dark-active-option-bg: var(--blue-dark);
            --virtual-select-dark-active-option-text: #ffffff;
            --virtual-select-dark-selected-item-bg: var(--blue-dark);
            --virtual-select-dark-selected-item-text: #ffffff;
            --virtual-select-dark-clear-button: #e84d4d;
        }

        .modal-content {
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            transition: background-color 0.3s, color 0.3s;
            background-color: var(--modal-bg);
            color: var(--modal-text);
        }

        .modal-header {
            border-bottom: 1px solid var(--border);
            background-color: var(--modal-header-bg);
            color: var(--modal-header-text);
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
            padding: 1rem 1.5rem;
        }

            .modal-header .btn-close {
                filter: invert(1);
            }

        .modal-title {
            color: var(--modal-header-text);
            font-size: 1.4rem;
            font-weight: 600;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            border-top: 1px solid var(--border);
            background-color: var(--modal-footer-bg);
            border-bottom-left-radius: 15px;
            border-bottom-right-radius: 15px;
            padding: 1rem 1.5rem;
        }

        /* Estilos dos inputs e labels dentro do modal (e agora para o .alimento-container também) */
        .modal-body .form-label,
        .alimento-container label {
            color: var(--text-main);
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .modal-body .form-control,
        .modal-body .form-select,
        .alimento-container input[type="number"] {
            border: 1px solid var(--input-border);
            border-radius: 8px;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            color: var(--text-main);
            background-color: var(--bg-card);
            transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
            width: 100%;
            box-sizing: border-box;
        }

            .modal-body .form-control:focus,
            .modal-body .form-select:focus,
            .alimento-container input[type="number"]:focus {
                border-color: var(--input-focus);
                box-shadow: 0 0 0 0.25rem rgba(0, 123, 255, 0.25);
                outline: none;
            }

        .modal-body .mb-3 {
            margin-bottom: 1rem !important;
        }

        .dark-mode .modal-content {
            background-color: var(--dark-bg);
            color: var(--dark-text);
            box-shadow: 0 4px 25px rgba(0, 0, 0, 0.6);
        }

        .dark-mode .modal-header {
            background-color: var(--primary);
            color: var(--modal-header-text);
            border-color: var(--dark-border);
        }

            .dark-mode .modal-header .btn-close {
                filter: invert(1);
            }

        .dark-mode .modal-footer {
            background-color: var(--dark-bg);
            border-color: var(--dark-border);
        }

        .dark-mode .modal-body .form-label,
        .dark-mode .alimento-container label {
            color: var(--alimento-label-dark-color);
        }

        .dark-mode .modal-body .form-control,
        .dark-mode .modal-body .form-select,
        .dark-mode .alimento-container input[type="number"] {
            background-color: var(--alimento-input-dark-bg);
            border-color: var(--alimento-input-dark-border);
            color: var(--alimento-input-dark-color);
        }

        body {
            background-color: var(--bg-light);
            font-family: Arial, sans-serif;
        }

        .container {
            max-width: 1000px;
            width: 100%;
            padding: 20px;
            background-color: var(--bg-card);
            border-radius: 12px;
            box-shadow: var(--shadow);
            transition: background-color 0.3s, color 0.3s;
        }

        #profileImage {
            border: 4px solid #007bff;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s;
        }

        button.btn-primary,
        button.btn-secondary,
        button.btn-danger {
            border: none;
            border-radius: 20px;
            padding: 10px 20px;
            transition: 0.3s;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .loader {
            width: 80px;
            height: 80px;
            border: 8px solid rgba(255, 255, 255, 0.3);
            border-top: 8px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }


        h1 {
            color: #343a40;
        }

        h3 {
            color: #343a40;
        }

        .btn {
            margin-top: 10px;
        }

        .user-list {
            margin-top: 20px;
        }

        .user-card {
            padding: 20px;
            margin-bottom: 15px;
            border-radius: 10px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            background-color: white;
            transition: background-color 0.3s, color 0.3s;
            width: 100%;
        }

        .user-card .user-info {
            margin-bottom: 10px;
        }

        .user-card .btn {
            margin-right: 5px;
        }

        /* Modo Noturno */
        body.dark-mode {
            background-color: #121212;
            color: white;
        }

            body.dark-mode .container {
                background-color: #1b1b1b;
                color: white;
            }


        .dark-mode .user-card {
            background-color: #1e1e1e;
        }

        .dark-mode .card {
            background-color: #1e1e1e;
            color: white;
        }

        .dark-mode h1 {
            color: white;
        }

        .dark-mode h3 {
            color: white;
        }

        .dark-mode .form-control {
            background-color: #333;
            color: white;
            border: 1px solid #555;
        }

        .dark-mode .form-control::placeholder {
            color: #bbb;
        }

        .dark-mode .input-group-text {
            background-color: #333;
            color: white;
        }

        .dark-mode .btn-primary {
            background-color: #007bff;
            border: none;
        }

        .dark-mode .btn-primary:hover {
            background-color: #0056b3;
        }

        .dark-mode .modal-content {
            background-color: #1e1e1e;
            color: white;
        }

        .dark-mode .modal-header,
        .dark-mode .modal-body,
        .dark-mode .modal-footer {
            background-color: #1e1e1e;
        }

        .dark-mode .modal-header .btn-close {
            color: white;
        }

        .dark-mode .form-control {
            background-color: #333;
            color: white;
            border: 1px solid #555;
        }

        .dark-mode .form-control::placeholder {
            color: #bbb;
        }

        .dark-mode .form-select {
            background-color: #444;
            color: white;
            border: 1px solid #555;
        }

        .btn-dark-mode {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #343a40;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 50px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        #userListContainer {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 10px;
            padding: 10px;
        }

        body.dark-mode .virtual-select,
        body.dark-mode .virtual-select .options-wrapper,
        body.dark-mode .virtual-select .search-wrapper,
        body.dark-mode .virtual-select .option,
        body.dark-mode .virtual-select .selected,
        body.dark-mode .vscomp-toggle-button {
            background-color: #1e1e1e !important; /* Fundo preto */
            color: #fff !important; /* Texto branco */
            border-color: #444 !important; /* Borda cinza escuro */
        }
    </style>

</head>

<body>
    <div class="overlay" id="loader-container" style="display: none;">
        <div class="loader"></div>
    </div>

    <button id="toggleDarkMode" class="btn-dark-mode">
        <i class="fas fa-moon"></i>
    </button>
    <div class="container">
        <div class="mb-4 text-center">
            <img id="profileImage" src="~/default.png" alt="Foto de perfil" class="rounded-circle" width="150"
                height="150">
        </div>


        <div style="text-align: center;">
            <button class="btn btn-primary mt-4" data-bs-toggle="modal" data-bs-target="#settingsModal">
                Configurações
            </button>
            <button class="btn btn-primary mt-4" data-bs-toggle="modal" data-bs-target="#cadastroModal"
                style="text-align: center;">Cadastrar Nova
                Pessoa</button>
            <button class="btn btn-danger mt-4" onclick="logout()" style="text-align: center;">Logout</button>
        </div>

        <div class="user-list">
            <h3 class="mt-4" style="text-align: center;">Lista de Usuários</h3>
            <div id="userListContainer"></div>
        </div>
    </div>

    <!-- Modal de Configurações -->
    <div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="settingsModalLabel">Configurações da Conta</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="settingsForm">
                        <div class="mb-3">
                            <label for="name" class="form-label">Nome</label>
                            <input type="text" class="form-control" id="name">
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">E-mail</label>
                            <input type="email" class="form-control" id="email">
                        </div>
                        <div class="mb-3">
                            <label for="phone" class="form-label">Telefone</label>
                            <input type="text" class="form-control" id="phone">
                        </div>
                        <div class="mb-3">
                            <label for="sex" class="form-label">Sexo</label>
                            <select class="form-control" id="sex">
                                <option value="" selected>Escolha seu sexo</option>
                                <option value="masculino">Masculino</option>
                                <option value="feminino">Feminino</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="idade" class="form-label">Idade</label>
                            <input type="number" class="form-control" id="idade" min="18" max="99" step="18">
                        </div>
                        <div class="mb-3">
                            <label for="peso" class="form-label">Peso (Kg)</label>
                            <input type="number" class="form-control" id="peso" min="0" step="1">
                        </div>
                        <div class="mb-3">
                            <label for="altura" class="form-label">Altura (cm)</label>
                            <input type="number" class="form-control" id="altura" min="0" step="1">
                        </div>
                        <div class="mb-3">
                            <label for="profilePhoto" class="form-label">Foto</label>
                            <input type="file" id="profilePhoto" accept="image/*">
                        </div>
                        <div class="mb-3">
                            <label for="oldPassword" class="form-label">Senha Antiga</label>
                            <input type="password" class="form-control" id="oldPassword">
                        </div>
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">Nova Senha</label>
                            <input type="password" class="form-control" id="newPassword">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                    <button type="button" class="btn btn-primary" onclick="saveChanges()">Salvar alterações</button>
                    <button type="button" class="btn btn-danger" onclick="deleteAccount()">Deletar conta</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="cadastroModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Cadastro de Admin</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="cadastroForm">
                        <input type="hidden" id="editUserId">
                        <div class="mb-3">
                            <label for="nome" class="form-label">Nome</label>
                            <input type="text" class="form-control" id="nome" required>
                        </div>
                        <div class="mb-3">
                            <label for="telefone" class="form-label">Telefone</label>
                            <input type="text" class="form-control" id="telefone">
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="emailCadastro" required>
                        </div>
                        <div class="mb-3">
                            <label for="senha" class="form-label">Senha</label>
                            <input type="password" class="form-control" id="senha">
                        </div>
                        <div class="mb-3">
                            <label for="role" class="form-label">Role</label>
                            <select class="form-select" id="role" required>
                                <option value="Admin">Admin</option>
                                <option value="Nutri">Nutri</option>
                                <option value="User">User</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-success">Salvar</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="changePasswordModalLabel">Alterar Senha</h5>
                </div>
                <div class="modal-body">
                    <form id="changePasswordForm">
                        <div class="mb-3">
                            <label for="newPasswordAdmin" class="form-label">Nova Senha</label>
                            <input type="password" class="form-control" id="newPasswordAdmin" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="changePassword()">Salvar</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        function ColocaCarregando() {
            document.getElementById("loader-container").style.display = "flex";
        }

        function TiraCarregando() {
            document.getElementById("loader-container").style.display = "none";
        }

        function loadUsers() {
            fetch("/users", {
                headers: { "Authorization": `Bearer ${localStorage.getItem("token")}` }
            })
                .then(response => response.json())
                .then(users => {
                    const container = document.getElementById('userListContainer');
                    container.innerHTML = '';
                    users.forEach(user => {
                        if (user.id != localStorage.getItem("id")) {
                            const userCard = document.createElement('div');
                            userCard.classList.add('user-card');
                            userCard.innerHTML = `
                            <div class="user-info"><strong>Nome:</strong> ${user.nome}</div>
                            <div class="user-info"><strong>Email:</strong> ${user.email}</div>
                            <div class="user-info"><strong>Role:</strong> ${user.role}</div>
                            <button class="btn btn-primary btn-sm" onclick="editUser(${user.id})">Editar</button>
                            <button class="btn btn-danger btn-sm" onclick="deleteUser(${user.id})">Excluir</button>
                            `;
                            container.appendChild(userCard);
                        }
                    });
                })
                .catch(error => console.error("Erro ao carregar usuários:", error));
        }

        function deleteUser(id) {
            fetch(`/delete/user/${id}`, {
                method: "DELETE",
                headers: { "Authorization": `Bearer ${localStorage.getItem("token")}` }
            })
                .then(() => {
                    alert("Usuário deletado!");
                    loadUsers()
                })
                .catch(error => alert("Erro ao excluir usuário"));
        }

        function editUser(id) {
            fetch(`/user/${id}`, {
                headers: { "Authorization": `Bearer ${localStorage.getItem("token")}` }
            })
                .then(response => response.json())
                .then(user => {
                    document.getElementById("editUserId").value = user.id;
                    document.getElementById("nome").value = user.nome;
                    document.getElementById("telefone").value = user.telefone;
                    document.getElementById("emailCadastro").value = user.email;
                    document.getElementById("senha").value = ""; // senha geralmente não é preenchida por segurança
                    document.getElementById("role").value = user.role;
                    new bootstrap.Modal(document.getElementById("cadastroModal")).show();
                });
        }

        document.getElementById("cadastroModal").addEventListener("hidden.bs.modal", function () {
            document.getElementById("editUserId").value = "";
            document.getElementById("cadastroForm").reset();
        });


        document.getElementById("cadastroForm").addEventListener("submit", function (event) {
            event.preventDefault();
            const id = document.getElementById("editUserId").value;
            const data = {
                nome: document.getElementById("nome").value,
                telefone: document.getElementById("telefone").value,
                email: document.getElementById("emailCadastro").value,
                senha: document.getElementById("senha").value,
                role: document.getElementById("role").value
            };
            const method = id ? "PUT" : "POST";
            const url = id ? `/update/user/${id}` : "/cadastroAdmin";
            const token = localStorage.getItem("token");
            console.log("Bearer " + token);
            console.log(JSON.stringify(data));

            fetch(url, {
                method,
                headers: {
                    "Authorization": "Bearer " + token,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            })
                .then(async (response) => {
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'Senha Inválida, A senha deve conter no mínimo 8 caracteres, com pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial');
                        return;
                    }

                    if (url == "/cadastroAdmin") {
                        alert("Usuário adicionado!");
                    } else {
                        alert("Usuário atualizado!");
                    }

                    loadUsers();
                    const modal = bootstrap.Modal.getInstance(document.getElementById("cadastroModal"));
                    if (modal) modal.hide();

                    document.getElementById("editUserId").value = "";
                    document.getElementById("cadastroForm").reset();
                })
                .catch(error => {
                    alert("Erro ao salvar usuário: " + error.message);
                    document.getElementById("editUserId").value = "";
                    document.getElementById("cadastroForm").reset();
                });
        });


        function verificaAdmCriou() {
            const token = localStorage.getItem("token");

            fetch("/verificaAdmCriou", {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if (data.sim) {
                        const changePasswordModal = new bootstrap.Modal(document.getElementById('changePasswordModal'));
                        changePasswordModal.show();
                    } else {
                        loadUsers();
                    }
                })
                .catch(error => {
                    console.error("Erro ao verificar administrador:", error);
                });
        }

        document.getElementById("changePasswordModal").addEventListener("hidden.bs.modal", function () {
            verificaAdmCriou();
        });

        function changePassword() {
            const token = localStorage.getItem("token");
            const newPassword = document.getElementById("newPasswordAdmin").value.trim();

            if (!newPassword) {
                alert("Por favor, insira uma nova senha.");
                return;
            }

            fetch("/mudasenha", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ senha: newPassword })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("A senha deve conter no mínimo 8 caracteres, com pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial.");
                    }
                    alert("Senha alterada com sucesso! Faça login novamente.");
                    logout();
                })
                .catch(error => {
                    console.error("Erro ao alterar senha:", error);
                    alert("A senha deve conter no mínimo 8 caracteres, com pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial.");
                });
        }

        document.getElementById("changePasswordModal").addEventListener("hidden.bs.modal", function () {
            verificaAdmCriou();
        });

        function logout() {
            localStorage.removeItem("token");
            window.location.href = "/login";
        }

        function deleteAccount() {
            const token = localStorage.getItem("token");

            fetch("/delete/yourself", {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Erro ao deletar conta.");
                    }
                    alert("Conta deletada com sucesso!");
                    localStorage.removeItem("token");
                    window.location.href = "/login";
                })
                .catch(error => {
                    console.error("Erro ao deletar conta:", error);
                    alert("Erro ao deletar conta.");
                });
        }

        function saveChanges() {
            const token = localStorage.getItem("token");
            if (document.getElementById("idade").value < 99 && document.getElementById("idade").value > 18) {
                console.log(document.getElementById("sex").value)
                if (document.getElementById("sex").value == "masculino" || document.getElementById("sex").value == "feminino") {
                    if (document.getElementById("peso").value > 0) {
                        if (document.getElementById("altura").value > 0) {
                            console.log(token)

                            ColocaCarregando();

                            const userData = {
                                Nome: document.getElementById("name").value,
                                Telefone: document.getElementById("phone").value,
                                Email: document.getElementById("email").value,
                                Sexo: document.getElementById("sex").value,
                                Idade: document.getElementById("idade").value,
                                Peso: document.getElementById("peso").value,
                                Altura: document.getElementById("altura").value,
                                SenhaAntiga: document.getElementById("oldPassword").value,
                                NovaSenha: document.getElementById("newPassword").value.trim() === "" ? null : document.getElementById("newPassword").value
                            };

                            console.log(userData)

                            fetch("/update/user/yourself", {
                                method: "PUT",
                                headers: {
                                    "Authorization": `Bearer ${token}`,
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify(userData)
                            })
                                .then(async response => {
                                    const json = await response.json();

                                    if (!response.ok) {
                                        let errorMessage = "Erro ao salvar";
                                        TiraCarregando();

                                        if (json.error) {
                                            errorMessage = json.error;
                                        } else if (json.errors) {
                                            const firstErrorKey = Object.keys(json.errors)[0];
                                            if (json.errors[firstErrorKey] && json.errors[firstErrorKey].length > 0) {
                                                errorMessage = json.errors[firstErrorKey][0];
                                            }
                                        }

                                        throw new Error(errorMessage);
                                    }


                                    const fileInput = document.getElementById("profilePhoto");

                                    const formData = new FormData();
                                    if (fileInput.files.length > 0) {
                                        formData.append("Foto", fileInput.files[0]); // Adiciona a foto ao FormData
                                    }

                                    try {
                                        // Verifica se há dados para enviar
                                        if (formData.has("Foto")) {
                                            const response = await fetch("/update/user/photo", {
                                                method: "PUT",
                                                headers: {
                                                    "Authorization": `Bearer ${token}`
                                                },
                                                body: formData
                                            });

                                            const result = await response.json();

                                            if (response.ok) {
                                                TiraCarregando();
                                                alert("Alterações salvas com sucesso! \nFaça Login novamente");
                                                logout(); // Recarrega as informações no modal
                                            } else {
                                                TiraCarregando();
                                                alert(result.error || "Erro ao atualizar a foto.");
                                            }
                                        } else {
                                            TiraCarregando();
                                            alert("Alterações salvas com sucesso! \nFaça Login novamente");
                                            logout(); // Recarrega as informações no modal
                                        }
                                    } catch (error) {
                                        TiraCarregando();
                                        console.error("Erro ao enviar a foto:", error);
                                    }
                                })
                                .catch(error => {
                                    TiraCarregando();
                                    console.error("Erro ao salvar alterações:", error);
                                    alert("Erro ao salvar alterações.");
                                });
                        } else {
                            TiraCarregando();
                            console.error("Digite uma altura");
                            alert("Digite uma altura");
                        }
                    } else {
                        TiraCarregando();
                        console.error("Digite um peso");
                        alert("Digite um peso");
                    }
                } else {
                    TiraCarregando();
                    console.error("Escolha um sexo");
                    alert("Escolha um sexo");
                }
            }
            else {
                TiraCarregando();
                console.error("Digite uma idade entre 18 anos e 99 anos");
                alert("Digite uma idade entre 18 anos e 99 anos");
            }
        }

        function loadContent() {
            const token = localStorage.getItem("token");
            if (!token) {
                window.location.href = "/login";
                return;
            }
            // Chama a requisição para preencher o modal com os dados do usuário
            fetch("/user/yourself", {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(user => {
                    if (user) {
                        // Preenche os campos do modal com os dados do usuário
                        document.getElementById("name").value = user.nome;
                        document.getElementById("email").value = user.email;
                        document.getElementById("phone").value = user.telefone || '';
                        document.getElementById("sex").value = user.sexo || '';
                        document.getElementById("peso").value = user.peso || '';
                        document.getElementById("altura").value = user.altura || '';
                        document.getElementById("idade").value = user.idade || '';

                        localStorage.setItem("id", user.id);

                        if (user.foto) {
                            document.getElementById("profileImage").src = user.foto;
                        }
                    }
                })
                .catch(error => {
                    console.error("Erro ao carregar dados do usuário:", error);
                });
        }

        document.addEventListener('DOMContentLoaded', verificaAdmCriou);

        document.addEventListener("DOMContentLoaded", function () {
            const toggleButton = document.getElementById("toggleDarkMode");
            const body = document.body;

            if (localStorage.getItem("dark-mode") === "enabled") {
                body.classList.add("dark-mode");
                toggleButton.innerHTML = '<i class="fas fa-sun"></i>';
            }

            toggleButton.addEventListener("click", function () {
                body.classList.toggle("dark-mode");

                if (body.classList.contains('dark-mode')) {
                    localStorage.setItem('dark-mode', 'enabled');
                    toggleButton.innerHTML = '<i class="fas fa-sun"></i>';
                } else {
                    localStorage.setItem('dark-mode', 'disabled');
                    toggleButton.innerHTML = '<i class="fas fa-moon"></i>';
                }
            });

            loadContent();
        });

    </script>
</body>

</html>