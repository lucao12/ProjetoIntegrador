<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Home</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="wwwroot/NovaPasta/loader.css">

    <!-- Incluir o CSS do VirtualSelect -->
    <link herf="~/Views/Usuario/virtual-select.min.css" rel="stylesheet" />

    <!-- Incluir o JS do VirtualSelect -->



    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        /*!
        * Virtual Select v1.0.47
        * https://sa-si-dev.github.io/virtual-select
        * Licensed under MIT (https://github.com/sa-si-dev/virtual-select/blob/master/LICENSE)
        */
        vscomp-animation-spin {
            to {
                transform: rotateZ(360deg)
            }
        }

        .vscomp-popup-active {
            overflow: hidden !important
        }

        .vscomp-ele {
            display: inline-block;
            max-width: 250px;
            width: 100%
        }

        .vscomp-wrapper {
            color: #333;
            display: inline-flex;
            flex-wrap: wrap;
            font-family: sans-serif;
            font-size: 14px;
            position: relative;
            text-align: left;
            width: 100%
        }

        .vscomp-wrapper *,
        .vscomp-wrapper *::before,
        .vscomp-wrapper *::after {
            box-sizing: border-box
        }

        .vscomp-wrapper:focus {
            outline: none
        }

        .vscomp-dropbox-wrapper {
            left: 0;
            position: absolute;
            top: 0
        }

        .vscomp-toggle-button {
            align-items: center;
            background-color: #fff;
            border: 1px solid #ddd;
            cursor: pointer;
            display: flex;
            padding: 7px 30px 7px 10px;
            position: relative;
            width: 100%
        }

        .vscomp-value {
            height: 20px;
            line-height: 20px;
            max-width: 100%;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap
        }

        .vscomp-arrow {
            align-items: center;
            display: flex;
            height: 100%;
            justify-content: center;
            position: absolute;
            right: 0;
            top: 0;
            width: 30px
        }

        .vscomp-arrow::after {
            transform: rotate(45deg);
            border: 1px solid rgba(0, 0, 0, 0);
            border-bottom-color: #111;
            border-right-color: #111;
            content: "";
            height: 8px;
            margin-top: -6px;
            width: 8px
        }

        .vscomp-clear-icon {
            height: 12px;
            position: relative;
            width: 12px
        }

        .vscomp-clear-icon::before,
        .vscomp-clear-icon::after {
            background-color: #999;
            content: "";
            height: 12px;
            left: 5px;
            position: absolute;
            top: 0;
            width: 2px
        }

        .vscomp-clear-icon::before {
            transform: rotate(45deg)
        }

        .vscomp-clear-icon::after {
            transform: rotate(-45deg)
        }

        .vscomp-clear-icon:hover::before,
        .vscomp-clear-icon:hover::after {
            background: #333
        }

        .vscomp-clear-button {
            align-items: center;
            border-radius: 50%;
            display: none;
            height: 24px;
            justify-content: center;
            margin-top: -12px;
            position: absolute;
            right: 30px;
            top: 50%;
            width: 24px
        }

        .vscomp-clear-button:hover {
            background: #ccc
        }

        .vscomp-clear-button:hover .vscomp-clear-icon::before,
        .vscomp-clear-button:hover .vscomp-clear-icon::after {
            background-color: #333
        }

        .vscomp-dropbox-close-button {
            align-items: center;
            background-color: #fff;
            border-radius: 50%;
            bottom: -48px;
            cursor: pointer;
            display: none;
            height: 40px;
            justify-content: center;
            left: 50%;
            margin-left: -20px;
            position: absolute;
            width: 40px
        }

        .vscomp-value-tag.more-value-count {
            white-space: nowrap
        }

        .vscomp-dropbox-container {
            width: 100%;
            z-index: 2
        }

        .vscomp-dropbox {
            background-color: #fff;
            width: 100%
        }

        .vscomp-options-container {
            max-height: 210px;
            overflow: auto;
            position: relative
        }

        .vscomp-options-bottom-freezer {
            bottom: 0;
            height: 2px;
            left: 0;
            position: absolute;
            right: 0
        }

        .vscomp-option {
            align-items: center;
            cursor: pointer;
            display: flex;
            flex-wrap: wrap;
            height: 40px;
            padding: 0 15px;
            position: relative
        }

        .vscomp-option.selected {
            background-color: #eee
        }

        .vscomp-option.focused {
            background-color: #ccc
        }

        .vscomp-option.disabled {
            cursor: default;
            opacity: .5
        }

        .vscomp-option.group-title .vscomp-option-text {
            cursor: default;
            opacity: .6
        }

        .vscomp-option.group-title.selected {
            background-color: rgba(0, 0, 0, 0)
        }

        .vscomp-option.group-option {
            padding-left: 30px
        }

        .vscomp-new-option-icon {
            height: 30px;
            position: absolute;
            right: 0;
            top: 0;
            width: 30px
        }

        .vscomp-new-option-icon::before {
            border: 15px solid #512da8;
            border-bottom-color: rgba(0, 0, 0, 0);
            border-left-color: rgba(0, 0, 0, 0);
            content: "";
            position: absolute;
            right: 0;
            top: 0
        }

        .vscomp-new-option-icon::after {
            align-items: center;
            color: #fff;
            content: "+";
            display: flex;
            font-size: 18px;
            height: 15px;
            justify-content: center;
            position: absolute;
            right: 1px;
            top: 0;
            width: 15px
        }

        .vscomp-option-text {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none;
            width: 100%
        }

        .vscomp-option-description {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            color: #666;
            font-size: 13px;
            line-height: 15px;
            width: 100%
        }

        .vscomp-search-container {
            align-items: center;
            border-bottom: 1px solid #ddd;
            display: flex;
            height: 40px;
            padding: 0 5px 0 15px;
            position: relative
        }

        .vscomp-search-label,
        .vscomp-live-region,
        .vscomp-dropbox-container-top,
        .vscomp-dropbox-container-bottom {
            border: 0;
            clip: rect(0 0 0 0);
            height: 1px;
            margin: -1px;
            overflow: hidden;
            padding: 0;
            position: absolute;
            white-space: nowrap;
            width: 1px
        }

        .vscomp-search-input {
            background-color: rgba(0, 0, 0, 0);
            border: 0;
            color: inherit;
            font-size: 15px;
            height: 38px;
            padding: 10px 0;
            width: calc(100% - 30px)
        }

        .vscomp-search-input:focus {
            outline: none
        }

        .vscomp-search-clear {
            align-items: center;
            color: #999;
            cursor: pointer;
            display: flex;
            font-size: 25px;
            height: 30px;
            justify-content: center;
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none;
            visibility: hidden;
            width: 30px
        }

        .vscomp-search-clear:hover {
            color: inherit
        }

        .vscomp-no-options,
        .vscomp-no-search-results {
            align-items: center;
            display: none;
            justify-content: center;
            padding: 20px 10px
        }

        .vscomp-options-loader {
            display: none;
            padding: 20px 0;
            text-align: center
        }

        .vscomp-options-loader::before {
            animation: vscomp-animation-spin .8s infinite linear;
            background-color: #fff;
            border-radius: 50%;
            box-shadow: -4px -5px 3px -3px rgba(0, 0, 0, .3);
            content: "";
            display: inline-block;
            height: 40px;
            opacity: .7;
            width: 40px
        }

        .vscomp-ele[disabled] {
            cursor: not-allowed;
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none
        }

        .vscomp-ele[disabled] .vscomp-wrapper {
            opacity: .7;
            pointer-events: none
        }

        .vscomp-wrapper .checkbox-icon {
            display: inline-flex;
            height: 15px;
            margin-right: 10px;
            position: relative;
            width: 15px
        }

        .vscomp-wrapper .checkbox-icon::after {
            transition-duration: .2s;
            border: 2px solid #888;
            content: "";
            display: inline-block;
            height: 100%;
            width: 100%
        }

        .vscomp-wrapper .checkbox-icon.checked::after {
            transform: rotate(45deg) translate(1px, -4px);
            border-color: #512da8;
            border-left-color: rgba(0, 0, 0, 0);
            border-top-color: rgba(0, 0, 0, 0);
            width: 50%
        }

        .vscomp-wrapper.show-as-popup .vscomp-dropbox-container {
            align-items: center;
            background-color: rgba(0, 0, 0, .5);
            display: flex;
            height: 100vh;
            justify-content: center;
            left: 0;
            opacity: 1;
            overflow: auto;
            padding: 0 10px;
            position: fixed;
            top: 0;
            width: 100vw
        }

        .vscomp-wrapper.show-as-popup .vscomp-dropbox {
            margin-top: -24px;
            max-height: calc(80% - 48px);
            max-width: 500px;
            position: relative;
            width: 80%
        }

        .vscomp-wrapper.show-as-popup .vscomp-dropbox-close-button {
            display: flex
        }

        .vscomp-wrapper.popup-position-left .vscomp-dropbox-container {
            justify-content: flex-start
        }

        .vscomp-wrapper.popup-position-right .vscomp-dropbox-container {
            justify-content: flex-end
        }

        .vscomp-wrapper.has-select-all .vscomp-toggle-all-button {
            align-items: center;
            cursor: pointer;
            display: flex
        }

        .vscomp-wrapper.has-select-all .vscomp-search-input,
        .vscomp-wrapper.has-select-all .vscomp-toggle-all-label {
            width: calc(100% - 55px)
        }

        .vscomp-wrapper.has-select-all .vscomp-toggle-all-label {
            display: none
        }

        .vscomp-wrapper:not(.has-search-input) .vscomp-toggle-all-button {
            width: 100%
        }

        .vscomp-wrapper:not(.has-search-input) .vscomp-toggle-all-label {
            display: inline-block
        }

        .vscomp-wrapper.multiple .vscomp-option .vscomp-option-text {
            width: calc(100% - 25px)
        }

        .vscomp-wrapper.multiple .vscomp-option .vscomp-option-description {
            padding-left: 25px
        }

        .vscomp-wrapper.multiple .vscomp-option.selected .checkbox-icon::after {
            transform: rotate(45deg) translate(1px, -4px);
            border-color: #512da8;
            border-left-color: rgba(0, 0, 0, 0);
            border-top-color: rgba(0, 0, 0, 0);
            width: 50%
        }

        .vscomp-wrapper.focused .vscomp-toggle-button,
        .vscomp-wrapper:focus .vscomp-toggle-button {
            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .12), 0 1px 5px 0 rgba(0, 0, 0, .2)
        }

        .vscomp-wrapper.closed .vscomp-dropbox-container,
        .vscomp-wrapper.closed.vscomp-dropbox-wrapper {
            display: none
        }

        .vscomp-wrapper:not(.has-value) .vscomp-value {
            opacity: .5
        }

        .vscomp-wrapper.has-clear-button.has-value .vscomp-clear-button {
            display: flex
        }

        .vscomp-wrapper.has-clear-button .vscomp-toggle-button {
            padding-right: 54px
        }

        .vscomp-wrapper.has-no-options .vscomp-options-container,
        .vscomp-wrapper.has-no-search-results .vscomp-options-container {
            display: none
        }

        .vscomp-wrapper.has-no-options .vscomp-no-options {
            display: flex
        }

        .vscomp-wrapper.has-no-search-results .vscomp-no-search-results {
            display: flex
        }

        .vscomp-wrapper.has-search-value .vscomp-search-clear {
            visibility: visible
        }

        .vscomp-wrapper.has-no-options .vscomp-toggle-all-button {
            opacity: .5;
            pointer-events: none
        }

        .vscomp-wrapper.keep-always-open .vscomp-toggle-button {
            padding-right: 24px
        }

        .vscomp-wrapper.keep-always-open .vscomp-clear-button {
            right: 5px
        }

        .vscomp-wrapper.keep-always-open .vscomp-arrow {
            display: none
        }

        .vscomp-wrapper.keep-always-open .vscomp-dropbox-container {
            position: relative;
            z-index: 1
        }

        .vscomp-wrapper.keep-always-open .vscomp-dropbox {
            transition-duration: 0s;
            border: 1px solid #ddd;
            box-shadow: none
        }

        .vscomp-wrapper.keep-always-open.focused,
        .vscomp-wrapper.keep-always-open:focus,
        .vscomp-wrapper.keep-always-open:hover {
            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .12), 0 1px 5px 0 rgba(0, 0, 0, .2)
        }

        .vscomp-wrapper.server-searching .vscomp-options-list {
            display: none
        }

        .vscomp-wrapper.server-searching .vscomp-options-loader {
            display: block
        }

        .vscomp-wrapper.has-error .vscomp-toggle-button {
            border-color: #b00020
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-toggle-button {
            padding: 4px 22px 0 10px
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value {
            display: flex;
            flex-wrap: wrap;
            height: auto;
            min-height: 28px;
            overflow: auto;
            text-overflow: unset;
            white-space: normal
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value-tag {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            align-items: center;
            border: 1px solid #ddd;
            border-radius: 20px;
            display: inline-flex;
            font-size: 12px;
            line-height: 16px;
            margin: 0 4px 4px 0;
            max-width: 100%;
            padding: 2px 3px 2px 8px
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value-tag.more-value-count {
            padding-right: 8px
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value-tag-content {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            width: calc(100% - 20px)
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value-tag-clear-button {
            align-items: center;
            display: flex;
            height: 20px;
            justify-content: center;
            width: 20px
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value-tag-clear-button .vscomp-clear-icon {
            transform: scale(0.8)
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-arrow {
            height: 34px
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-clear-button {
            margin-top: 0;
            top: 5px
        }

        .vscomp-wrapper.show-value-as-tags.has-value .vscomp-arrow {
            display: none
        }

        .vscomp-wrapper.show-value-as-tags.has-value .vscomp-clear-button {
            right: 2px
        }

        .vscomp-wrapper.show-value-as-tags:not(.has-value) .vscomp-toggle-button {
            padding-bottom: 2px
        }

        .vscomp-wrapper.show-value-as-tags:not(.has-value) .vscomp-value {
            align-items: center;
            padding-bottom: 3px
        }

        .vscomp-wrapper.text-direction-rtl {
            direction: rtl
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-toggle-button {
            padding: 7px 10px 7px 30px
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-arrow {
            left: 0;
            right: auto
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-clear-button {
            left: 30px;
            right: auto !important
        }

        .vscomp-wrapper.text-direction-rtl .checkbox-icon {
            margin-left: 10px;
            margin-right: 0
        }

        .vscomp-wrapper.text-direction-rtl .checkbox-icon.checked::after {
            transform: rotate(45deg) translate(-4px, 1px)
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-search-container {
            padding: 0 15px 0 5px
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-toggle-all-label {
            text-align: right
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-option {
            text-align: right
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-option.group-option {
            padding-right: 30px
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-new-option-icon {
            left: 0;
            right: auto
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-new-option-icon::before {
            border-left-color: #512da8;
            border-right-color: rgba(0, 0, 0, 0)
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-new-option-icon::after {
            left: 1px;
            right: auto
        }

        .vscomp-wrapper.text-direction-rtl.multiple .vscomp-option.selected .checkbox-icon::after {
            transform: rotate(45deg) translate(-4px, 1px)
        }

        .vscomp-wrapper.text-direction-rtl.has-clear-button .vscomp-toggle-button {
            padding-left: 54px
        }

        .vscomp-wrapper.text-direction-rtl.keep-always-open .vscomp-toggle-button {
            padding-left: 24px
        }

        .vscomp-wrapper.text-direction-rtl.keep-always-open .vscomp-clear-button {
            left: 5px
        }

        .vscomp-wrapper.text-direction-rtl.show-value-as-tags .vscomp-toggle-button {
            padding: 4px 10px 0 22px
        }

        .vscomp-wrapper.text-direction-rtl.show-value-as-tags .vscomp-value-tag {
            margin: 0 0 4px 4px;
            padding: 2px 8px 2px 3px
        }

        .vscomp-wrapper.text-direction-rtl.show-value-as-tags .vscomp-value-tag.more-value-count {
            padding-left: 8px
        }

        .vscomp-wrapper.text-direction-rtl.show-value-as-tags.has-value .vscomp-clear-button {
            left: 2px
        }

        /*!
        * Popover v1.0.13
        * https://sa-si-dev.github.io/popover
        * Licensed under MIT (https://github.com/sa-si-dev/popover/blob/master/LICENSE)
        */
        .pop-comp-wrapper {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
            color: #000;
            background-color: #fff;
            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .12), 0 1px 5px 0 rgba(0, 0, 0, .2);
            text-align: left;
            flex-wrap: wrap;
            z-index: 1
        }

        .pop-comp-arrow {
            position: absolute;
            z-index: 1;
            width: 16px;
            height: 16px;
            overflow: hidden;
            pointer-events: none
        }

        .pop-comp-arrow::before {
            content: "";
            position: absolute;
            top: 8px;
            left: 8px;
            width: 16px;
            height: 16px;
            background-color: #fff;
            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .12), 0 1px 5px 0 rgba(0, 0, 0, .2);
            -webkit-transform-origin: left top;
            transform-origin: left top;
            -webkit-transform: rotate(45deg);
            transform: rotate(45deg)
        }

        .pop-comp-content {
            position: relative;
            z-index: 2
        }

        .pop-comp-wrapper.position-bottom>.pop-comp-arrow {
            margin-left: -8px;
            left: 0;
            top: -15px
        }

        .pop-comp-wrapper.position-bottom>.pop-comp-arrow::before {
            box-shadow: 0px 0px 2px 0 rgba(0, 0, 0, .14)
        }

        .pop-comp-wrapper.position-top>.pop-comp-arrow {
            margin-left: -8px;
            left: 0;
            bottom: -15px
        }

        .pop-comp-wrapper.position-right>.pop-comp-arrow {
            margin-top: -8px;
            top: 0;
            left: -15px
        }

        .pop-comp-wrapper.position-left>.pop-comp-arrow {
            margin-top: -8px;
            top: 0;
            right: -15px
        }

        .pop-comp-disable-events {
            pointer-events: none
        }
    </style>
    <style>
        body {
            background-color: #f8f9fa;
            font-family: Arial, sans-serif;
        }

        .container {
            max-width: 600px;
            margin: auto;
            padding: 20px;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .loader {
            width: 80px;
            height: 80px;
            border: 8px solid rgba(255, 255, 255, 0.3);
            border-top: 8px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }


        /*#content {
            max-width: 800px;
            width: 100%;
            padding: 20px;           
            position: absolute;
        }*/

        h1 {
            text-align: center;
            color: #333;
        }

        .dark-mode .card p {
            color: rgba(255, 255, 255, 0.685);
        }

        .card {
            max-width: 600px;
            margin: 30px auto;
            background: #ffffff;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            padding: 30px;
            transition: transform 0.3s ease;
            border: none;
        }

        .card:hover {
            transform: scale(1.02);
        }

        .card h2 {
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 20px;
            color: #2c3e50;
            text-align: center;
        }

        .card p {
            font-size: 1rem;
            color: #555;
            margin: 10px 0;
            text-align: center;
        }

        .card a.btn {
            display: block;
            width: 100%;
            margin-bottom: 15px;
            background-color: #e1306c;
            color: white;
            font-weight: bold;
            border: none;
        }

        .card a.btn:hover {
            background-color: #c7205e;
        }

        .card button {
            display: block;
            margin-top: 10px;
            font-weight: bold;
            transition: all 0.3s;
        }

        #insta {
            background: #e1306c;
            color: white;
            padding: 10px;
            display: inline-block;
            border-radius: 5px;
            text-decoration: none;
            font-weight: bold;
            margin-top: 10px;
        }

        #insta:hover {
            background: #c71d56;
            color: white;
        }

        .modal-dialog {
            max-width: 500px;
            margin: 30px auto;
        }

        .modal-content {
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        }

        #listaAlimentos {
            margin-top: 10px;
        }

        #listaAlimentos div {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        #listaAlimentos input[type="checkbox"] {
            margin-right: 10px;
            width: 20px;
            height: 20px;
            accent-color: #4CAF50;
            transition: all 0.3s ease;
        }

        #listaAlimentos label {
            font-size: 16px;
            color: #333;
            cursor: pointer;
            display: inline-block;
            margin-bottom: 0;
            transition: color 0.3s ease;
        }

        #listaAlimentos label:hover {
            color: #007bff;
        }

        .dark-mode #ChatContainer {
            background-color: #3b3b3b;
        }

        .dark-mode #ChatTextForm {
            background-color: #3b3b3b;
            border: 1px solid #ccc;

        }

        .dark-mode .chat-input {
            background-color: #1e1e1e;
        }

        .dark-mode .chat-input input {
            background-color: #333;
            color: white;
        }


        button {
            margin: 5px;
        }

        input,
        select {
            margin-bottom: 10px;
        }

        #IMC {
            text-align: center;
            font-size: 18px;
            font-weight: bold;
            color: #007bff;
            margin-top: 20px;
        }

        body.dark-mode {
            background-color: #121212;
            color: white;
        }

        .dark-mode .card {
            background-color: #1e1e1e;
            color: white !important;
        }

        .dark-mode h1 {
            color: white;
        }

        .dark-mode h3 {
            color: white;
        }

        .dark-mode .form-control {
            background-color: #333;
            color: white;
            border: 1px solid #555;
        }

        .dark-mode .form-control::placeholder {
            color: #bbb;
        }

        .dark-mode .btn-outline-dark {
            background-color: #007bff;
            color: white;
        }

        .dark-mode .list-group-item {
            background-color: #333;
            color: white;
        }

        .dark-mode .btn-primary {
            background-color: #007bff;
            border: none;
        }

        .dark-mode .btn-primary:hover {
            background-color: #0056b3;
        }

        .dark-mode .modal-content {
            background-color: #1e1e1e;
            color: white;
        }

        .dark-mode .modal-header,
        .dark-mode .modal-body,
        .dark-mode .modal-footer {
            background-color: #1e1e1e;
        }

        .dark-mode .modal-header .btn-close {
            color: white;
        }

        .dark-mode .form-control {
            background-color: #333;
            color: white;
            border: 1px solid #555;
        }

        .dark-mode .form-control::placeholder {
            color: #bbb;
        }

        .dark-mode .form-select {
            background-color: #444;
            color: white;
            border: 1px solid #555;
        }

        .btn-dark-mode {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #343a40;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 50px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        #ChatTextForm {
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding: 10px;
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #f9f9f9;
        }

        #ChatTextForm {
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding: 10px;
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #f9f9f9;
        }

        .chat-message {
            max-width: 70%;
            padding: 10px;
            border-radius: 8px;
            position: relative;
            word-wrap: break-word;
        }

        .chat-message.usuario {
            align-self: flex-end;
            background-color: #007bff;
            color: white;
        }

        .chat-message.nutricionista {
            align-self: flex-start;
            background-color: #e9ecef;
            color: black;
        }

        .chat-message strong {
            display: block;
            margin-bottom: 5px;
            font-size: 0.9em;
            color: inherit;
        }

        .chat-input {
            display: flex;
            gap: 10px;
            padding: 10px;
            background-color: #fff;
            border-top: 1px solid #ccc;
        }

        .chat-input input[type="text"] {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 1em;
            outline: none;
            transition: border-color 0.3s ease;
        }

        .chat-input input[type="text"]:focus {
            border-color: #007bff;
        }

        .chat-input button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1em;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .chat-input button:hover {
            background-color: #0056b3;
        }

        .chat-input button:active {
            background-color: #004080;
        }

        .dieta-modal-body {
            padding: 15px;
        }

        .dieta-dia {
            margin-bottom: 20px;
            border: 1px solid #eee;
            padding: 15px;
            border-radius: 8px;
            background-color: #f9f9f9;
        }

        .dieta-dia-titulo {
            text-align: center;
            color: #333;
            margin-bottom: 15px;
        }

        .dieta-refeicao {
            margin-bottom: 15px;
            padding-left: 10px;
        }

        .dieta-refeicao-titulo {
            color: #555;
            border-bottom: 1px dashed #ccc;
            padding-bottom: 5px;
            margin-bottom: 10px;
        }

        .dieta-alimento-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
            padding: 5px 0;
        }

        .alimento-nome {
            flex-grow: 1;
        }

        .btn-editar {
            margin-left: 10px;
        }

        .nenhum-alimento {
            color: #777;
            font-style: italic;
        }

        .dieta-divisor {
            border-top: 1px solid #ddd;
            margin-top: 20px;
            margin-bottom: 15px;
        }

        /* Estilos para o select de substituição (adicionado dinamicamente) */
        .dieta-alimento-item select {
            margin-left: 10px;
            font-size: 0.875rem;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            border: 1px solid #ccc;
        }
    </style>
</head>

<body>
    <div class="overlay" id="loader-container" style="display: none;">
        <div class="loader"></div>
    </div>

    <button id="toggleDarkMode" class="btn-dark-mode">
        <i class="fas fa-moon"></i>
    </button>
    <div class="container mt-4">
        <h1>Home User</h1>

        <div class="mb-4 text-center">
            <img id="profileImage" src="~/default.png" alt="Foto de perfil" class="rounded-circle" width="150"
                height="150">
        </div>

        <div class="mb-4" style="text-align: center;">
            <button class="btn btn-outline-dark" data-bs-toggle="modal"
                data-bs-target="#settingsModal">Configurações</button>
            <button class="btn btn-outline-dark" data-bs-toggle="modal" data-bs-target="#modalSemanal"
                style="display: none;">SemanaModal</button>
            <button class="btn btn-outline-dark" data-bs-toggle="modal" data-bs-target="#modalAlimentos">Alimentos
                Alergicos</button>
            <button class="btn btn-danger ms-2" onclick="logout()">Logout</button>
        </div>

        <!-- Modal de Configurações -->
        <div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="settingsModalLabel">Configurações da Conta</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="settingsForm">
                            <div class="mb-3">
                                <label for="name" class="form-label">Nome</label>
                                <input type="text" class="form-control" id="name">
                            </div>
                            <div class="mb-3">
                                <label for="email" class="form-label">E-mail</label>
                                <input type="email" class="form-control" id="email">
                            </div>
                            <div class="mb-3">
                                <label for="phone" class="form-label">Telefone</label>
                                <input type="text" class="form-control" id="phone">
                            </div>
                            <div class="mb-3">
                                <label for="sex" class="form-label">Sexo</label>
                                <select class="form-control" id="sex">
                                    <option value="" selected>Escolha seu sexo</option>
                                    <option value="masculino">Masculino</option>
                                    <option value="feminino">Feminino</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="idade" class="form-label">Idade</label>
                                <input type="number" class="form-control" id="idade" min="18" max="99" step="18">
                            </div>
                            <div class="mb-3">
                                <label for="peso" class="form-label">Peso (Kg)</label>
                                <input type="number" class="form-control" id="peso" min="0" step="1">
                            </div>
                            <div class="mb-3">
                                <label for="altura" class="form-label">Altura (cm)</label>
                                <input type="number" class="form-control" id="altura" min="0" step="1">
                            </div>
                            <div class="mb-3">
                                <label for="profilePhoto" class="form-label">Foto</label>
                                <input type="file" id="profilePhoto" accept="image/*">
                            </div>
                            <div class="mb-3">
                                <label for="oldPassword" class="form-label">Senha Antiga</label>
                                <input type="password" class="form-control" id="oldPassword">
                            </div>
                            <div class="mb-3">
                                <label for="newPassword" class="form-label">Nova Senha</label>
                                <input type="password" class="form-control" id="newPassword">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                        <button type="button" class="btn btn-primary" onclick="saveChanges()">Salvar alterações</button>
                        <button type="button" class="btn btn-danger" onclick="deleteAccount()">Deletar conta</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalSemanal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="settingsModalLabel">Atualização da semana</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="settingsForm">
                            <div class="mb-3">
                                <label for="pesoNovo" class="form-label">Peso (Kg)</label>
                                <input type="number" class="form-control" id="pesoNovo" min="0" step="1">
                            </div>
                            <div class="mb-3">
                                <label for="alturaNova" class="form-label">Altura (cm)</label>
                                <input type="number" class="form-control" id="alturaNova" min="0" step="1">
                            </div>
                            <div class="mb-3">
                                <label for="oldPasswordAlimento" class="form-label">Senha Antiga</label>
                                <input type="password" class="form-control" id="oldPasswordAlimento">
                            </div>
                        </form>
                        <div id="mensagemPeso"></div>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="saveChangesSemana(event)">Salvar
                            alterações</button>
                    </div>
                </div>
            </div>
        </div>


        <!-- Modal de Alimentos -->
        <div class="modal fade" id="modalAlimentos" tabindex="-1" aria-labelledby="alimentosModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content" style="gap: 10px;">
                    <div id="teste-virtual" name="native-select" placeholder="Todos os alimentos" data-search="true"
                        data-silent-initial-value-set="true">
                    </div>
                    <button class="btn btn-outline-dark" onclick="salvarAlimentosAlergicos()">Salvar</button>
                    @* <button class="btn btn-outline-dark" data-bs-toggle="modal" *@ @*
                        data-bs-target="#modalAddAlimentos">Adicionar Alimento Alergicos</button> *@
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="editarAlimentoModal" tabindex="-1" aria-labelledby="editarAlimentoModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editarAlimentoModalLabel">Editar Alimento</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="formEditarAlimento">
                        <div class="mb-3">
                            <label for="nomeAlimento" class="form-label">Nome do Alimento</label>
                            <input type="text" class="form-control" id="nomeAlimento" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="quantidadeAlimento" class="form-label">Quantidade (g/ml)</label>
                            <input type="number" class="form-control" id="quantidadeAlimento">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" id="salvarEdicao">Salvar Alterações</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="changePasswordModalLabel">Alterar Senha</h5>
                </div>
                <div class="modal-body">
                    <form id="changePasswordForm">
                        <div class="mb-3">
                            <label for="newPasswordAdmin" class="form-label">Nova Senha</label>
                            <input type="password" class="form-control" id="newPasswordAdmin" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="changePassword()">Salvar</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="modalDieta" tabindex="-1" aria-labelledby="modalDietaLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalDietaLabel">Sua Dieta</h5>
                </div>
                <div class="modal-body">
                    <form id="modalDietaForm">
                        <div id="modalDietaBody" class="mb-3">

                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" onclick="gerarPDFCompra()">Baixar Dieta</button>
                </div>
            </div>
        </div>
    </div>

    <div id="IMC"></div>

    <div class="container d-flex justify-content-center align-items-center">
        <div id="content" class="w-100">
        </div>
    </div>
    </div>
    <script>
        function ColocaCarregando() {
            document.getElementById("loader-container").style.display = "flex";
        }

        function TiraCarregando() {
            document.getElementById("loader-container").style.display = "none";
        }

        function gerarPDF() {
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF("p", "mm", "a4");

            const fundo = hexToRgb("#F5F5DC");

            const margemEsquerda = 15;
            const margemDireita = 15;
            const margemTopo = 15;
            const margemInferior = 15;
            const larguraUtil = 210 - margemEsquerda - margemDireita;
            const alturaUtil = 297 - margemTopo - margemInferior;

            const dietaDivs = document.querySelectorAll("#modalDietaBody > div");

            function desenharFundo() {
                pdf.setFillColor(fundo.r, fundo.g, fundo.b);
                pdf.rect(0, 0, 210, 297, 'F');
                pdf.setDrawColor(150, 0, 0);
                pdf.setLineWidth(0.5);
                pdf.rect(5, 5, 200, 287); // borda externa
                pdf.setLineWidth(0.2);
                pdf.rect(7, 7, 196, 283); // borda interna
            }

            desenharFundo();

            let y = margemTopo;

            pdf.setFont("Helvetica", "bold");
            pdf.setFontSize(16);
            pdf.setTextColor(80, 30, 30);
            pdf.text("Plano Semanal de Dieta", 105, y, { align: "center" });
            y += 12;

            dietaDivs.forEach((dietaDiv, index) => {
                const titulo = dietaDiv.querySelector('h3');
                if (titulo) {
                    verificarAltura(8);
                    pdf.setFont("Helvetica", "bold");
                    pdf.setFontSize(13);
                    pdf.setTextColor(60, 60, 60);
                    pdf.text(`${titulo.innerText}`, margemEsquerda, y);
                    y += 8;
                }

                const refeicoes = dietaDiv.querySelectorAll('div[class^="dieta"]');

                refeicoes.forEach(refeicaoDiv => {
                    const nomeRefeicaoElement = refeicaoDiv.querySelector('h4');
                    let refeicaoNome = nomeRefeicaoElement ? nomeRefeicaoElement.innerText.trim() : "";

                    const alimentos = refeicaoDiv.querySelectorAll('div[class*="-"]');

                    alimentos.forEach((alimentoDiv) => {
                        let textoCompleto = alimentoDiv.textContent.trim().replace(/\s+/g, ' ').replace(/Editar/g, '').trim();
                        let linhas = textoCompleto.split('|');

                        pdf.setFont("Helvetica", "normal");
                        pdf.setFontSize(11);
                        pdf.setTextColor(30, 30, 30);

                        if (refeicaoNome) {
                            verificarAltura(6);
                            pdf.setFont("Helvetica", "bold");
                            pdf.text(`${refeicaoNome}:`, margemEsquerda, y);
                            y += 6;
                            refeicaoNome = "";
                        }

                        if (linhas.length > 0) {
                            const nomeAlimento = linhas[0].trim();
                            const detalhesNutricionais = linhas.slice(1).map(l => l.trim()).join("  ");

                            // Nome do alimento
                            pdf.setFont("Helvetica", "bold");
                            pdf.setFontSize(11);
                            pdf.setTextColor(30, 30, 30);
                            pdf.text(`• ${nomeAlimento}:`, 15, y);

                            // Detalhes nutricionais com fonte menor e mais à direita
                            if (detalhesNutricionais) {
                                pdf.setFont("Helvetica", "normal");
                                pdf.setFontSize(9); // fonte menor
                                pdf.setTextColor(100, 100, 100);
                                pdf.text(`${detalhesNutricionais}`, 90, y); // mais à direita
                            }

                            y += 6;
                        }



                        const selectElement = alimentoDiv.querySelector('select');
                        if (selectElement && selectElement.value) {
                            const substituto = selectElement.options[selectElement.selectedIndex].text;
                            verificarAltura(5);
                            pdf.setFontSize(10);
                            pdf.setTextColor(100, 100, 100);
                            pdf.text(`Substituído por: ${substituto}`, margemEsquerda + 10, y);
                            y += 5;
                        }

                        y += 2;
                    });

                    y += 2;
                });

                y += 6;

                // Se for o último bloco, adiciona as receitas
                if (index === dietaDivs.length - 1) {
                    // Força nova página antes de "Receitas Recomendadas"
                    pdf.addPage();
                    desenharFundo();
                    y = margemTopo;

                    pdf.setFont("Helvetica", "bold");
                    pdf.setFontSize(14);
                    pdf.setTextColor(80, 30, 30);
                    pdf.text("Receitas Recomendadas", 105, y, { align: "center" });
                    y += 10;


                    const receitasDiv = dietaDivs[dietaDivs.length - 1];
                    const titulosReceita = receitasDiv.querySelectorAll('h6');
                    const listasReceita = receitasDiv.querySelectorAll('ul');

                    titulosReceita.forEach((titulo, idx) => {
                        verificarAltura(7);
                        pdf.setFont("Helvetica", "bold");
                        pdf.setFontSize(12);
                        pdf.setTextColor(50, 50, 50);
                        pdf.text(titulo.innerText, margemEsquerda, y);
                        y += 7;

                        const lista = listasReceita[idx];
                        if (lista) {
                            const itens = lista.querySelectorAll('li');
                            itens.forEach((li) => {
                                verificarAltura(5);
                                pdf.setFont("Helvetica", "normal");
                                pdf.setFontSize(10);
                                pdf.setTextColor(30, 30, 30);
                                pdf.text(`• ${li.innerText}`, margemEsquerda + 5, y);
                                y += 5;
                            });
                            y += 5;
                        }
                    });
                }
            });

            pdf.save("Dieta_Semanal.pdf");

            function verificarAltura(incremento) {
                if (y + incremento > 297 - margemInferior) {
                    pdf.addPage();
                    desenharFundo();
                    y = margemTopo;
                }
            }

            function hexToRgb(hex) {
                const bigint = parseInt(hex.replace("#", ""), 16);
                return {
                    r: (bigint >> 16) & 255,
                    g: (bigint >> 8) & 255,
                    b: bigint & 255
                };
            }
        }


        function gerarPDFCompra() {
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF("p", "mm", "a4");

            const fundo = hexToRgb("#F5F5DC");

            const margemEsquerda = 15;
            const margemDireita = 15;
            const margemTopo = 15;
            const margemInferior = 15;
            const larguraUtil = 210 - margemEsquerda - margemDireita;
            const alturaUtil = 297 - margemTopo - margemInferior;

            const dietaDivs = document.querySelectorAll("#modalDietaBody > div");

            function desenharFundo() {
                pdf.setFillColor(fundo.r, fundo.g, fundo.b);
                pdf.rect(0, 0, 210, 297, 'F');
                pdf.setDrawColor(150, 0, 0);
                pdf.setLineWidth(0.5);
                pdf.rect(5, 5, 200, 287); // borda externa
                pdf.setLineWidth(0.2);
                pdf.rect(7, 7, 196, 283); // borda interna
            }

            desenharFundo();

            let y = margemTopo;

            pdf.setFont("Helvetica", "bold");
            pdf.setFontSize(16);
            pdf.setTextColor(80, 30, 30);
            pdf.text("Lista de compras da Dieta", 105, y, { align: "center" });
            y += 12;

            dietaDivs.forEach((dietaDiv, index) => {
                const titulo = dietaDiv.querySelector('h3');
                if (titulo) {
                    verificarAltura(8);
                    pdf.setFont("Helvetica", "bold");
                    pdf.setFontSize(13);
                    pdf.setTextColor(60, 60, 60);
                    pdf.text(`${titulo.innerText}`, margemEsquerda, y);
                    y += 8;
                }

                const refeicoes = dietaDiv.querySelectorAll('div[class^="dieta"]');

                refeicoes.forEach(refeicaoDiv => {
                    const nomeRefeicaoElement = refeicaoDiv.querySelector('h4');
                    let refeicaoNome = nomeRefeicaoElement ? nomeRefeicaoElement.innerText.trim() : "";

                    const alimentos = refeicaoDiv.querySelectorAll('div[class*="-"]');

                    alimentos.forEach((alimentoDiv) => {
                        let textoCompleto = alimentoDiv.textContent.trim().replace(/\s+/g, ' ').replace(/Editar/g, '').trim();
                        let linhas = textoCompleto.split('|');

                        pdf.setFont("Helvetica", "normal");
                        pdf.setFontSize(11);
                        pdf.setTextColor(30, 30, 30);

                        if (refeicaoNome) {
                            verificarAltura(6);
                            pdf.setFont("Helvetica", "bold");
                            pdf.text(`${refeicaoNome}:`, margemEsquerda, y);
                            y += 6;
                            refeicaoNome = "";
                        }

                        if (linhas.length > 0) {
                            const nomeAlimento = linhas[0].trim();
                            const detalhesNutricionais = linhas.slice(1).map(l => l.trim()).join("  ");

                            // Nome do alimento
                            pdf.setFont("Helvetica", "bold");
                            pdf.setFontSize(11);
                            pdf.setTextColor(30, 30, 30);
                            pdf.text(`• ${nomeAlimento}:`, 15, y);



                            y += 6;
                        }



                        const selectElement = alimentoDiv.querySelector('select');
                        if (selectElement && selectElement.value) {
                            const substituto = selectElement.options[selectElement.selectedIndex].text;
                            verificarAltura(5);
                            pdf.setFontSize(10);
                            pdf.setTextColor(100, 100, 100);
                            pdf.text(`Substituído por: ${substituto}`, margemEsquerda + 10, y);
                            y += 5;
                        }

                        y += 2;
                    });

                    y += 2;
                });

                y += 6;


            });

            pdf.save("Dieta_Semanal.pdf");

            function verificarAltura(incremento) {
                if (y + incremento > 297 - margemInferior) {
                    pdf.addPage();
                    desenharFundo();
                    y = margemTopo;
                }
            }

            function hexToRgb(hex) {
                const bigint = parseInt(hex.replace("#", ""), 16);
                return {
                    r: (bigint >> 16) & 255,
                    g: (bigint >> 8) & 255,
                    b: bigint & 255
                };
            }
        }


        function cardNutricionista(nutricionista) {
                    const contentDiv = document.getElementById("content");
            contentDiv.innerHTML =
                `<div class="card">
                    <h2>${nutricionista.nome}</h2>

                    <a href="https://instagram.com/${nutricionista.instagram}" class="btn btn-info" id="insta" target="_blank">
                        <i class="bi bi-instagram me-2"></i>
                        Instagram
                    </a>

                    <p>${nutricionista.email}</p>
                    <p>Iremos começar sua avaliação</p>
                    <div class="d-flex gap-2 flex-wrap mt-3">
                        <button class="btn btn-outline-dark flex-grow-1">
                            Chat com o ${nutricionista.nome}
                        </button>
                        <button id="abrirDieta" class="btn btn-outline-dark flex-grow-1">
                            Abrir Dieta
                        </button>
                        <button class="btn btn-outline-primary flex-grow-1" data-bs-toggle="modal" data-bs-target="#modalSintomas">
                            Registrar Sintomas
                        </button>
                    </div>

                    <!-- Modal do Chat -->
                    <div class="modal fade" id="ChatModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="settingsModalLabel">Chat</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div id="ChatContainer">
                                        <div id="ChatTextForm"></div>
                                        <div class="chat-input">
                                            <input type="text" id="mensagem" name="mensagem" placeholder="Digite sua mensagem">
                                            <button type="button" class="btn btn-primary" id="btnEnviarMensagem" onClick="EnviarMensagem(${nutricionista.id})">Enviar</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                                </div>
                            </div>
                        </div>
                    </div>


                </div>
                <!--Modal Sintomas -->
                <div class="modal fade" id="modalSintomas" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="settingsModalLabel">Sintomas</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div id="SintomasContainer">
                                    <!-- VirtualSelect para Sintomas -->
                                    <div class="sintomas-input">
                                        <label for="sintomasSelect">Selecione os Sintomas</label>
                                        <select id="sintomasSelect" name="sintomas" class="form-select">
                                            <option value="dor-cabeca">Dor de Cabeça</option>
                                            <option value="fadiga">Fadiga</option>
                                            <option value="nausea">Náusea</option>
                                            <option value="vertigem">Vertigem</option>
                                            <option value="dificuldade-respiratoria">Dificuldade Respiratória</option>
                                        </select>
                                    </div>
                                    <!-- Checkboxes para os Dias da Semana -->
                                    <div class="dias-semana-input">
                                        <label><strong>Selecione os dias da semana:</strong></label>
                                        <div class="row">
                                            <div class="col-3">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="segunda" id="diaSegunda">
                                                    <label class="form-check-label" for="diaSegunda">Segunda</label>
                                                </div>
                                            </div>
                                            <div class="col-3">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="terca" id="diaTerca">
                                                    <label class="form-check-label" for="diaTerca">Terça</label>
                                                </div>
                                            </div>
                                            <div class="col-3">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="quarta" id="diaQuarta">
                                                    <label class="form-check-label" for="diaQuarta">Quarta</label>
                                                </div>
                                            </div>
                                            <div class="col-3">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="quinta" id="diaQuinta">
                                                    <label class="form-check-label" for="diaQuinta">Quinta</label>
                                                </div>
                                            </div>
                                            <div class="col-3">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="sexta" id="diaSexta">
                                                    <label class="form-check-label" for="diaSexta">Sexta</label>
                                                </div>
                                            </div>
                                            <div class="col-3">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="sabado" id="diaSabado">
                                                    <label class="form-check-label" for="diaSabado">Sábado</label>
                                                </div>
                                            </div>
                                            <div class="col-3">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" value="domingo" id="diaDomingo">
                                                    <label class="form-check-label" for="diaDomingo">Domingo</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                                <button type="button" class="btn btn-primary" id="btnSalvarSintomas" onclick="salvarSintomas(${nutricionista.id})">Salvar</button>

                            </div>
                        </div>
                    </div>
                </div>
                 `;




            document.getElementById("ChatModal").addEventListener("shown.bs.modal", function () {
                const nutricionistaId = nutricionista.id;
                cronJob = setInterval(() => fetchMensagens(nutricionistaId), 1000);
                fetchMensagens(nutricionistaId);
            });

            document.getElementById('abrirDieta').addEventListener('click', async function () {
                const token = localStorage.getItem('token');
                ColocaCarregando();
                if (!token) {
                    alert('Token não encontrado!');
                    return;
                }

                try {
                    const response = await fetch('/receberDieta', {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Erro na requisição');
                    }

                    const data = await response.json();
                    console.log(data);

                    const modalBody = document.getElementById('modalDietaBody');
                    modalBody.innerHTML = '';

                    let cont = 0;

                    if (data.dietas) {
                        for (const dieta of data.dietas) {
                            const dietaDiv = document.createElement('div');
                            dietaDiv.innerHTML += `<h3 style="text-align: center">${dieta.dia.charAt(0).toUpperCase() + dieta.dia.slice(1)}</h3><br>`;

                            const criarSecaoRefeicao = async (refeicao, listaAlimentos) => {
                                const nomesRefeicoes = {
                                    cafe: "Café da Manhã",
                                    almoco: "Almoço",
                                    cafeDT: "Café da Tarde",
                                    janta: "Janta"
                                };

                                const secaoDiv = document.createElement('div');
                                secaoDiv.classList.add(`dieta${cont}-${refeicao}`);
                                secaoDiv.innerHTML = `<h4>${nomesRefeicoes[refeicao] || refeicao}</h4>`;
                                let temAlimentos = false;
                                if (listaAlimentos.length > 0) {
                                    for (const alimento of listaAlimentos) {
                                        temAlimentos = true;
                                        try {
                                            const response = await fetch('/EnviarIngrediente', {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                    'Authorization': `Bearer ${token}`
                                                },
                                                body: JSON.stringify({
                                                    ingrediente: alimento.nome
                                                })
                                            });

                                            if (!response.ok) {
                                                throw new Error('Erro ao salvar o alimento');
                                            }

                                            const data = await response.json();

                                            const alimentoDiv = document.createElement('div');
                                            alimentoDiv.classList.add(`dieta${cont}-${refeicao}-${alimento.nome.replace(/\s+/g, '')}`);
                                            alimentoDiv.innerHTML = `
                                            ${alimento.quantidade} g/ml de ${alimento.nome}<br>
                                            Calorias: ${data.Calorias} kcal |
                                            Carboidratos: ${data.Carboidratos} g |
                                            Proteínas: ${data.Proteinas} g |
                                            Gorduras: ${data.Gorduras} g`;

                                            const botaoEditar = document.createElement('button');
                                            botaoEditar.classList.add('btn-editar', 'btn', 'btn-sm', 'btn-outline-primary', 'ms-2');
                                            botaoEditar.textContent = 'Editar';
                                            botaoEditar.setAttribute('data-alimento', alimento.nome);
                                            botaoEditar.setAttribute('data-refeicao', refeicao);
                                            botaoEditar.addEventListener('click', (event) => abrirModalEditar(event, botaoEditar));

                                            alimentoDiv.appendChild(botaoEditar);
                                            secaoDiv.appendChild(alimentoDiv);
                                        } catch (error) {
                                            console.error("Erro ao enviar a requisição:", error);
                                            alert("Erro ao adicionar o alimento!");
                                        }
                                    }
                                } else {
                                    secaoDiv.innerHTML += 'Nenhum';
                                    temAlimentos = false
                                }

                                dietaDiv.appendChild(secaoDiv);
                                if (temAlimentos) {
                                    try {
                                        const response = await fetch('/Receitas', {
                                            method: 'POST',
                                            headers: {
                                                'Content-Type': 'application/json',
                                                'Authorization': `Bearer ${token}`
                                            },
                                            body: JSON.stringify({
                                                ingrediente: listaAlimentos.map(a => a.nome)
                                            })
                                        });

                                        if (!response.ok) {
                                            throw new Error('Erro ao salvar o alimento');
                                        }
                                        const html = await response.text();
                                        console.log(html);
                                        const Div = document.createElement('div');
                                        Div.innerHTML = '<br><h4>Sugestões de receitas:</h4><br>' + html;
                                        dietaDiv.appendChild(Div);

                                    } catch (error) {
                                        console.error("Erro ao enviar a requisição:", error);
                                        alert("Erro ao adicionar o alimento!");
                                    }
                                }
                                temAlimentos = false;
                            };

                            const extrairAlimentos = refeicao => {
                                let lista = [];
                                if (dieta[refeicao] && Array.isArray(dieta[refeicao])) {
                                    dieta[refeicao].forEach(elemento => {
                                        if (elemento.alimentos && elemento.quantidade) {
                                            lista.push({
                                                nome: elemento.alimentos.nome,
                                                quantidade: elemento.quantidade
                                            });
                                        }
                                    });
                                }
                                return lista;
                            };

                            const refeicoes = ["cafe", "almoco", "cafeDT", "janta"];
                            for (const refeicao of refeicoes) {
                                const alimentos = extrairAlimentos(refeicao);
                                await criarSecaoRefeicao(refeicao, alimentos);
                            }

                            dietaDiv.innerHTML += '<hr>';
                            modalBody.appendChild(dietaDiv);

                            cont = (cont + 1) % 7;
                        }
                    }
                } catch (error) {
                    console.error('Erro ao buscar a dieta:', error);
                    alert('Você ainda não possui uma dieta');
                }

                TiraCarregando();

                // Adiciona evento para todos os botões "Editar"
                document.querySelectorAll('.btn-editar').forEach(botao => {
                    botao.addEventListener('click', function (event) {
                        abrirModalEditar(event, this); // Passando o evento e o botão como argumentos
                    });
                });
            })


            let substituicoesCache = {};

            function abrirModalEditar(event, botao) {
                event.preventDefault();
                const token = localStorage.getItem('token');
                const alimentoNome = botao.getAttribute('data-alimento');
                const refeicao = botao.getAttribute('data-refeicao');
                const alimentoDiv = botao.parentNode; // Obtém o div do alimento

                // Remover qualquer select de substituição existente para evitar duplicados
                const existingSelect = alimentoDiv.querySelector('select');
                if (existingSelect) {
                    alimentoDiv.removeChild(existingSelect);
                }

                fetch("/SubstituirAlimentos", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        'Authorization': `Bearer ${token}`,
                    },
                    body: JSON.stringify({ alimento: alimentoNome, refeicao })
                })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(err => {
                                throw new Error(`Erro ${response.status}: ${err.error || 'Erro desconhecido'}`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("Substituições recebidas:", data);

                        const selectSubstituicoes = document.createElement('select');
                        selectSubstituicoes.classList.add('form-select', 'form-select-sm', 'ms-2');

                        const optionPadrao = document.createElement('option');
                        optionPadrao.value = "";
                        optionPadrao.textContent = "Substituir por...";
                        selectSubstituicoes.appendChild(optionPadrao);

                        data.forEach(substituto => {
                            const option = document.createElement('option');
                            option.value = substituto.nome;
                            option.textContent = substituto.nome;
                            selectSubstituicoes.appendChild(option);
                        });

                        alimentoDiv.appendChild(selectSubstituicoes);

                    })
                    .catch(error => {
                        console.log('Erro ao buscar substituições:', error);
                        alert('Erro ao buscar substituições para este alimento.');
                    });
            }
            document.getElementById("ChatModal").addEventListener("hidden.bs.modal", function () {
                if (cronJob) {
                    clearInterval(cronJob);
                    cronJob = null;
                }
            });
        }
        function salvarSintomas(userId) {
            let sintomasSelect = document.getElementById("sintomasSelect");
            let sintomaSelecionado = sintomasSelect.value;

            // Pegar os dias selecionados
            let diasSelecionados = [];
            let dias = document.querySelectorAll(".form-check-input:checked");
            dias.forEach(dia => {
                diasSelecionados.push(dia.value);
            });

            let token = localStorage.getItem('token');

            if (!token) {
                alert("Você precisa estar logado para salvar os sintomas.");
                return;
            }

            if (!userId) {
                alert("ID do usuário não encontrado.");
                return;
            }

            let dados = {
                sintoma: sintomaSelecionado,
                dias: diasSelecionados
            };

            fetch(`/salvarSintomas/${userId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(dados)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert("Sintomas salvos com sucesso!");
                        // Fechar o modal após salvar
                        $('#modalSintomas').modal('hide');
                    } else {
                        alert("Houve um erro ao salvar os sintomas.");
                    }
                })
                .catch(error => {
                    console.error("Erro ao salvar os sintomas:", error);
                    alert("Erro ao salvar os sintomas.");
                });
        }

        async function fetchMensagens(nutricionistaId) {
            console.log("fetchMensagens chamado com ID:", nutricionistaId);

            const token = localStorage.getItem("token");
            console.log("Token recuperado:", token);

            fetch(`/PegarMensagem/${nutricionistaId}`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Erro ao buscar mensagens: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Dados recebidos do backend:", data);

                    const chatBox = document.getElementById("ChatTextForm");
                    console.log("Elemento ChatTextForm:", chatBox);

                    if (!chatBox) {
                        console.error("Elemento ChatTextForm não encontrado!");
                        return;
                    }
                    const lastStrong = chatBox.querySelectorAll("strong[data-id]");
                    const lastId = lastStrong.length > 0 ? lastStrong[lastStrong.length - 1].getAttribute("data-id") : null;

                    if (lastId !== null) {
                        console.log("Último data-id:", lastId);
                    } else {
                        console.log("Nenhuma mensagem encontrada.");
                    }

                    // Combina as mensagens do usuário e do nutricionista em uma única lista
                    const todasMensagens = [
                        ...data.mensagensUsuario.map(msg => ({ ...msg, tipo: "usuario" })),
                        ...data.mensagensNutricionista.map(msg => ({ ...msg, tipo: "nutricionista" }))
                    ];

                    // Ordena as mensagens pelo ID
                    todasMensagens.sort((a, b) => a.id - b.id);

                    console.log("Mensagens ordenadas:", todasMensagens);

                    const maiorId = todasMensagens.at(-1)?.id ?? null;
                    console.log(maiorId)
                    if (maiorId != lastId) {
                        chatBox.innerHTML = ""; // Limpa o chat apenas se houver uma nova mensagem

                        todasMensagens.forEach(msg => {
                            console.log("Adicionando mensagem:", msg);
                            const div = document.createElement("div");
                            div.classList.add("chat-message", msg.tipo);

                            if (msg.remetente === "Usuário") {
                                div.innerHTML = `<strong data-id="${msg.id}">Você:</strong> ${msg.mensagem}`;
                            } else {
                                div.innerHTML = `<strong data-id="${msg.id}">Nutricionista:</strong> ${msg.mensagem}`;
                            }

                            chatBox.appendChild(div);
                        });

                        // Rola automaticamente para a última mensagem
                        chatBox.scrollTop = chatBox.scrollHeight;
                    }
                })
                .catch(error => {
                    console.error("Erro ao buscar mensagens:", error);
                });
        }



        function calcularIMC(peso, altura) {
            if (!peso || !altura) {
                return "Valores insuficientes, favor preencher os dados em 'Configurações'";
            }

            const alturaMetros = altura / 100;
            const imc = (peso / (alturaMetros * alturaMetros)).toFixed(2);
            console.log(imc);
            let classificacao = "";

            if (imc < 18.5) {
                classificacao = "Abaixo do peso";
            } else if (imc < 24.9) {
                classificacao = "Peso normal";
            } else if (imc < 29.9) {
                classificacao = "Sobrepeso";
            } else if (imc < 34.9) {
                classificacao = "Obesidade Grau 1";
            } else if (imc < 39.9) {
                classificacao = "Obesidade Grau 2";
            } else {
                classificacao = "Obesidade Grau 3 (Mórbida)";
            }

            return `Seu IMC é ${imc} - ${classificacao}`;
        }

        function getSelectedAlimentos() {
            const selected = [];
            document.querySelectorAll('.checkbox:checked').forEach(checkbox => {
                selected.push(checkbox.value);
            });
            return selected;
        }

        function loadContent() {

            const token = localStorage.getItem("token");
            if (!token) {
                window.location.href = "/login";
                return;
            }

            fetch("/verifica/pedidos", {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data)
                    if (data.pedido) {
                        if (data.pedido.aceito == false) {
                            document.getElementById('content').innerHTML = '<p>Aguardando nutricionista...</p>';
                        } else {
                            cardNutricionista(data.pedido.nutricionista);
                        }
                    } else {
                        loadNutricionistas(token);
                    }
                })
                .catch(error => {
                    console.error("Erro ao verificar pedidos:", error);
                });

            // Chama a requisição para preencher o modal com os dados do usuário
            fetch("/user/yourself", {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(user => {
                    if (user) {
                        // Preenche os campos do modal com os dados do usuário
                        document.getElementById("name").value = user.nome;
                        document.getElementById("email").value = user.email;
                        document.getElementById("phone").value = user.telefone || '';
                        document.getElementById("sex").value = user.sexo || '';
                        document.getElementById("peso").value = user.peso || '';
                        document.getElementById("altura").value = user.altura || '';
                        document.getElementById("idade").value = user.idade || '';

                        if (user.foto) {
                            document.getElementById("profileImage").src = user.foto;
                        }

                        //FAZER UM CÁLCULO DO IMC E MOSTRAR
                        const imcDiv = document.getElementById("IMC");
                        imcDiv.innerHTML = calcularIMC(user.peso, user.altura);
                    }
                })
                .catch(error => {
                    console.error("Erro ao carregar dados do usuário:", error);
                });
        }

        function loadNutricionistas(token) {
            fetch("/users/nutris", {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(nutricionistas => {
                    const content = document.getElementById('content');
                    content.innerHTML = '';

                    nutricionistas.forEach(nutri => {
                        const nutriCard = document.createElement('div');
                        nutriCard.classList.add('card', 'mb-3');
                        nutriCard.innerHTML = `
                        <div class="card-body">
                            <h5 class="card-title">${nutri.nome}</h5>
                            <p class="card-text">${nutri.email}</p>
                            <button class="btn btn-primary" onclick="enviarPedido(${nutri.id})">Enviar Pedido</button>
                            <input type="hidden" id="nutriId_${nutri.id}" value="${nutri.id}">
                        </div>
                    `;
                        content.appendChild(nutriCard);
                    });
                })
                .catch(error => {
                    console.error("Erro ao carregar nutricionistas:", error);
                });
        }
        function EnviarMensagem(idEnvio) {
            const token = localStorage.getItem("token");
            const mensagem = document.getElementById('mensagem').value;

            if (!mensagem) {
                alert("Por favor, digite uma mensagem antes de enviar.");
                return;
            }

            fetch(`/EnviarMensagem`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    id: idEnvio,
                    mensagem: mensagem
                })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Erro ao enviar pedido.");
                    }
                    document.getElementById('mensagem').value = ""; // Limpa o campo de mensagem
                    fetchMensagens(idEnvio); // Atualiza o chat com as novas mensagens
                })
                .catch(error => {
                    console.error("Erro ao enviar mensagem:", error);
                    alert("Erro ao enviar mensagem.");
                });
        }

        function enviarPedido(nutriId) {
            const token = localStorage.getItem("token");

            fetch(`/candidatarNutri/${nutriId}`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Erro ao enviar pedido.");
                    }
                    alert("Pedido enviado com sucesso!");
                    loadContent();
                })
                .catch(error => {
                    console.error("Erro ao enviar pedido:", error);
                    alert("Erro ao enviar pedido.");
                });
        }

        function saveChanges() {
            const selectedAlimentos = getSelectedAlimentos(); // Pega os IDs dos alimentos selecionados
            const token = localStorage.getItem("token");

            if (document.getElementById("idade").value < 99 && document.getElementById("idade").value > 18) {
                if (document.getElementById("sex").value == "masculino" || document.getElementById("sex").value == "feminino") {
                    if (document.getElementById("peso").value > 0) {
                        if (document.getElementById("altura").value > 0) {
                            console.log(token);

                            ColocaCarregando();

                            // Dados do usuário
                            const userData = {
                                Nome: document.getElementById("name").value,
                                Telefone: document.getElementById("phone").value,
                                Email: document.getElementById("email").value,
                                Sexo: document.getElementById("sex").value,
                                Idade: document.getElementById("idade").value,
                                Peso: document.getElementById("peso").value,
                                Altura: document.getElementById("altura").value,
                                SenhaAntiga: document.getElementById("oldPassword").value,
                                NovaSenha: document.getElementById("newPassword").value.trim() === "" ? null : document.getElementById("newPassword").value,
                                AlimentosAlergicosIds: selectedAlimentos
                            };

                            console.log(userData);

                            // Requisição para salvar dados do usuário e os alimentos selecionados
                            fetch("/update/user/yourself", {
                                method: "PUT",
                                headers: {
                                    "Authorization": `Bearer ${token}`,
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify(userData) // Enviando tudo junto no corpo da requisição
                            })
                                .then(async response => {
                                    const json = await response.json();

                                    if (!response.ok) {
                                        let errorMessage = "Erro ao salvar";
                                        TiraCarregando();

                                        if (json.error) {
                                            errorMessage = json.error;
                                        } else if (json.errors) {
                                            const firstErrorKey = Object.keys(json.errors)[0];
                                            if (json.errors[firstErrorKey] && json.errors[firstErrorKey].length > 0) {
                                                errorMessage = json.errors[firstErrorKey][0];
                                            }
                                        }

                                        throw new Error(errorMessage);
                                    }

                                    // Sucesso ao salvar
                                    TiraCarregando();
                                    alert("Alterações salvas com sucesso!");
                                    logout();
                                })
                                .catch(error => {
                                    TiraCarregando();
                                    console.error("Erro ao salvar alterações:", error);
                                    alert("Erro ao salvar alterações.");
                                });
                        } else {
                            TiraCarregando();
                            console.error("Digite uma altura");
                            alert("Digite uma altura");
                        }
                    } else {
                        TiraCarregando();
                        console.error("Digite um peso");
                        alert("Digite um peso");
                    }
                } else {
                    TiraCarregando();
                    console.error("Escolha um sexo");
                    alert("Escolha um sexo");
                }
            }
            else {
                TiraCarregando();
                console.error("Digite uma idade entre 18 anos e 99 anos");
                alert("Digite uma idade entre 18 anos e 99 anos");
            }
        }

        // document.addEventListener('DOMContentLoaded', function () {
        //     // Verificar se já se passou uma semana desde a última exibição do modal
        //     const lastShown = localStorage.getItem('lastShownModal');

        //     if (lastShown) {
        //         const lastShownDate = new Date(lastShown);
        //         const now = new Date();
        //         const oneWeek = 7 * 24 * 60 * 60 * 1000; // 1 semana em milissegundos
        //         // Verifica se já passou 1 semana
        //         if (now - lastShownDate >= oneWeek) {
        //             // Exibir o modal
        //             $('#modalSemanal').modal('show');
        //         }
        //     } else {
        //         // Exibir o modal pela primeira vez, se não houver registro
        //         $('#modalSemanal').modal('show');
        //     }
        // });

        // Função chamada quando o modal for fechado ou salvo
        function saveChangesSemana(event) {
            event.preventDefault();  // Impede o recarregamento da página

            // Obter os valores dos campos de input
            const peso = document.getElementById('pesoNovo').value;
            const altura = document.getElementById('alturaNova').value;
            const SenhaAntiga = document.getElementById("oldPasswordAlimento").value;

            console.log("Peso:", peso);  // Verificar o valor capturado
            console.log("Altura:", altura);  // Verificar o valor capturado
            console.log("Senha Antiga:", SenhaAntiga);  // Verificar o valor da senha antiga

            const token = localStorage.getItem("token");
            console.log("Token:", token);

            // Verificar se os valores são válidos
            if (!peso || !altura || !SenhaAntiga) {
                alert('Por favor, preencha todos os campos.');
                return;
            }

            const pesoAntigo = document.getElementById('peso').value;
            console.log("xD ~ saveChangesSemana ~ pesoAntigo:", pesoAntigo)

            // Calcular a diferença de peso
            let mensagemPeso = '';
            if (peso > pesoAntigo) {
                // Ganhou peso
                const ganhoPeso = peso - pesoAntigo;
                mensagemPeso = `Você ganhou ${ganhoPeso.toFixed(2)} kg.`;
            } else if (peso < pesoAntigo) {
                // Perdeu peso
                const perdaPeso = pesoAntigo - peso;
                mensagemPeso = `Você perdeu ${perdaPeso.toFixed(2)} kg.`;
            } else {
                // Não houve alteração
                mensagemPeso = 'Você não ganhou nem perdeu peso.';
            }

            // Preparar os dados para enviar para o backend
            const data = {
                Peso: parseFloat(peso),
                Altura: parseFloat(altura),
                SenhaAntiga: SenhaAntiga
            };

            // Verificar os dados antes de enviar
            console.log("Dados enviados:", data);

            // Fazer a requisição para o backend
            fetch('/update/user/peso', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}` // se precisar de autenticação com token
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.sucesso) {
                        alert(`${data.sucesso}\n${mensagemPeso}`);  // Exibir a mensagem de sucesso junto com a mensagem de peso

                        // Atualizar a data da última exibição do modal
                        localStorage.setItem('lastShownModal', new Date().toISOString());

                        // Armazenar valores adicionais se necessário (exemplo com localStorage)
                        document.getElementById('peso').dataset.pesoAntigo = peso;
                        document.getElementById('mensagemPeso').innerText = mensagemPeso;
                        logout()
                    } else {
                        alert(data.error || 'Erro ao salvar as alterações.');
                    }

                })
                .catch(error => {
                    console.error('Erro:', error);
                    alert('Erro ao comunicar com o servidor.');
                });


            try {
                const emailObj = {
                    idusuario: localStorage.getItem('idUser'),
                    titulo: "Você deve preencher novamente seus dados!",
                    body: "Olá, o período de 1 semana desde sua ultima atualização dos dados de peso já passou, entre novamente no site e preencha novamente os campos!!",
                };

                const response = fetch('/AgendarEmail', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(emailObj)
                });

                if (!response.ok) throw new Error(`Erro: ${response.status}`);
                console.log('Email enviado com sucesso');
            } catch (error) {
                console.error('Erro ao enviar dieta:', error);
            }
        }

        function deleteAccount() {
            const token = localStorage.getItem("token");

            fetch("/delete/yourself", {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Erro ao deletar conta.");
                    }
                    alert("Conta deletada com sucesso!");
                    localStorage.removeItem("token");
                    window.location.href = "/login";
                })
                .catch(error => {
                    console.error("Erro ao deletar conta:", error);
                    alert("Erro ao deletar conta.");
                });
        }

        function logout() {
            localStorage.removeItem("token");
            window.location.href = "/login";
        }

        function verificaAdmCriou() {
            const token = localStorage.getItem("token");

            fetch("/verificaAdmCriou", {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if (data.sim) {
                        const changePasswordModal = new bootstrap.Modal(document.getElementById('changePasswordModal'));
                        changePasswordModal.show();
                    } else {
                        loadContent();
                    }
                })
                .catch(error => {
                    console.error("Erro ao verificar administrador:", error);
                });
        }

        document.getElementById("changePasswordModal").addEventListener("hidden.bs.modal", function () {
            verificaAdmCriou();
        });

        function changePassword() {
            const token = localStorage.getItem("token");
            const newPassword = document.getElementById("newPasswordAdmin").value.trim();

            if (!newPassword) {
                alert("Por favor, insira uma nova senha.");
                return;
            }

            fetch("/mudasenha", {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ senha: newPassword })
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("A senha deve conter no mínimo 8 caracteres, com pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial.");
                    }
                    alert("Senha alterada com sucesso! Faça login novamente.");
                    logout();
                })
                .catch(error => {
                    console.error("Erro ao alterar senha:", error);
                    alert("A senha deve conter no mínimo 8 caracteres, com pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial.");
                });
        }

        function salvarAlimentos() {
            const token = localStorage.getItem("token");
            const usuarioId = localStorage.getItem("usuarioId");

            if (!token || !usuarioId) {
                console.error("Usuário não autenticado!");
                document.getElementById("mensagem").innerText = "Usuário não autenticado!";
                return;
            }

            const alimento = document.getElementById("inputAlimento").value.trim();

            if (alimento) {
                fetch('/EnviarIngrediente', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`  // Envia o token no cabeçalho
                    },
                    body: JSON.stringify({
                        ingrediente: alimento
                    })
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        }
                        throw new Error('Erro ao salvar o alimento');
                    })
                    .then(data => {
                        // Exibe os dados recebidos abaixo do botão "Salvar"
                        const dadosRecebidosDiv = document.getElementById("dadosRecebidos");

                        // Formata os dados recebidos em texto
                        const textoRecebido = `
                        <p><strong>Calorias:</strong> ${data.Calorias} kcal</p>
                        <p><strong>Carboidratos:</strong> ${data.Carboidratos} g</p>
                        <p><strong>Proteínas:</strong> ${data.Proteinas} g</p>
                        <p><strong>Gorduras:</strong> ${data.Gorduras} g</p>
                        <p><strong>Vitaminas e Minerais:</strong> ${data["Vitaminas e Minerais"]}</p>
                    `;

                        // Insere os dados na div
                        dadosRecebidosDiv.innerHTML = textoRecebido;
                        dadosRecebidosDiv.style.display = "block";  // Torna visível a div com os dados
                    })
                    .catch(error => {
                        console.error("Erro ao enviar a requisição:", error);
                        alert("Erro ao adicionar o alimento!");
                    });
            } else {
                alert("Por favor, digite o nome do alimento!");
            }
        }

        function salvarAlimentosAlergicos() {
            const token = localStorage.getItem("token");
            const usuarioId = localStorage.getItem("usuarioId");

            if (!token || !usuarioId) {
                console.error("Usuário não autenticado!");
                document.getElementById("mensagem").innerText = "Usuário não autenticado!";
                return;
            }

            const selectAlimento = document.getElementById('teste-virtual');
            const alimentoIds = selectAlimento ? selectAlimento.value : [];

            if (alimentoIds.length > 1) {
                console.log("Múltiplos alimentos selecionados:", alimentoIds);  // Debugging
            }

            const dados = {
                UsuarioId: parseInt(usuarioId),
                AlimentoIds: alimentoIds
            };

            console.log("Dados a serem enviados:", dados);

            fetch("/alimentos/salvarAlimentos", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}` // Enviar o token no cabeçalho
                },
                body: JSON.stringify(dados)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erro ao salvar alimentos! Status: ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    // Exibe a mensagem com base na resposta do servidor
                    document.getElementById("mensagem").innerText = data.message || "Alimentos salvos com sucesso!";
                    console.log("Resposta do servidor:", data);
                })
                .catch(error => {
                    // Exibe a mensagem de erro se algo der errado
                    document.getElementById("mensagem").innerText = error.message || "Erro ao salvar alimentos!";
                    console.error("Erro ao salvar alimentos:", error);
                });
        }




        const selectAlimento = document.getElementById('teste-virtual');

        function carregarAlimentos() {
            const token = localStorage.getItem("token"); // Pegando o token do localStorage
            const usuarioId = localStorage.getItem("usuarioId"); // Pegando o ID do usuário

            if (!token || !usuarioId) {
                console.error("Usuário não autenticado! O token ou usuário não foram encontrados.");
                return;
            }

            // Primeiro, buscar todos os alimentos disponíveis
            fetch("/alimentos/getAlimentos", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}` // Enviando o token corretamente
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Erro HTTP: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Alimentos recebidos:", data);

                    // Buscar os alimentos já selecionados pelo usuário
                    fetch(`/alimentos/getAlimentosUsuario/${usuarioId}`, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json",
                            "Access-Control-Allow-Origin": "*",
                            "Authorization": `Bearer ${token}` // Enviando o token corretamente
                        }
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Erro ao obter alimentos do usuário: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(alimentosUsuario => {
                            // Mapear os IDs dos alimentos que o usuário já selecionou
                            let alimentosSelecionados = alimentosUsuario.map(alimento => alimento.id);

                            // Inicializar o VirtualSelect, se ainda não estiver
                            let selectAlimento = document.getElementById('teste-virtual');
                            if (selectAlimento) {
                                VirtualSelect.init({
                                    ele: selectAlimento,  // Passando o elemento do VirtualSelect
                                    search: true,
                                    multiple: true,
                                    hideClearButton: true,
                                    maxWidth: "600px"
                                });

                                // Adicionar as opções ao VirtualSelect
                                data.forEach(alimento => {
                                    selectAlimento.addOption({
                                        value: alimento.id,  // Valor do alimento
                                        label: alimento.nome // Nome do alimento
                                    });
                                });

                                // Marcar os alimentos selecionados
                                // Aqui, usamos 'setValue' para passar um array com todos os IDs selecionados
                                selectAlimento.setValue(alimentosSelecionados);
                            }
                        })
                        .catch(error => console.error("Erro ao carregar alimentos do usuário:", error));
                })
                .catch(error => console.error("Erro ao carregar alimentos:", error));
        }

        document.addEventListener('DOMContentLoaded', verificaAdmCriou);

        document.addEventListener("DOMContentLoaded", function () {
            // @* VirtualSelect.init({ele: "#teste-virtual", search: true, multiple: true }); *@

            carregarAlimentos();

            const toggleButton = document.getElementById("toggleDarkMode");
            const body = document.body;

            if (localStorage.getItem("dark-mode") === "enabled") {
                body.classList.add("dark-mode");
                toggleButton.innerHTML = '<i class="fas fa-sun"></i>';
            }

            toggleButton.addEventListener("click", function () {
                body.classList.toggle("dark-mode");

                if (body.classList.contains('dark-mode')) {
                    localStorage.setItem('dark-mode', 'enabled');
                    toggleButton.innerHTML = '<i class="fas fa-sun"></i>';
                } else {
                    localStorage.setItem('dark-mode', 'disabled');
                    toggleButton.innerHTML = '<i class="fas fa-moon"></i>';
                }
            });
        });
    </script>

    <script>
        /*!
 * Virtual Select v1.0.47
 * https://sa-si-dev.github.io/virtual-select
 * Licensed under MIT (https://github.com/sa-si-dev/virtual-select/blob/master/LICENSE)
 */!function () { "use strict"; function e(e) { return function (e) { if (Array.isArray(e)) return t(e) }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || function (e, i) { if (e) { if ("string" == typeof e) return t(e, i); var o = {}.toString.call(e).slice(8, -1); return "Object" === o && e.constructor && (o = e.constructor.name), "Map" === o || "Set" === o ? Array.from(e) : "Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o) ? t(e, i) : void 0 } }(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function t(e, t) { (null == t || t > e.length) && (t = e.length); for (var i = 0, o = Array(t); i < t; i++)o[i] = e[i]; return o } function i(e) { return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, i(e) } function o(e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, s(o.key), o) } } function s(e) { var t = function (e, t) { if ("object" != i(e) || !e) return e; var o = e[Symbol.toPrimitive]; if (void 0 !== o) { var s = o.call(e, t || "default"); if ("object" != i(s)) return s; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === t ? String : Number)(e) }(e, "string"); return "symbol" == i(t) ? t : t + "" } var n = function () { return t = function e() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e) }, n = [{ key: "getString", value: function (e) { return e || 0 === e ? e.toString() : "" } }, { key: "convertToBoolean", value: function (e) { return !0 === e || "true" === e || !1 !== e && "false" !== e && arguments.length > 1 && void 0 !== arguments[1] && arguments[1] } }, { key: "isEmpty", value: function (e) { var t = !1; return e ? Array.isArray(e) ? 0 === e.length && (t = !0) : "object" === i(e) && 0 === Object.keys(e).length && (t = !0) : t = !0, t } }, { key: "isNotEmpty", value: function (e) { return !this.isEmpty(e) } }, { key: "removeItemFromArray", value: function (t, i) { var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; if (!Array.isArray(t) || !t.length) return t; var s = o ? e(t) : t, n = s.indexOf(i); return -1 !== n && s.splice(n, 1), s } }, { key: "removeArrayEmpty", value: function (e) { return Array.isArray(e) && e.length ? e.filter((function (e) { return !!e })) : [] } }, { key: "getRandomInt", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = Math.ceil(t), o = Math.floor(e); return Math.floor(Math.random() * (o - i - 1)) + i } }, { key: "regexEscape", value: function (e) { return e.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&") } }, { key: "normalizeString", value: function (e) { return e.normalize("NFD").replace(/[^\w]/g, "") } }, { key: "willTextOverflow", value: function (e, t) { var i = document.createElement("div"); i.style.position = "absolute", i.style.visibility = "hidden", i.style.whiteSpace = "nowrap", i.style.fontSize = window.getComputedStyle(e).fontSize, i.style.fontFamily = window.getComputedStyle(e).fontFamily, i.textContent = t, document.body.appendChild(i); var o = i.clientWidth; return document.body.removeChild(i), o > e.clientWidth } }, { key: "replaceDoubleQuotesWithHTML", value: function (e) { return e.replace(/"/g, "&quot;") } }, { key: "containsHTML", value: function (e) { return /<[a-z][\s\S]*>/i.test(e) } }, { key: "containsHTMLorJS", value: function (e) { return /<([a-z]+)[\s\S]*?>|on\w+="[^"]*"/i.test(e) } }], (s = null) && o(t.prototype, s), n && o(t, n), Object.defineProperty(t, "prototype", { writable: !1 }), t; var t, s, n }(); function r(e) { return r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, r(e) } function a(e, t) { return function (e) { if (Array.isArray(e)) return e }(e) || function (e, t) { var i = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"]; if (null != i) { var o, s, n, r, a = [], l = !0, u = !1; try { if (n = (i = i.call(e)).next, 0 === t) { if (Object(i) !== i) return; l = !1 } else for (; !(l = (o = n.call(i)).done) && (a.push(o.value), a.length !== t); l = !0); } catch (e) { u = !0, s = e } finally { try { if (!l && null != i.return && (r = i.return(), Object(r) !== r)) return } finally { if (u) throw s } } return a } }(e, t) || u(e, t) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function l(e) { return function (e) { if (Array.isArray(e)) return c(e) }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || u(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function u(e, t) { if (e) { if ("string" == typeof e) return c(e, t); var i = {}.toString.call(e).slice(8, -1); return "Object" === i && e.constructor && (i = e.constructor.name), "Map" === i || "Set" === i ? Array.from(e) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? c(e, t) : void 0 } } function c(e, t) { (null == t || t > e.length) && (t = e.length); for (var i = 0, o = Array(t); i < t; i++)o[i] = e[i]; return o } function p(e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, h(o.key), o) } } function h(e) { var t = function (e, t) { if ("object" != r(e) || !e) return e; var i = e[Symbol.toPrimitive]; if (void 0 !== i) { var o = i.call(e, t || "default"); if ("object" != r(o)) return o; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === t ? String : Number)(e) }(e, "string"); return "symbol" == r(t) ? t : t + "" } var d = function () { function e() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e) } return t = e, o = [{ key: "addClass", value: function (t, i) { if (t) { var o = i.split(" "); e.getElements(t).forEach((function (e) { var t; (t = e.classList).add.apply(t, l(o)) })) } } }, { key: "removeClass", value: function (t, i) { if (t) { var o = i.split(" "); e.getElements(t).forEach((function (e) { var t; (t = e.classList).remove.apply(t, l(o)) })) } } }, { key: "toggleClass", value: function (t, i, o) { var s; t && (void 0 !== o && (s = Boolean(o)), e.getElements(t).forEach((function (e) { e.classList.toggle(i, s) }))) } }, { key: "hasClass", value: function (e, t) { return !!e && e.classList.contains(t) } }, { key: "hasEllipsis", value: function (e) { return !!e && e.scrollWidth > e.offsetWidth } }, { key: "getData", value: function (e, t, i) { if (e) { var o = e ? e.dataset[t] : ""; return "number" === i ? o = parseFloat(o) || 0 : "true" === o ? o = !0 : "false" === o && (o = !1), o } } }, { key: "setData", value: function (e, t, i) { e && (e.dataset[t] = i) } }, { key: "setAttr", value: function (e, t, i) { e && e.setAttribute(t, i) } }, { key: "setAttrFromEle", value: function (e, t, i, o) { var s = {}; i.forEach((function (t) { s[t] = e.getAttribute(t) })), i.forEach((function (e) { var i = s[e]; (i || -1 !== o.indexOf(e) && "" === i) && t.setAttribute(e, i) })) } }, { key: "setStyle", value: function (e, t, i) { e && (e.style[t] = i) } }, { key: "setStyles", value: function (e, t) { e && t && Object.keys(t).forEach((function (i) { e.style[i] = t[i] })) } }, { key: "setAria", value: function (e, t, i) { var o = t; "role" !== o && (o = "aria-".concat(o)), e.setAttribute(o, i) } }, { key: "getElements", value: function (e) { return e ? void 0 === e.forEach ? [e] : e : [] } }, { key: "getElementsBySelector", value: function () { var e, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, o = void 0 !== i ? i : document; return "" !== t && (e = o.querySelectorAll(t)), void 0 !== e ? Array.from(e) : [] } }, { key: "addEvent", value: function (t, i, o) { t && n.removeArrayEmpty(i.split(" ")).forEach((function (i) { e.getElements(t).forEach((function (e) { e.addEventListener(i, o) })) })) } }, { key: "dispatchEvent", value: function (t, i) { var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; if (t) { var s = e.getElements(t); setTimeout((function () { s.forEach((function (e) { e.dispatchEvent(new CustomEvent(i, { bubbles: o })) })) }), 0) } } }, { key: "getAttributesText", value: function (e) { var t = ""; return e ? (Object.entries(e).forEach((function (e) { var i = a(e, 2), o = i[0], s = i[1]; void 0 !== s && (t += " ".concat(o, '="').concat(s, '" ')) })), t) : t } }, { key: "convertPropToDataAttr", value: function (e) { return e ? "data-".concat(e).replace(/([A-Z])/g, "-$1").toLowerCase() : "" } }, { key: "changeTabIndex", value: function (t, i) { t ? e.getElements(t).forEach((function (e) { e.tabIndex = i })) : console.log(t, "Invalid element provided.") } }, { key: "removeEvent", value: function (t, i, o) { t && e.getElements(t).forEach((function (e) { e.removeEventListener(i, o) })) } }], (i = null) && p(t.prototype, i), o && p(t, o), Object.defineProperty(t, "prototype", { writable: !1 }), t; var t, i, o }(); function v(e, t) { var i = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); t && (o = o.filter((function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable }))), i.push.apply(i, o) } return i } function f(e) { for (var t = 1; t < arguments.length; t++) { var i = null != arguments[t] ? arguments[t] : {}; t % 2 ? v(Object(i), !0).forEach((function (t) { y(e, t, i[t]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(i)) : v(Object(i)).forEach((function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(i, t)) })) } return e } function y(e, t, i) { return (t = w(t)) in e ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = i, e } function b(e) { return b = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, b(e) } function m(e, t) { return function (e) { if (Array.isArray(e)) return e }(e) || function (e, t) { var i = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"]; if (null != i) { var o, s, n, r, a = [], l = !0, u = !1; try { if (n = (i = i.call(e)).next, 0 === t) { if (Object(i) !== i) return; l = !1 } else for (; !(l = (o = n.call(i)).done) && (a.push(o.value), a.length !== t); l = !0); } catch (e) { u = !0, s = e } finally { try { if (!l && null != i.return && (r = i.return(), Object(r) !== r)) return } finally { if (u) throw s } } return a } }(e, t) || O(e, t) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function g(e) { return function (e) { if (Array.isArray(e)) return S(e) }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || O(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function O(e, t) { if (e) { if ("string" == typeof e) return S(e, t); var i = {}.toString.call(e).slice(8, -1); return "Object" === i && e.constructor && (i = e.constructor.name), "Map" === i || "Set" === i ? Array.from(e) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? S(e, t) : void 0 } } function S(e, t) { (null == t || t > e.length) && (t = e.length); for (var i = 0, o = Array(t); i < t; i++)o[i] = e[i]; return o } function x(e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, w(o.key), o) } } function w(e) { var t = function (e, t) { if ("object" != b(e) || !e) return e; var i = e[Symbol.toPrimitive]; if (void 0 !== i) { var o = i.call(e, t || "default"); if ("object" != b(o)) return o; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === t ? String : Number)(e) }(e, "string"); return "symbol" == b(t) ? t : t + "" } var k, C = { 13: "onEnterPress", 38: "onUpArrowPress", 40: "onDownArrowPress", 46: "onBackspaceOrDeletePress", 8: "onBackspaceOrDeletePress" }, E = ["autofocus", "disabled", "multiple", "required"], $ = ["autofocus", "class", "disabled", "id", "multiple", "name", "placeholder", "required"], A = ["additionalClasses", "additionalDropboxClasses", "additionalDropboxContainerClasses", "additionalToggleButtonClasses", "aliasKey", "allOptionsSelectedText", "allowNewOption", "alwaysShowSelectedOptionsCount", "alwaysShowSelectedOptionsLabel", "ariaLabelledby", "ariaLabelText", "ariaLabelClearButtonText", "autoSelectFirstOption", "clearButtonText", "descriptionKey", "disableAllOptionsSelectedText", "disableOptionGroupCheckbox", "disableSelectAll", "disableValidation", "dropboxWidth", "dropboxWrapper", "emptyValue", "enableSecureText", "focusSelectedOptionOnOpen", "hasOptionDescription", "hideClearButton", "hideValueTooltipOnSelectAll", "keepAlwaysOpen", "labelKey", "markSearchResults", "maxValues", "maxWidth", "minValues", "moreText", "noOfDisplayValues", "noOptionsText", "noSearchResultsText", "optionHeight", "optionSelectedText", "optionsCount", "optionsSelectedText", "popupDropboxBreakpoint", "popupPosition", "position", "search", "searchByStartsWith", "searchDelay", "searchFormLabel", "searchGroup", "searchNormalize", "searchPlaceholderText", "selectAllOnlyVisible", "selectAllText", "setValueAsArray", "showDropboxAsPopup", "showOptionsOnlyOnSearch", "showSelectedOptionsFirst", "showValueAsTags", "silentInitialValueSet", "textDirection", "tooltipAlignment", "tooltipFontSize", "tooltipMaxWidth", "updatePositionThrottle", "useGroupValue", "valueKey", "zIndex"], T = function () { function e(t) { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e); try { this.createSecureTextElements(), this.setProps(t), this.setDisabledOptions(t.disabledOptions), this.setOptions(t.options), this.render() } catch (e) { console.warn("Couldn't initiate Virtual Select"), console.error(e) } } return t = e, i = [{ key: "render", value: function () { if (this.$ele) { var e = this.uniqueId, t = "vscomp-wrapper", i = "vscomp-toggle-button", o = this.showValueAsTags ? "" : this.getTooltipAttrText(this.placeholder, !0, !0), s = this.getTooltipAttrText(this.clearButtonText), n = this.ariaLabelledby ? 'aria-labelledby="'.concat(this.ariaLabelledby, '"') : "", r = this.ariaLabelText ? 'aria-label="'.concat(this.ariaLabelText, '"') : "", a = this.ariaLabelClearButtonText ? 'aria-label="'.concat(this.ariaLabelClearButtonText, '"') : "", l = !1; this.additionalClasses && (t += " ".concat(this.additionalClasses)), this.additionalToggleButtonClasses && (i += " ".concat(this.additionalToggleButtonClasses)), this.multiple && (t += " multiple", this.disableSelectAll || (t += " has-select-all")), this.hideClearButton || (t += " has-clear-button"), this.keepAlwaysOpen ? (t += " keep-always-open", l = !0) : t += " closed", this.showAsPopup && (t += " show-as-popup"), this.hasSearch && (t += " has-search-input"), this.showValueAsTags && (t += " show-value-as-tags"), this.textDirection && (t += " text-direction-".concat(this.textDirection)), this.popupPosition && (t += " popup-position-".concat(this.popupPosition.toLowerCase())); var u = '<div id="vscomp-ele-wrapper-'.concat(e, '" class="vscomp-ele-wrapper ').concat(t, '" tabindex="0"\n        role="combobox" aria-haspopup="listbox" aria-controls="vscomp-dropbox-container-').concat(e, '"\n        aria-expanded="').concat(l, '" ').concat(n, " ").concat(r, '>\n        <input type="hidden" name="').concat(this.name, '" class="vscomp-hidden-input">\n        <div class="').concat(i, '">\n          <div class="vscomp-value" ').concat(o, ">\n            ").concat(this.placeholder, '\n          </div>\n          <div class="vscomp-arrow"></div>\n          <div class="vscomp-clear-button toggle-button-child" ').concat(s, ' \n          tabindex="0" ').concat(a, '>\n            <i class="vscomp-clear-icon"></i>\n          </div>\n        </div>\n\n        ').concat(this.renderDropbox({ wrapperClasses: t }), "\n      </div>"); this.$ele.innerHTML = u, this.$body = document.querySelector("body"), this.$wrapper = this.$ele.querySelector(".vscomp-wrapper"), this.hasDropboxWrapper ? (this.$allWrappers = [this.$wrapper, this.$dropboxWrapper], this.$dropboxContainer = this.$dropboxWrapper.querySelector(".vscomp-dropbox-container"), d.addClass(this.$dropboxContainer, "pop-comp-wrapper")) : (this.$allWrappers = [this.$wrapper], this.$dropboxContainer = this.$wrapper.querySelector(".vscomp-dropbox-container")), this.$toggleButton = this.$ele.querySelector(".vscomp-toggle-button"), this.$clearButton = this.$ele.querySelector(".vscomp-clear-button"), this.$valueText = this.$ele.querySelector(".vscomp-value"), this.$hiddenInput = this.$ele.querySelector(".vscomp-hidden-input"), this.$dropbox = this.$dropboxContainer.querySelector(".vscomp-dropbox"), this.$dropboxCloseButton = this.$dropboxContainer.querySelector(".vscomp-dropbox-close-button"), this.$dropboxContainerBottom = this.$dropboxContainer.querySelector(".vscomp-dropbox-container-bottom"), this.$dropboxContainerTop = this.$dropboxContainer.querySelector(".vscomp-dropbox-container-top"), this.$search = this.$dropboxContainer.querySelector(".vscomp-search-wrapper"), this.$optionsContainer = this.$dropboxContainer.querySelector(".vscomp-options-container"), this.$optionsList = this.$dropboxContainer.querySelector(".vscomp-options-list"), this.$options = this.$dropboxContainer.querySelector(".vscomp-options"), this.$noOptions = this.$dropboxContainer.querySelector(".vscomp-no-options"), this.$noSearchResults = this.$dropboxContainer.querySelector(".vscomp-no-search-results"), this.afterRenderWrapper() } } }, { key: "renderDropbox", value: function (e) { var t = e.wrapperClasses, i = "self" !== this.dropboxWrapper ? document.querySelector(this.dropboxWrapper) : null, o = "vscomp-dropbox"; this.additionalDropboxClasses && (o += " ".concat(this.additionalDropboxClasses)); var s = "vscomp-dropbox-container"; this.additionalDropboxContainerClasses && (s += " ".concat(this.additionalDropboxContainerClasses)); var n = '<div id="vscomp-dropbox-container-'.concat(this.uniqueId, '" role="listbox" class="').concat(s, '">\n        <div class="vscomp-dropbox-container-top" aria-hidden="true" tabindex="0">&nbsp;</div>\n        <div class="').concat(o, '">\n          <div class="vscomp-search-wrapper"></div>\n\n          <div class="vscomp-options-container">\n            <div class="vscomp-options-loader"></div>\n\n            <div class="vscomp-options-list">\n              <div class="vscomp-options"></div>\n            </div>\n          </div>\n\n          <div class="vscomp-options-bottom-freezer"></div>\n          <div class="vscomp-no-options">').concat(this.noOptionsText, '</div>\n          <div class="vscomp-no-search-results">').concat(this.noSearchResultsText, '</div>\n\n          <span class="vscomp-dropbox-close-button"><i class="vscomp-clear-icon"></i></span>\n        </div>\n        <div class="vscomp-dropbox-container-bottom" aria-hidden="true" tabindex="0">&nbsp;</div>\n      </div>'); if (i) { var r = document.createElement("div"); return this.$dropboxWrapper = r, this.hasDropboxWrapper = !0, r.innerHTML = n, i.appendChild(r), d.addClass(r, "vscomp-dropbox-wrapper ".concat(t)), "" } return this.hasDropboxWrapper = !1, n } }, { key: "renderOptions", value: function () { var e, t = this, i = "", o = this.getVisibleOptions(), s = "", r = "", a = !(!this.markSearchResults || !this.searchValue), l = this.labelRenderer, u = this.disableOptionGroupCheckbox, c = this.uniqueId, p = this.searchGroup, h = "function" == typeof l, d = n.convertToBoolean, v = ""; if (a && (e = new RegExp("(".concat(n.regexEscape(this.searchValue), ")(?!([^<]+)?>)"), "gi")), this.multiple && (s = '<span class="checkbox-icon"></span>'), this.allowNewOption) { var f = this.getTooltipAttrText("New Option"); r = '<span class="vscomp-new-option-icon" '.concat(f, "></span>") } o.forEach((function (o) { var n, f = o.index, y = "vscomp-option", b = t.getTooltipAttrText("", !0, !0), m = s, g = "", O = "", S = "", x = "", w = "-1", k = d(o.isSelected), C = ""; if (o.classNames && (y += " ".concat(o.classNames)), o.isFocused && (w = "0", y += " focused"), o.isDisabled && (y += " disabled", C = 'aria-disabled="true"'), o.isGroupTitle && (v = o.label, y += " group-title", u && (m = "")), k && (y += " selected"), o.isGroupOption) { var E = ""; y += " group-option", S = 'data-group-index="'.concat(o.groupIndex, '"'), o.customData ? (v = void 0 !== o.customData.group_name ? "".concat(o.customData.group_name, ", ") : "", E = void 0 !== o.customData.description ? " ".concat(o.customData.description, ",") : "", x = 'aria-label="'.concat(v, " ").concat(o.label, ", ").concat(E, '"')) : x = 'aria-label="'.concat(v, ", ").concat(o.label, '"') } n = h ? l(o) : o.label, o.description && (O = '<div class="vscomp-option-description" '.concat(b, ">").concat(o.description, "</div>")), o.isCurrentNew ? (y += " current-new", g += r) : !a || o.isGroupTitle && !p || (n = n.replace(e, "<mark>$1</mark>")), i += '<div role="option" aria-selected="'.concat(k, '" id="vscomp-option-').concat(c, "-").concat(f, '"\n          class="').concat(y, '" data-value="').concat(o.value, '" data-index="').concat(f, '" data-visible-index="').concat(o.visibleIndex, '"\n          tabindex=').concat(w, " ").concat(S, " ").concat(C, " ").concat(x, "\n        >\n          ").concat(m, '\n          <span class="vscomp-option-text" ').concat(b, ">\n            ").concat(n, "\n          </span>\n          ").concat(O, "\n          ").concat(g, "\n        </div>") })), v = "", this.$options.innerHTML = i, this.$visibleOptions = this.$options.querySelectorAll(".vscomp-option"), this.afterRenderOptions() } }, { key: "renderSearch", value: function () { if (this.hasSearchContainer) { var e = "", t = ""; this.multiple && !this.disableSelectAll && (e = '<span class="vscomp-toggle-all-button" tabindex="0" aria-label="'.concat(this.selectAllText, '">\n          <span class="checkbox-icon vscomp-toggle-all-checkbox"></span>\n          <span class="vscomp-toggle-all-label">').concat(this.selectAllText, "</span>\n        </span>")), this.hasSearch && (t = '<label for="vscomp-search-input-'.concat(this.uniqueId, '" class="vscomp-search-label"\n        id="vscomp-search-label-').concat(this.uniqueId, '"\n      >\n        ').concat(this.searchFormLabel, '\n      </label>\n      <input type="text" class="vscomp-search-input" placeholder="').concat(this.searchPlaceholderText, '"\n        id="vscomp-search-input-').concat(this.uniqueId, '">\n      <span class="vscomp-search-clear">&times;</span>')); var i = '<div class="vscomp-search-container">\n        '.concat(e, "\n        ").concat(t, "\n      </div>"); this.$search.innerHTML = i, this.$searchInput = this.$dropboxContainer.querySelector(".vscomp-search-input"), this.$searchClear = this.$dropboxContainer.querySelector(".vscomp-search-clear"), this.$toggleAllButton = this.$dropboxContainer.querySelector(".vscomp-toggle-all-button"), this.$toggleAllCheckbox = this.$dropboxContainer.querySelector(".vscomp-toggle-all-checkbox"), this.addEvent(this.$searchInput, "input", "onSearch"), this.addEvent(this.$searchClear, "click", "onSearchClear"), this.addEvent(this.$toggleAllButton, "click", "onToggleAllOptions"), this.addEvent(this.$dropboxContainerBottom, "focus", "onDropboxContainerTopOrBottomFocus"), this.addEvent(this.$dropboxContainerTop, "focus", "onDropboxContainerTopOrBottomFocus") } } }, { key: "addEvents", value: function () { this.addEvent(document, "click", "onDocumentClick"), this.addEvent(this.$allWrappers, "keydown", "onKeyDown"), this.addEvent(this.$toggleButton, "click", "onToggleButtonClick"), this.addEvent(this.$clearButton, "click keydown", "onClearButtonClick"), this.addEvent(this.$dropboxContainer, "click", "onDropboxContainerClick"), this.addEvent(this.$dropboxCloseButton, "click", "onDropboxCloseButtonClick"), this.addEvent(this.$optionsContainer, "scroll", "onOptionsScroll"), this.addEvent(this.$options, "click", "onOptionsClick"), this.addEvent(this.$options, "mouseover", "onOptionsMouseOver"), this.addEvent(this.$options, "touchmove", "onOptionsTouchMove"), this.addMutationObserver() } }, { key: "addEvent", value: function (e, t, i) { var o = this; e && n.removeArrayEmpty(t.split(" ")).forEach((function (t) { var s = "".concat(i, "-").concat(t), n = o.events[s]; n || (n = o[i].bind(o), o.events[s] = n), d.addEvent(e, t, n) })) } }, { key: "removeEvents", value: function () { this.removeEvent(document, "click", "onDocumentClick"), this.removeEvent(this.$allWrappers, "keydown", "onKeyDown"), this.removeEvent(this.$toggleButton, "click", "onToggleButtonClick"), this.removeEvent(this.$clearButton, "click keydown", "onClearButtonClick"), this.removeEvent(this.$dropboxContainer, "click", "onDropboxContainerClick"), this.removeEvent(this.$dropboxCloseButton, "click", "onDropboxCloseButtonClick"), this.removeEvent(this.$optionsContainer, "scroll", "onOptionsScroll"), this.removeEvent(this.$options, "click", "onOptionsClick"), this.removeEvent(this.$options, "mouseover", "onOptionsMouseOver"), this.removeEvent(this.$options, "touchmove", "onOptionsTouchMove"), this.removeMutationObserver() } }, { key: "removeEvent", value: function (e, t, i) { var o = this; e && n.removeArrayEmpty(t.split(" ")).forEach((function (t) { var s = "".concat(i, "-").concat(t), n = o.events[s]; n && d.removeEvent(e, t, n) })) } }, { key: "onDocumentClick", value: function (e) { var t = e.target.closest(".vscomp-wrapper"); t !== this.$wrapper && t !== this.$dropboxWrapper && this.isOpened() && this.closeDropbox() } }, { key: "onKeyDown", value: function (e) { var t = e.which || e.keyCode, i = C[t]; if (document.activeElement !== this.$searchInput || e.shiftKey || 9 !== t || (e.preventDefault(), this.focusFirstVisibleOption()), document.activeElement !== this.$toggleAllButton || 13 !== t) { if (27 === t || "Escape" === e.key) { var o = this.showAsPopup ? this.$wrapper : this.$dropboxWrapper; if ((document.activeElement === o || o.contains(document.activeElement)) && !this.keepAlwaysOpen) return void this.closeDropbox() } i && this[i](e) } else this.toggleAllOptions() } }, { key: "onEnterPress", value: function (e) { e.preventDefault(), this.isOpened() ? this.selectFocusedOption() : !1 === this.$ele.disabled && this.openDropbox() } }, { key: "onDownArrowPress", value: function (e) { e.preventDefault(), this.isOpened() ? this.focusOption({ direction: "next" }) : this.openDropbox() } }, { key: "onUpArrowPress", value: function (e) { e.preventDefault(), this.isOpened() ? this.focusOption({ direction: "previous" }) : this.openDropbox() } }, { key: "onBackspaceOrDeletePress", value: function (e) { e.target === this.$wrapper && (e.preventDefault(), this.selectedValues.length > 0 && this.reset()) } }, { key: "onToggleButtonClick", value: function (e) { var t = e.target; t.closest(".vscomp-value-tag-clear-button") ? this.removeValue(t.closest(".vscomp-value-tag")) : t.closest(".toggle-button-child") || this.toggleDropbox() } }, { key: "onClearButtonClick", value: function (e) { "click" === e.type ? this.reset() : "keydown" !== e.type || "Enter" !== e.code && "Space" !== e.code || (e.stopPropagation(), this.reset()) } }, { key: "onOptionsScroll", value: function () { this.setVisibleOptions() } }, { key: "onOptionsClick", value: function (e) { var t = e.target.closest(".vscomp-option"); t && !d.hasClass(t, "disabled") && (d.hasClass(t, "group-title") ? this.onGroupTitleClick(t) : this.selectOption(t, { event: e })) } }, { key: "onGroupTitleClick", value: function (e) { if (e && this.multiple && !this.disableOptionGroupCheckbox) { var t = !d.hasClass(e, "selected"); this.toggleGroupTitleCheckbox(e, t), this.toggleGroupOptions(e, t) } } }, { key: "onDropboxContainerClick", value: function (e) { e.target.closest(".vscomp-dropbox") || this.closeDropbox() } }, { key: "onDropboxCloseButtonClick", value: function () { this.closeDropbox() } }, { key: "onOptionsMouseOver", value: function (e) { var t = e.target.closest(".vscomp-option"); t && this.isOpened() && (d.hasClass(t, "disabled") || d.hasClass(t, "group-title") ? this.removeOptionFocus() : this.focusOption({ $option: t })) } }, { key: "onOptionsTouchMove", value: function () { this.removeOptionFocus() } }, { key: "onSearch", value: function (e) { e.stopPropagation(), this.setSearchValue(e.target.value, !0) } }, { key: "onSearchClear", value: function () { this.setSearchValue(""), this.focusSearchInput() } }, { key: "onToggleAllOptions", value: function () { this.toggleAllOptions() } }, { key: "onDropboxContainerTopOrBottomFocus", value: function () { this.closeDropbox() } }, { key: "onResize", value: function () { this.setOptionsContainerHeight(!0) } }, { key: "addMutationObserver", value: function () { var e = this; if (this.hasDropboxWrapper) { var t = this.$ele; this.mutationObserver = new MutationObserver((function (i) { var o = !1, s = !1; i.forEach((function (e) { o || (o = g(e.addedNodes).some((function (e) { return !(e !== t && !e.contains(t)) }))), s || (s = g(e.removedNodes).some((function (e) { return !(e !== t && !e.contains(t)) }))) })), s && !o && e.destroy() })), this.mutationObserver.observe(document.querySelector("body"), { childList: !0, subtree: !0 }) } } }, { key: "removeMutationObserver", value: function () { this.mutationObserver.disconnect() } }, { key: "beforeValueSet", value: function (e) { this.toggleAllOptionsClass(!e && void 0) } }, { key: "beforeSelectNewValue", value: function () { var e = this, t = this.getNewOption(), i = t.index; this.newValues.push(t.value), this.setOptionProp(i, "isCurrentNew", !1), this.setOptionProp(i, "isNew", !0), setTimeout((function () { e.setSearchValue(""), e.focusSearchInput() }), 0) } }, { key: "afterRenderWrapper", value: function () { d.addClass(this.$ele, "vscomp-ele"), this.renderSearch(), this.setEleStyles(), this.setDropboxStyles(), this.setOptionsHeight(), this.setVisibleOptions(), this.setOptionsContainerHeight(), this.addEvents(), this.setEleProps(), this.keepAlwaysOpen || this.showAsPopup || this.initDropboxPopover(), this.initialSelectedValue ? this.setValueMethod(this.initialSelectedValue, this.silentInitialValueSet) : this.autoSelectFirstOption && this.visibleOptions.length && this.setValueMethod(this.visibleOptions[0].value, this.silentInitialValueSet), this.showOptionsOnlyOnSearch && this.setSearchValue("", !1, !0), this.initialDisabled && this.disable(), this.autofocus && this.focus() } }, { key: "afterRenderOptions", value: function () { var e = this.getVisibleOptions(), t = !this.options.length && !this.hasServerSearch, i = !t && !e.length; if ((!this.allowNewOption || this.hasServerSearch || this.showOptionsOnlyOnSearch) && (d.toggleClass(this.$allWrappers, "has-no-search-results", i), i ? (d.setAttr(this.$noSearchResults, "tabindex", "0"), d.setAttr(this.$noSearchResults, "aria-hidden", "false")) : (d.setAttr(this.$noSearchResults, "tabindex", "-1"), d.setAttr(this.$noSearchResults, "aria-hidden", "true"))), d.toggleClass(this.$allWrappers, "has-no-options", t), t ? (d.setAttr(this.$noOptions, "tabindex", "0"), d.setAttr(this.$noOptions, "aria-hidden", "false")) : (d.setAttr(this.$noOptions, "tabindex", "-1"), d.setAttr(this.$noOptions, "aria-hidden", "true")), this.setOptionAttr(), this.setOptionsPosition(), this.setOptionsTooltip(), document.activeElement !== this.$searchInput) { var o = d.getElementsBySelector(".focused", this.$dropboxContainer)[0]; void 0 !== o && o.focus() } } }, { key: "afterSetOptionsContainerHeight", value: function (e) { e && this.showAsPopup && this.setVisibleOptions() } }, { key: "afterSetSearchValue", value: function () { var e = this; this.hasServerSearch ? (clearInterval(this.serverSearchTimeout), this.serverSearchTimeout = setTimeout((function () { e.serverSearch() }), this.searchDelay)) : this.setVisibleOptionsCount(), this.selectAllOnlyVisible && this.toggleAllOptionsClass(), this.focusOption({ focusFirst: !0 }) } }, { key: "afterSetVisibleOptionsCount", value: function () { this.scrollToTop(), this.setOptionsHeight(), this.setVisibleOptions(), this.updatePosition() } }, { key: "afterValueSet", value: function () { this.scrollToTop(), this.setSearchValue(""), this.renderOptions() } }, { key: "afterSetOptions", value: function (e) { e && this.setSelectedProp(), this.setOptionsHeight(), this.setVisibleOptions(), this.showOptionsOnlyOnSearch && this.setSearchValue("", !1, !0), e || this.reset() } }, { key: "setProps", value: function (e) { var t = this.setDefaultProps(e); this.setPropsFromElementAttr(t); var i = n.convertToBoolean; this.$ele = t.ele, this.dropboxWrapper = t.dropboxWrapper, this.valueKey = t.valueKey, this.labelKey = t.labelKey, this.descriptionKey = t.descriptionKey, this.aliasKey = t.aliasKey, this.optionHeightText = t.optionHeight, this.optionHeight = parseFloat(this.optionHeightText), this.multiple = i(t.multiple), this.hasSearch = i(t.search), this.searchByStartsWith = i(t.searchByStartsWith), this.searchGroup = i(t.searchGroup), this.hideClearButton = i(t.hideClearButton), this.autoSelectFirstOption = i(t.autoSelectFirstOption), this.hasOptionDescription = i(t.hasOptionDescription), this.silentInitialValueSet = i(t.silentInitialValueSet), this.allowNewOption = i(t.allowNewOption), this.markSearchResults = i(t.markSearchResults), this.showSelectedOptionsFirst = i(t.showSelectedOptionsFirst), this.disableSelectAll = i(t.disableSelectAll), this.keepAlwaysOpen = i(t.keepAlwaysOpen), this.showDropboxAsPopup = i(t.showDropboxAsPopup), this.hideValueTooltipOnSelectAll = i(t.hideValueTooltipOnSelectAll), this.showOptionsOnlyOnSearch = i(t.showOptionsOnlyOnSearch), this.selectAllOnlyVisible = i(t.selectAllOnlyVisible), this.alwaysShowSelectedOptionsCount = i(t.alwaysShowSelectedOptionsCount), this.alwaysShowSelectedOptionsLabel = i(t.alwaysShowSelectedOptionsLabel), this.disableAllOptionsSelectedText = i(t.disableAllOptionsSelectedText), this.showValueAsTags = i(t.showValueAsTags), this.disableOptionGroupCheckbox = i(t.disableOptionGroupCheckbox), this.enableSecureText = i(t.enableSecureText), this.setValueAsArray = i(t.setValueAsArray), this.disableValidation = i(t.disableValidation), this.initialDisabled = i(t.disabled), this.required = i(t.required), this.autofocus = i(t.autofocus), this.useGroupValue = i(t.useGroupValue), this.focusSelectedOptionOnOpen = i(t.focusSelectedOptionOnOpen), this.noOptionsText = t.noOptionsText, this.noSearchResultsText = t.noSearchResultsText, this.selectAllText = t.selectAllText, this.searchNormalize = t.searchNormalize, this.searchPlaceholderText = t.searchPlaceholderText, this.searchFormLabel = t.searchFormLabel, this.optionsSelectedText = t.optionsSelectedText, this.optionSelectedText = t.optionSelectedText, this.allOptionsSelectedText = t.allOptionsSelectedText, this.clearButtonText = t.clearButtonText, this.moreText = t.moreText, this.placeholder = t.placeholder, this.position = t.position, this.textDirection = t.textDirection, this.dropboxWidth = t.dropboxWidth, this.tooltipFontSize = t.tooltipFontSize, this.tooltipAlignment = t.tooltipAlignment, this.tooltipMaxWidth = t.tooltipMaxWidth, this.updatePositionThrottle = t.updatePositionThrottle, this.noOfDisplayValues = parseInt(t.noOfDisplayValues), this.zIndex = parseInt(t.zIndex), this.maxValues = parseInt(t.maxValues), this.minValues = parseInt(t.minValues), this.name = this.secureText(t.name), this.additionalClasses = t.additionalClasses, this.additionalDropboxClasses = t.additionalDropboxClasses, this.additionalDropboxContainerClasses = t.additionalDropboxContainerClasses, this.additionalToggleButtonClasses = t.additionalToggleButtonClasses, this.popupDropboxBreakpoint = t.popupDropboxBreakpoint, this.popupPosition = t.popupPosition, this.onServerSearch = t.onServerSearch, this.labelRenderer = t.labelRenderer, this.selectedLabelRenderer = t.selectedLabelRenderer, this.initialSelectedValue = 0 === t.selectedValue ? "0" : t.selectedValue, this.emptyValue = t.emptyValue, this.ariaLabelledby = t.ariaLabelledby, this.ariaLabelText = t.ariaLabelText, this.ariaLabelClearButtonText = t.ariaLabelClearButtonText, this.maxWidth = t.maxWidth, this.searchDelay = t.searchDelay, this.selectedValues = [], this.selectedOptions = [], this.newValues = [], this.events = {}, this.tooltipEnterDelay = 200, this.searchValue = "", this.searchValueOriginal = "", this.isAllSelected = !1, (void 0 === t.search && this.multiple || this.allowNewOption || this.showOptionsOnlyOnSearch) && (this.hasSearch = !0), this.hasServerSearch = "function" == typeof this.onServerSearch, (this.maxValues || this.hasServerSearch || this.showOptionsOnlyOnSearch) && (this.disableSelectAll = !0, this.disableOptionGroupCheckbox = !0), this.keepAlwaysOpen && (this.dropboxWrapper = "self"), this.showAsPopup = this.showDropboxAsPopup && !this.keepAlwaysOpen && window.innerWidth <= parseFloat(this.popupDropboxBreakpoint), this.hasSearchContainer = this.hasSearch || this.multiple && !this.disableSelectAll, this.optionsCount = this.getOptionsCount(t.optionsCount), this.halfOptionsCount = Math.ceil(this.optionsCount / 2), this.optionsHeight = this.getOptionsHeight(), this.uniqueId = this.getUniqueId() } }, { key: "setDefaultProps", value: function (e) { var t = { dropboxWrapper: "self", valueKey: "value", labelKey: "label", descriptionKey: "description", aliasKey: "alias", ariaLabelText: "Options list", ariaLabelClearButtonText: "Clear button", optionsCount: 5, noOfDisplayValues: 50, optionHeight: "40px", noOptionsText: "No options found", noSearchResultsText: "No results found", selectAllText: "Select All", searchNormalize: !1, searchPlaceholderText: "Search...", searchFormLabel: "Search", clearButtonText: "Clear", moreText: "more...", optionsSelectedText: "options selected", optionSelectedText: "option selected", allOptionsSelectedText: "All", placeholder: "Select", position: "bottom left", zIndex: e.keepAlwaysOpen ? 1 : 2, tooltipFontSize: "14px", tooltipAlignment: "center", tooltipMaxWidth: "300px", updatePositionThrottle: 100, name: "", additionalClasses: "", additionalDropboxClasses: "", additionalDropboxContainerClasses: "", additionalToggleButtonClasses: "", maxValues: 0, showDropboxAsPopup: !0, popupDropboxBreakpoint: "576px", popupPosition: "center", hideValueTooltipOnSelectAll: !0, emptyValue: "", searchDelay: 300, focusSelectedOptionOnOpen: !0 }; return e.hasOptionDescription && (t.optionsCount = 4, t.optionHeight = "50px"), Object.assign(t, e) } }, { key: "setPropsFromElementAttr", value: function (e) { var t = e.ele; Object.keys(k).forEach((function (i) { var o = t.getAttribute(i); -1 === E.indexOf(i) || "" !== o && "true" !== o || (o = !0), o && (e[k[i]] = o) })) } }, { key: "setEleProps", value: function () { var t = this.$ele; t.virtualSelect = this, t.value = this.multiple ? [] : "", t.name = this.name, t.disabled = !1, t.required = this.required, t.autofocus = this.autofocus, t.multiple = this.multiple, t.form = t.closest("form"), t.reset = e.reset, t.setValue = e.setValueMethod, t.setOptions = e.setOptionsMethod, t.setDisabledOptions = e.setDisabledOptionsMethod, t.setEnabledOptions = e.setEnabledOptionsMethod, t.toggleSelectAll = e.toggleSelectAll, t.isAllSelected = e.isAllSelected, t.addOption = e.addOptionMethod, t.getNewValue = e.getNewValueMethod, t.getDisplayValue = e.getDisplayValueMethod, t.getSelectedOptions = e.getSelectedOptionsMethod, t.getDisabledOptions = e.getDisabledOptionsMethod, t.open = e.openMethod, t.close = e.closeMethod, t.focus = e.focusMethod, t.enable = e.enableMethod, t.disable = e.disableMethod, t.destroy = e.destroyMethod, t.validate = e.validateMethod, t.toggleRequired = e.toggleRequiredMethod, this.hasDropboxWrapper && (this.$dropboxWrapper.virtualSelect = this) } }, { key: "setValueMethod", value: function (e, t) { var i = {}, o = {}, s = [], n = this.multiple, r = e; if (r) { if (Array.isArray(r) || (r = [r]), n) { var a = this.maxValues; a && r.length > a && r.splice(a) } else r.length > 1 && (r = [r[0]]); r = r.map((function (e) { return e || 0 === e ? e.toString() : "" })), this.useGroupValue && (r = this.setGroupOptionsValue(r)), r.forEach((function (e, t) { i[e] = !0, o[e] = t })), this.allowNewOption && r && this.setNewOptionsFromValue(r) } if (this.options.forEach((function (e) { !0 !== i[e.value] || e.isDisabled || e.isGroupTitle ? e.isSelected = !1 : (e.isSelected = !0, s.push(e.value)) })), n) this.hasOptionGroup && this.setGroupsSelectedProp(), s.sort((function (e, t) { return o[e] - o[t] })); else { var l = m(s, 1); s = l[0] } this.beforeValueSet(), this.setValue(s, { disableEvent: t }), this.afterValueSet() } }, { key: "setGroupOptionsValue", value: function (e) { var t = [], i = {}, o = {}; return e.forEach((function (e) { o[e] = !0 })), this.options.forEach((function (e) { var s = e.value, n = !0 === o[s]; e.isGroupTitle ? n && (i[e.index] = !0) : (n || i[e.groupIndex]) && t.push(s) })), t } }, { key: "setGroupsSelectedProp", value: function () { var e = this.isAllGroupOptionsSelected.bind(this); this.options.forEach((function (t) { t.isGroupTitle && (t.isSelected = e(t.index)) })) } }, { key: "setOptionsMethod", value: function (e, t) { this.setOptions(e), this.afterSetOptions(t) } }, { key: "setDisabledOptionsMethod", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.setDisabledOptions(e, !0), t || (this.setValueMethod(null), this.toggleAllOptionsClass()), this.setVisibleOptions() } }, { key: "setDisabledOptions", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = []; if (e) if (!0 === e) t && this.options.forEach((function (e) { return e.isDisabled = !0, i.push(e.value), e })); else { i = e.map((function (e) { return e.toString() })); var o = {}; i.forEach((function (e) { o[e] = !0 })), t && this.options.forEach((function (e) { return e.isDisabled = !0 === o[e.value], e })) } else t && this.options.forEach((function (e) { return e.isDisabled = !1, e })); this.disabledOptions = i } }, { key: "setEnabledOptionsMethod", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.setEnabledOptions(e), t || (this.setValueMethod(null), this.toggleAllOptionsClass()), this.setVisibleOptions() } }, { key: "setEnabledOptions", value: function (e) { if (void 0 !== e) { var t = []; if (!0 === e) this.options.forEach((function (e) { return e.isDisabled = !1, e })); else { var i = {}; e.forEach((function (e) { i[e] = !0 })), this.options.forEach((function (e) { var o = !0 !== i[e.value]; return e.isDisabled = o, o && t.push(e.value), e })) } this.disabledOptions = t } } }, { key: "setOptions", value: function () { var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], i = [], o = this.disabledOptions.length, s = this.valueKey, r = this.labelKey, a = this.descriptionKey, l = this.aliasKey, u = this.hasOptionDescription, c = n.getString, p = n.convertToBoolean, h = this.secureText.bind(this), d = this.getAlias.bind(this), v = 0, f = !1, m = {}, g = !1; this.disabledOptions.forEach((function (e) { m[e] = !0 })); var O = function (t) { "object" !== b(t) && (t = y(y({}, s, t), r, t)); var S = h(c(t[s])), x = h(c(t[r])), w = t.options, k = !!w, C = { index: v, value: S, label: x, labelNormalized: e.searchNormalize ? n.normalizeString(x).toLowerCase() : x.toLowerCase(), alias: d(t[l]), isVisible: p(t.isVisible, !0), isNew: t.isNew || !1, isGroupTitle: k, classNames: t.classNames }; if (g || "" !== S || (g = !0), o && (C.isDisabled = !0 === m[S]), t.isGroupOption && (C.isGroupOption = !0, C.groupIndex = t.groupIndex), u && (C.description = h(c(t[a]))), t.customData && (C.customData = t.customData), i.push(C), v += 1, k) { var E = C.index; f = !0, w.forEach((function (e) { e.isGroupOption = !0, e.groupIndex = E, O(e) })) } }; Array.isArray(t) && t.forEach(O); var S = i.length, x = this.$ele; x.options = i, x.length = S, this.options = i, this.visibleOptionsCount = S, this.lastOptionIndex = S - 1, this.newValues = [], this.hasOptionGroup = f, this.hasEmptyValueOption = g, this.setSortedOptions() } }, { key: "setServerOptions", value: function () { var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []; this.setOptionsMethod(t, !0); var i = this.selectedOptions, o = this.options, s = !1; if (i.length) { var n = {}; s = !0, o.forEach((function (e) { n[e.value] = !0 })), i.forEach((function (e) { !0 !== n[e.value] && (e.isVisible = !1, o.push(e)) })), this.setOptionsMethod(o, !0) } this.allowNewOption && this.searchValue && (o.some((function (t) { return t.label.toLowerCase() === e.searchValue })) || (s = !0, this.setNewOption())), s ? (this.setVisibleOptionsCount(), this.multiple && this.toggleAllOptionsClass(), this.setValueText()) : this.updatePosition(), this.setVisibleOptionsCount(), d.removeClass(this.$allWrappers, "server-searching") } }, { key: "setSelectedOptions", value: function () { this.selectedOptions = this.options.filter((function (e) { return e.isSelected })) } }, { key: "setSortedOptions", value: function () { var e = g(this.options); this.showSelectedOptionsFirst && this.selectedValues.length && (e = this.hasOptionGroup ? this.sortOptionsGroup(e) : this.sortOptions(e)), this.sortedOptions = e } }, { key: "setVisibleOptions", value: function () { var e = g(this.sortedOptions), t = 2 * this.optionsCount, i = this.getVisibleStartIndex(), o = this.getNewOption(), s = i + t - 1, n = 0; o && (o.visibleIndex = n, n += 1), e = e.filter((function (e) { var t = !1; return e.isVisible && !e.isCurrentNew && (t = n >= i && n <= s, e.visibleIndex = n, n += 1), t })), o && (e = [o].concat(g(e))), this.visibleOptions = e, this.visibleOptionsCount = e.length, this.renderOptions() } }, { key: "setOptionsPosition", value: function (e) { var t = parseInt((e || this.getVisibleStartIndex()) * this.optionHeight); this.$options.style.transform = "translate3d(0, ".concat(t, "px, 0)"), d.setData(this.$options, "top", t) } }, { key: "setOptionsTooltip", value: function () { var e = this, t = this.getVisibleOptions(), i = this.hasOptionDescription; t.forEach((function (t) { var o = e.$dropboxContainer.querySelector('.vscomp-option[data-index="'.concat(t.index, '"]')); d.setData(o.querySelector(".vscomp-option-text"), "tooltip", t.label), i && d.setData(o.querySelector(".vscomp-option-description"), "tooltip", t.description) })) } }, { key: "setValue", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i = t.disableEvent, o = void 0 !== i && i, s = t.disableValidation, r = void 0 !== s && s; this.hasEmptyValueOption && "" === e || e ? Array.isArray(e) ? this.selectedValues = g(e) : this.selectedValues = [e] : this.selectedValues = []; var a = this.getValue(); this.$ele.value = a, this.$hiddenInput.value = this.getInputValue(a), this.isMaxValuesSelected = !!(this.maxValues && this.maxValues <= this.selectedValues.length), this.toggleAllOptionsClass(), this.setValueText(), d.toggleClass(this.$allWrappers, "has-value", n.isNotEmpty(this.selectedValues)), d.toggleClass(this.$allWrappers, "max-value-selected", this.isMaxValuesSelected), r || this.validate(), o || d.dispatchEvent(this.$ele, "change", !0) } }, { key: "setValueText", value: function () { var e = this, t = this.multiple, i = this.selectedValues, o = this.noOfDisplayValues, s = this.showValueAsTags, r = this.$valueText, a = this.selectedLabelRenderer, l = [], u = [], c = i.length, p = 0, h = this.isAllSelected && !this.hasServerSearch && !this.disableAllOptionsSelectedText && !s; if (h && this.hideValueTooltipOnSelectAll) r.innerHTML = "".concat(this.allOptionsSelectedText, " (").concat(c, ")"); else { this.getSelectedOptions({ fullDetails: !0, keepSelectionOrder: !0 }).some((function (t) { if (t.isCurrentNew) return !1; if (p >= o) return !0; var i = t.label; if ("function" == typeof a && (i = a(t)), l.push(i), p += 1, s) { var c = n.willTextOverflow(r.parentElement, i) ? e.getTooltipAttrText(i, !1, !0) : "", h = '<span class="vscomp-value-tag" data-index="'.concat(t.index, '" ').concat(c, '>\n                  <span class="vscomp-value-tag-content">').concat(i, '</span>\n                  <span class="vscomp-value-tag-clear-button">\n                    <i class="vscomp-clear-icon"></i>\n                  </span>\n                </span>'); u.push(h) } else u.push(i); return !1 })); var v = c - o; v > 0 && u.push('<span class="vscomp-value-tag more-value-count">+ '.concat(v, " ").concat(this.moreText, "</span>")); var f = l.join(", "); if ("" === f) r.innerHTML = this.placeholder; else if (r.innerHTML = f, t) { var y = this.maxValues; if (this.alwaysShowSelectedOptionsCount || d.hasEllipsis(r) || y || s) { var b = '<span class="vscomp-selected-value-count">'.concat(c, "</span>"); if (y && (b += ' / <span class="vscomp-max-value-count">'.concat(y, "</span>")), h) r.innerHTML = "".concat(this.allOptionsSelectedText, " (").concat(c, ")"); else if (s) r.innerHTML = u.join(""), this.$valueTags = r.querySelectorAll(".vscomp-value-tag"), this.setValueTagAttr(); else if (!this.alwaysShowSelectedOptionsLabel) { var m = 1 === c ? this.optionSelectedText : this.optionsSelectedText; r.innerHTML = "".concat(b, " ").concat(m) } } else u = [] } } var g = ""; 0 === c ? g = this.placeholder : s || (g = u.join(", ")), s || d.setData(r, "tooltip", g), t && (s ? this.updatePosition() : d.setData(r, "tooltipEllipsisOnly", 0 === c)) } }, { key: "setSearchValue", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; if (e !== this.searchValueOriginal || i) { t || (this.$searchInput.value = e); var o = e.replace(/\\/g, "").toLowerCase().trim(); this.searchValue = o, this.searchValueOriginal = e, d.toggleClass(this.$allWrappers, "has-search-value", e), this.afterSetSearchValue() } } }, { key: "setVisibleOptionsCount", value: function () { var e, t = 0, i = !1, o = this.searchGroup, s = this.showOptionsOnlyOnSearch, r = this.searchByStartsWith, a = this.searchValue; a = this.searchNormalize ? n.normalizeString(a) : a; var l = this.isOptionVisible.bind(this); this.hasOptionGroup && (e = this.getVisibleOptionGroupsMapping(a)), this.options.forEach((function (n) { var u; n.isCurrentNew || (s && !a ? (n.isVisible = !1, u = { isVisible: !1, hasExactOption: !1 }) : u = l({ data: n, searchValue: a, hasExactOption: i, visibleOptionGroupsMapping: e, searchGroup: o, searchByStartsWith: r }), u.isVisible && (t += 1), i || (i = u.hasExactOption)) })), this.allowNewOption && (a && !i ? (this.setNewOption(), t += 1) : this.removeNewOption()), this.visibleOptionsCount = t, this.afterSetVisibleOptionsCount() } }, { key: "setOptionProp", value: function (e, t, i) { this.options[e] && (this.options[e][t] = i) } }, { key: "setOptionsHeight", value: function () { this.$optionsList.style.height = "".concat(this.optionHeight * this.visibleOptionsCount, "px") } }, { key: "setOptionsContainerHeight", value: function (e) { var t; e ? this.showAsPopup && (this.optionsCount = this.getOptionsCount(), this.halfOptionsCount = Math.ceil(this.optionsCount / 2), t = this.getOptionsHeight(), this.optionsHeight = t) : (t = this.optionsHeight, this.keepAlwaysOpen && (d.setStyle(this.$noOptions, "height", t), d.setStyle(this.$noSearchResults, "height", t))), d.setStyle(this.$optionsContainer, "max-height", t), this.afterSetOptionsContainerHeight(e) } }, { key: "setNewOption", value: function (e) { var t = e || this.searchValueOriginal.trim(); if (t) { var i = this.getNewOption(); if (i) { var o = i.index; this.setOptionProp(o, "value", this.secureText(t)), this.setOptionProp(o, "label", this.secureText(t)) } else { var s = { value: t, label: t }; e ? (s.isNew = !0, this.newValues.push(t)) : s.isCurrentNew = !0, this.addOption(s) } } } }, { key: "setSelectedProp", value: function () { var e = {}; this.selectedValues.forEach((function (t) { e[t] = !0 })), this.options.forEach((function (t) { !0 === e[t.value] && (t.isSelected = !0) })) } }, { key: "setNewOptionsFromValue", value: function (e) { if (e) { var t = this.setNewOption.bind(this), i = {}; this.options.forEach((function (e) { i[e.value] = !0 })), e.forEach((function (e) { e && !0 !== i[e] && t(e) })) } } }, { key: "setDropboxWrapperWidth", value: function () { if (!this.showAsPopup) { var e = this.dropboxWidth || "".concat(this.$wrapper.offsetWidth, "px"); d.setStyle(this.$dropboxContainer, "max-width", e) } } }, { key: "setEleStyles", value: function () { var e = this.maxWidth, t = {}; e && (t["max-width"] = e), d.setStyles(this.$ele, t) } }, { key: "setDropboxStyles", value: function () { var e = this.dropboxWidth, t = {}, i = { "z-index": this.zIndex }; e && (this.showAsPopup ? t["max-width"] = e : i.width = e), d.setStyles(this.$dropboxContainer, i), d.setStyles(this.$dropbox, t) } }, { key: "setOptionAttr", value: function () { var e = this.$visibleOptions, t = this.options, i = "".concat(this.optionHeight, "px"), o = d.setStyle, s = d.getData, n = d.setData; e && e.length && e.forEach((function (e) { var r = t[s(e, "index")]; o(e, "height", i), n(e, "value", r.value) })) } }, { key: "setValueTagAttr", value: function () { var e = this.$valueTags; if (e && e.length) { var t = d.getData, i = d.setData, o = this.options; e.forEach((function (e) { var s = t(e, "index"); if (void 0 !== s) { var n = o[s]; i(e, "value", n.value) } })) } } }, { key: "setScrollTop", value: function () { var e = this.selectedValues; if (!this.showSelectedOptionsFirst && this.focusSelectedOptionOnOpen && 0 !== e.length) { var t, i = {}; e.forEach((function (e) { i[e] = !0 })), this.options.some((function (e) { return !!i[e.value] && (t = e.visibleIndex, !0) })), t && (this.$optionsContainer.scrollTop = this.optionHeight * t) } } }, { key: "getVisibleOptions", value: function () { return this.visibleOptions || [] } }, { key: "getValue", value: function () { return this.multiple ? this.useGroupValue ? this.getGroupValue() : this.selectedValues : this.selectedValues[0] || "" } }, { key: "getGroupValue", value: function () { var e = [], t = {}; return this.options.forEach((function (i) { if (i.isSelected) { var o = i.value; i.isGroupTitle ? o && (t[i.index] = !0, e.push(o)) : !0 !== t[i.groupIndex] && e.push(o) } })), e } }, { key: "getInputValue", value: function (e) { var t = e; return t && t.length ? this.setValueAsArray && this.multiple && (t = JSON.stringify(t)) : t = this.emptyValue, t } }, { key: "getFirstVisibleOptionIndex", value: function () { return Math.ceil(this.$optionsContainer.scrollTop / this.optionHeight) } }, { key: "getVisibleStartIndex", value: function () { var e = this.getFirstVisibleOptionIndex() - this.halfOptionsCount; return e < 0 && (e = 0), e } }, { key: "getTooltipAttrText", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = { "data-tooltip": (n.containsHTML(e) ? n.replaceDoubleQuotesWithHTML(e) : e) || "", "data-tooltip-enter-delay": this.tooltipEnterDelay, "data-tooltip-z-index": this.zIndex, "data-tooltip-font-size": this.tooltipFontSize, "data-tooltip-alignment": this.tooltipAlignment, "data-tooltip-max-width": this.tooltipMaxWidth, "data-tooltip-ellipsis-only": t, "data-tooltip-allow-html": i }; return d.getAttributesText(o) } }, { key: "getOptionObj", value: function (e) { if (e) { var t = n.getString, i = this.secureText.bind(this); return { index: e.index, value: i(t(e.value)), label: i(t(e.label)), description: i(t(e.description)), alias: this.getAlias(e.alias), isCurrentNew: e.isCurrentNew || !1, isNew: e.isNew || !1, isVisible: !0 } } } }, { key: "getNewOption", value: function () { var e = this.options[this.lastOptionIndex]; if (e && e.isCurrentNew) return e } }, { key: "getOptionIndex", value: function (e) { var t; return this.options.some((function (i) { return i.value === e && (t = i.index, !0) })), t } }, { key: "getNewValue", value: function () { var e = {}; this.newValues.forEach((function (t) { e[t] = !0 })); var t = this.selectedValues.filter((function (t) { return !0 === e[t] })); return this.multiple ? t : t[0] } }, { key: "getAlias", value: function (e) { var t = e; return t && (t = (t = Array.isArray(t) ? t.join(",") : t.toString().trim()).toLowerCase()), t || "" } }, { key: "getDisplayValue", value: function () { var e = []; return this.options.forEach((function (t) { t.isSelected && e.push(t.label) })), this.multiple ? e : e[0] || "" } }, { key: "getSelectedOptions", value: function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = e.fullDetails, i = void 0 !== t && t, o = e.keepSelectionOrder, s = void 0 !== o && o, n = this.valueKey, r = this.labelKey, a = this.selectedValues, l = []; if (this.options.forEach((function (e) { if (e.isSelected && !e.isGroupTitle) if (i) l.push(e); else { var t = y(y({}, n, e.value), r, e.label); e.isNew && (t.isNew = !0), e.customData && (t.customData = e.customData), l.push(t) } })), s) { var u = {}; a.forEach((function (e, t) { u[e] = t })), l.sort((function (e, t) { return u[e.value] - u[t.value] })) } return this.multiple || i ? l : l[0] } }, { key: "getDisabledOptions", value: function () { var e = this.valueKey, t = this.labelKey, i = this.disabledOptions, o = {}, s = []; return i.forEach((function (e) { o[e] = !0 })), this.options.forEach((function (i) { var n = i.value, r = i.label; o[n] && s.push(y(y({}, e, n), t, r)) })), s } }, { key: "getVisibleOptionGroupsMapping", value: function (e) { var t = this.options, i = {}, o = this.isOptionVisible.bind(this); return (t = this.structureOptionGroup(t)).forEach((function (t) { i[t.index] = t.options.some((function (t) { return o({ data: t, searchValue: e }).isVisible })) })), i } }, { key: "getOptionsCount", value: function (e) { var t; if (this.showAsPopup) { var i = 80 * window.innerHeight / 100 - 48; this.hasSearchContainer && (i -= 40), t = Math.floor(i / this.optionHeight) } else t = parseInt(e); return t } }, { key: "getOptionsHeight", value: function () { return "".concat(this.optionsCount * this.optionHeight, "px") } }, { key: "getSibling", value: function (e, t) { var i = "next" === t ? "nextElementSibling" : "previousElementSibling", o = e; do { o && (o = o[i]) } while (d.hasClass(o, "disabled") || d.hasClass(o, "group-title")); return o } }, { key: "getUniqueId", value: function () { var e = n.getRandomInt(1e4); return document.querySelector("#vscomp-ele-wrapper-".concat(e)) ? this.getUniqueId() : e } }, { key: "initDropboxPopover", value: function () { var e = { ele: this.$ele, target: this.$dropboxContainer, position: this.position, zIndex: this.zIndex, margin: 4, transitionDistance: 30, hideArrowIcon: !0, disableManualAction: !0, disableUpdatePosition: !this.hasDropboxWrapper, updatePositionThrottle: this.updatePositionThrottle, afterShow: this.afterShowPopper.bind(this), afterHide: this.afterHidePopper.bind(this) }; this.dropboxPopover = new PopoverComponent(e) } }, { key: "openDropbox", value: function (e) { this.isSilentOpen = e, e ? d.setStyle(this.$dropboxContainer, "display", "inline-flex") : (d.dispatchEvent(this.$ele, "beforeOpen"), d.setAria(this.$wrapper, "expanded", !0)), this.setDropboxWrapperWidth(), d.removeClass(this.$allWrappers, "closed"), d.changeTabIndex(this.$allWrappers, 0), this.dropboxPopover && !e ? this.dropboxPopover.show() : this.afterShowPopper() } }, { key: "afterShowPopper", value: function () { var e = this.isSilentOpen; this.isSilentOpen = !1, e || (this.moveSelectedOptionsFirst(), this.setScrollTop(), d.addClass(this.$allWrappers, "focused"), this.showAsPopup ? (d.addClass(this.$body, "vscomp-popup-active"), this.isPopupActive = !0) : this.focusElementOnOpen(), d.dispatchEvent(this.$ele, "afterOpen")) } }, { key: "closeDropbox", value: function (e) { this.isSilentClose = e, !1 !== this.isOpened() && (this.keepAlwaysOpen ? this.removeOptionFocus() : (e ? d.setStyle(this.$dropboxContainer, "display", "") : (d.dispatchEvent(this.$ele, "beforeClose"), d.setAria(this.$wrapper, "expanded", !1), d.setAria(this.$wrapper, "activedescendant", "")), this.dropboxPopover && !e ? this.dropboxPopover.hide() : this.afterHidePopper())) } }, { key: "afterHidePopper", value: function () { var e = this.isSilentClose; this.isSilentClose = !1, d.removeClass(this.$allWrappers, "focused"), this.removeOptionFocus(), !e && this.isPopupActive && (d.removeClass(this.$body, "vscomp-popup-active"), this.isPopupActive = !1), d.addClass(this.$allWrappers, "closed"), e || d.dispatchEvent(this.$ele, "afterClose"), this.$wrapper.focus() } }, { key: "moveSelectedOptionsFirst", value: function () { this.showSelectedOptionsFirst && (this.setSortedOptions(), this.$optionsContainer.scrollTop && this.selectedValues.length ? this.scrollToTop() : this.setVisibleOptions()) } }, { key: "toggleDropbox", value: function () { this.isOpened() ? this.closeDropbox() : this.openDropbox() } }, { key: "updatePosition", value: function () { this.dropboxPopover && this.isOpened() && this.$ele.updatePosition() } }, { key: "isOpened", value: function () { return !d.hasClass(this.$wrapper, "closed") } }, { key: "focusSearchInput", value: function () { var e = this.$searchInput; e && e.focus() } }, { key: "focusElementOnOpen", value: function () { var e = this.$searchInput, t = !this.options.length && !this.hasServerSearch; if (e) t && !this.allowNewOption ? (d.setAttr(e, "disabled", ""), this.$noOptions.focus()) : (e.removeAttribute("disabled"), e.focus()); else { var i = this.$dropbox.querySelector('[tabindex="0"]'); void 0 !== d.getData(i, "index") ? this.focusOption({ direction: "next" }) : i ? i.focus() : this.focusFirstVisibleOption() } } }, { key: "focusFirstVisibleOption", value: function () { var e = this.$optionsContainer.querySelector("[data-index='".concat(this.getFirstVisibleOptionIndex(), "']")); e ? (d.hasClass(e, "group-title") && (e = this.getSibling(e, "next")), d.setAttr(e, "tabindex", "0"), this.$optionsContainer.scrollTop = this.optionHeight * this.getFirstVisibleOptionIndex(), this.focusOption({ focusFirst: !0 }), e.focus()) : (e = this.$dropbox.querySelector('[tabindex="0"]')) && e.focus() } }, { key: "focusOption", value: function () { var e, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, i = t.direction, o = t.$option, s = t.focusFirst, n = this.$dropboxContainer.querySelector(".vscomp-option.focused"); if (o) e = o; else if (!n || s) { var r = this.getFirstVisibleOptionIndex(); e = this.$dropboxContainer.querySelector('.vscomp-option[data-visible-index="'.concat(r, '"]')), (d.hasClass(e, "disabled") || d.hasClass(e, "group-title")) && (e = this.getSibling(e, "next")) } else e = this.getSibling(n, i); e && e !== n && (n && this.toggleOptionFocusedState(n, !1), this.toggleOptionFocusedState(e, !0), this.toggleFocusedProp(d.getData(e, "index"), !0), this.moveFocusedOptionToView(e)) } }, { key: "moveFocusedOptionToView", value: function (e) { var t = e || this.$dropboxContainer.querySelector(".vscomp-option.focused"); if (t) { var i, o = this.$optionsContainer.getBoundingClientRect(), s = t.getBoundingClientRect(), n = o.top, r = o.bottom, a = o.height, l = s.top, u = s.bottom, c = s.height, p = t.offsetTop, h = d.getData(this.$options, "top", "number"); n > l ? i = p + h : r < u && (i = p - a + c + h), void 0 !== i && (this.$optionsContainer.scrollTop = i) } } }, { key: "removeOptionFocus", value: function () { var e = this.$dropboxContainer.querySelector(".vscomp-option.focused"); e && (this.toggleOptionFocusedState(e, !1), this.toggleFocusedProp(null)) } }, { key: "selectOption", value: function (e) { var t = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).event; if (e) { var i = !d.hasClass(e, "selected"); if (i) { if (this.multiple && this.isMaxValuesSelected) return } else if (!this.multiple) return void this.closeDropbox(); var o = this.selectedValues, s = d.getData(e, "value"), r = d.getData(e, "index", "number"), a = d.hasClass(e, "current-new"), l = !1, u = this.lastSelectedOptionIndex; if (this.lastSelectedOptionIndex = null, this.toggleSelectedProp(r, i), i) { if (this.multiple) o.push(s), this.toggleAllOptionsClass(), this.toggleGroupOptionsParent(e), t && t.shiftKey && (l = !0); else { o.length && this.toggleSelectedProp(this.getOptionIndex(o[0]), !1), o = [s]; var c = this.$dropboxContainer.querySelector(".vscomp-option.selected"); c && this.toggleOptionSelectedState(c, !1), this.closeDropbox(), a || this.setSearchValue("") } this.lastSelectedOptionIndex = r, this.toggleOptionSelectedState(e) } else this.multiple && (this.toggleOptionSelectedState(e), n.removeItemFromArray(o, s), this.toggleAllOptionsClass(!1), this.toggleGroupOptionsParent(e, !1)); a && this.beforeSelectNewValue(), this.setValue(o), l && this.selectRangeOptions(u, r) } } }, { key: "selectFocusedOption", value: function () { this.selectOption(this.$dropboxContainer.querySelector(".vscomp-option.focused")) } }, { key: "selectRangeOptions", value: function (e, t) { var i = this; if ("number" == typeof e && !this.maxValues) { var o, s, n = this.selectedValues, r = this.hasOptionGroup, a = {}; if (e < t ? (o = e, s = t) : (o = t, s = e), this.options.forEach((function (e) { if (!e.isDisabled && !e.isGroupTitle && e.isVisible && !e.isSelected) { var t = e.index; if (t > o && t < s) { if (r) { var i = e.groupIndex; "number" == typeof i && (a[i] = !0) } e.isSelected = !0, n.push(e.value) } } })), this.toggleAllOptionsClass(), this.setValue(n), (a = Object.keys(a)).length) { var l = this.toggleGroupTitleProp.bind(this); a.forEach((function (e) { l(parseInt(e)) })) } setTimeout((function () { i.renderOptions() }), 0) } } }, { key: "toggleAllOptions", value: function (e) { if (this.multiple && !this.disableSelectAll) { var t = "boolean" == typeof isSelected ? e : !d.hasClass(this.$toggleAllCheckbox, "checked"), i = [], o = this.selectAllOnlyVisible; this.options.forEach((function (e) { var s = e; if (!s.isDisabled && !s.isCurrentNew) { var n = s.isVisible, r = s.isSelected; !t && (!o || n || !r) || t && o && !n && !r ? s.isSelected = !1 : (s.isSelected = !0, s.isGroupTitle || i.push(s.value)) } })), this.toggleAllOptionsClass(t), this.setValue(i), this.renderOptions() } } }, { key: "toggleAllOptionsClass", value: function (e) { if (this.multiple) { var t = !1; "boolean" == typeof e || (e = this.isAllOptionsSelected()), !e && this.selectAllOnlyVisible && "" !== this.searchValue && (this.visibleOptionsCount > 0 || "" === this.searchValue) && (t = this.isAllOptionsSelected(!0)), d.toggleClass(this.$toggleAllCheckbox, "checked", e || t), this.isAllSelected = e } } }, { key: "isAllOptionsSelected", value: function (e) { var t = !1; return this.options.length && this.selectedValues.length && (t = !this.options.some((function (t) { return !t.isSelected && !t.isDisabled && !t.isGroupTitle && (!e || t.isVisible) }))), t } }, { key: "isAllGroupOptionsSelected", value: function (e) { var t = !1; return this.options.length && (t = !this.options.some((function (t) { return !t.isSelected && !t.isDisabled && !t.isGroupTitle && t.groupIndex === e }))), t } }, { key: "toggleGroupOptionsParent", value: function (e, t) { if (this.hasOptionGroup && !this.disableOptionGroupCheckbox && e) { var i = d.getData(e, "groupIndex"); void 0 !== i && (i = parseInt(i)); var o = this.$options.querySelector('.vscomp-option[data-index="'.concat(i, '"]')), s = "boolean" == typeof t ? t : this.isAllGroupOptionsSelected(i); this.toggleGroupTitleCheckbox(o, s), this.toggleGroupTitleProp(i, s) } } }, { key: "toggleGroupTitleProp", value: function (e, t) { var i = "boolean" == typeof t ? t : this.isAllGroupOptionsSelected(e); this.toggleSelectedProp(e, i) } }, { key: "toggleGroupOptions", value: function (e, t) { var i = this; if (this.hasOptionGroup && !this.disableOptionGroupCheckbox && e) { var o = d.getData(e, "index", "number"), s = this.selectedValues, r = this.selectAllOnlyVisible, a = {}, l = n.removeItemFromArray; s.forEach((function (e) { a[e] = !0 })), this.options.forEach((function (e) { if (!e.isDisabled && e.groupIndex === o) { var i = e.value; !t || r && !e.isVisible ? (e.isSelected = !1, a[i] && l(s, i)) : (e.isSelected = !0, a[i] || s.push(i)) } })), this.toggleAllOptionsClass(!!t && null), this.setValue(s), setTimeout((function () { i.renderOptions() }), 0) } } }, { key: "toggleGroupTitleCheckbox", value: function (e, t) { if (e) { var i = d.getData(e, "index", "number"); this.toggleSelectedProp(i, t), this.toggleOptionSelectedState(e, t) } } }, { key: "toggleFocusedProp", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.focusedOptionIndex && this.setOptionProp(this.focusedOptionIndex, "isFocused", !1), this.setOptionProp(e, "isFocused", t), this.focusedOptionIndex = e } }, { key: "toggleSelectedProp", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.setOptionProp(e, "isSelected", t) } }, { key: "scrollToTop", value: function () { this.$optionsContainer.scrollTop > 0 && (this.$optionsContainer.scrollTop = 0) } }, { key: "reset", value: function () { var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.options.forEach((function (e) { e.isSelected = !1 })), this.beforeValueSet(!0), this.setValue(null, { disableEvent: t, disableValidation: e }), this.afterValueSet(), e && d.removeClass(this.$allWrappers, "has-error"), d.dispatchEvent(this.$ele, "reset") } }, { key: "addOption", value: function (e, t) { if (e) { this.lastOptionIndex += 1; var i = this.getOptionObj(f(f({}, e), {}, { index: this.lastOptionIndex })); this.options.push(i), this.sortedOptions.push(i), t && (this.visibleOptionsCount += 1, this.afterSetOptions()) } } }, { key: "removeOption", value: function (e) { (e || 0 === e) && (this.options.splice(e, 1), this.lastOptionIndex -= 1) } }, { key: "removeNewOption", value: function () { var e = this.getNewOption(); e && this.removeOption(e.index) } }, { key: "sortOptions", value: function (e) { return e.sort((function (e, t) { var i = e.isSelected || e.isAnySelected, o = t.isSelected || t.isAnySelected; return i || o ? i && (!o || e.index < t.index) ? -1 : 1 : 0 })) } }, { key: "sortOptionsGroup", value: function (e) { var t = this.sortOptions.bind(this), i = this.structureOptionGroup(e); return i.forEach((function (e) { var i = e.options; e.isAnySelected = i.some((function (e) { return e.isSelected })), e.isAnySelected && t(i) })), t(i), this.destructureOptionGroup(i) } }, { key: "isOptionVisible", value: function (e) { var t = e.data, i = e.searchValue, o = e.hasExactOption, s = e.visibleOptionGroupsMapping, n = e.searchGroup, r = e.searchByStartsWith, a = t.value.toLowerCase(), l = this.searchNormalize ? t.labelNormalized : t.label.toLowerCase(), u = t.description, c = t.alias, p = r ? l.startsWith(i) : l.includes(i); return !t.isGroupTitle || n && p || (p = s[t.index]), r || !c || p || (p = c.includes(i)), r || !u || p || (p = u.toLowerCase().includes(i)), t.isVisible = p, o || (o = l === i || a === i), { isVisible: p, hasExactOption: o } } }, { key: "structureOptionGroup", value: function (e) { var t = [], i = {}; return e.forEach((function (e) { if (e.isGroupTitle) { var o = []; e.options = o, i[e.index] = o, t.push(e) } })), e.forEach((function (e) { e.isGroupOption && i[e.groupIndex].push(e) })), t } }, { key: "destructureOptionGroup", value: function (e) { var t = []; return e.forEach((function (e) { t.push(e), t = t.concat(e.options) })), t } }, { key: "serverSearch", value: function () { d.removeClass(this.$allWrappers, "has-no-search-results"), d.addClass(this.$allWrappers, "server-searching"), this.setSelectedOptions(), this.onServerSearch(this.searchValue, this) } }, { key: "removeValue", value: function (e) { var t = this.selectedValues, i = d.getData(e, "value"); n.removeItemFromArray(t, i), this.setValueMethod(t) } }, { key: "focus", value: function () { this.$wrapper.focus() } }, { key: "enable", value: function () { this.$ele.disabled = !1, this.$ele.removeAttribute("disabled"), this.$hiddenInput.removeAttribute("disabled"), d.setAria(this.$wrapper, "disabled", !1), d.changeTabIndex(this.$wrapper, 0) } }, { key: "disable", value: function () { this.$ele.disabled = !0, this.$ele.setAttribute("disabled", ""), this.$hiddenInput.setAttribute("disabled", ""), d.setAria(this.$wrapper, "disabled", !0), d.changeTabIndex(this.$wrapper, -1), this.$wrapper.blur() } }, { key: "validate", value: function () { if (this.disableValidation) return !0; var e = !1, t = this.selectedValues, i = this.minValues; return this.required && (n.isEmpty(t) || this.multiple && i && t.length < i) && (e = !0), d.toggleClass(this.$allWrappers, "has-error", e), !e } }, { key: "destroy", value: function () { var e = this.$ele; e.virtualSelect = void 0, e.value = void 0, e.innerHTML = "", this.hasDropboxWrapper && (this.$dropboxWrapper.remove(), this.removeEvents()), this.dropboxPopover && this.dropboxPopover.destroy(), d.removeClass(e, "vscomp-ele") } }, { key: "createSecureTextElements", value: function () { this.$secureDiv = document.createElement("div"), this.$secureText = document.createTextNode(""), this.$secureDiv.appendChild(this.$secureText) } }, { key: "secureText", value: function (e) { return e && this.enableSecureText ? (this.$secureText.nodeValue = n.replaceDoubleQuotesWithHTML(e), this.$secureDiv.innerHTML) : e } }, { key: "toggleRequired", value: function (e) { this.required = n.convertToBoolean(e), this.$ele.required = this.required } }, { key: "toggleOptionSelectedState", value: function (e, t) { var i = t; void 0 === i && (i = !d.hasClass(e, "selected")), d.toggleClass(e, "selected", i), d.setAria(e, "selected", i) } }, { key: "toggleOptionFocusedState", value: function (e, t) { e && (d.toggleClass(e, "focused", t), d.setAttr(e, "tabindex", t ? "0" : "-1"), document.activeElement !== this.$searchInput && e.focus(), t && d.setAria(this.$wrapper, "activedescendant", e.id)) } }], o = [{ key: "init", value: function (t) { var i = t.ele; if (i) { var o = !1; if ("string" == typeof i) { var s = (i = document.querySelectorAll(i)).length; if (0 === s) return; 1 === s && (o = !0) } void 0 !== i.length && void 0 !== i.forEach || (i = [i], o = !0); var n = []; return i.forEach((function (i) { i.virtualSelect ? n.push(i.virtualSelect) : (t.ele = i, "SELECT" === i.tagName && e.setPropsFromSelect(t), n.push(new e(t))) })), o ? n[0] : n } } }, { key: "getAttrProps", value: function () { var e = d.convertPropToDataAttr, t = {}; return $.forEach((function (e) { t[e] = e })), A.forEach((function (i) { t[e(i)] = i })), t } }, { key: "setPropsFromSelect", value: function (e) { var t = e.ele, i = [], o = [], s = function (e) { var t = []; return Array.from(e.children).forEach((function (e) { var n = e.value, r = { value: n }; "OPTGROUP" === e.tagName ? (r.label = e.getAttribute("label"), r.options = s(e)) : r.label = e.innerHTML, t.push(r), e.disabled && i.push(n), e.selected && o.push(n) })), t }, n = s(t), r = document.createElement("div"); d.setAttrFromEle(t, r, Object.keys(k), E), t.parentNode.insertBefore(r, t), t.remove(), e.ele = r, e.options = n, e.disabledOptions = i, e.selectedValue = o } }, { key: "onFormReset", value: function (e) { var t = e.target.closest("form"); t && t.querySelectorAll(".vscomp-ele-wrapper").forEach((function (e) { e.parentElement.virtualSelect.reset(!0) })) } }, { key: "onFormSubmit", value: function (t) { e.validate(t.target.closest("form")) || t.preventDefault() } }, { key: "validate", value: function (e) { if (!e) return !0; var t = !1; return e.querySelectorAll(".vscomp-ele-wrapper").forEach((function (e) { var i = e.parentElement.virtualSelect.validate(); t || i || (t = !0) })), !t } }, { key: "reset", value: function () { var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.virtualSelect.reset(e, t) } }, { key: "setValueMethod", value: function () { var e; (e = this.virtualSelect).setValueMethod.apply(e, arguments) } }, { key: "setOptionsMethod", value: function () { var e; (e = this.virtualSelect).setOptionsMethod.apply(e, arguments) } }, { key: "setDisabledOptionsMethod", value: function () { var e; (e = this.virtualSelect).setDisabledOptionsMethod.apply(e, arguments) } }, { key: "setEnabledOptionsMethod", value: function () { var e; (e = this.virtualSelect).setEnabledOptionsMethod.apply(e, arguments) } }, { key: "toggleSelectAll", value: function (e) { this.virtualSelect.toggleAllOptions(e) } }, { key: "isAllSelected", value: function () { return this.virtualSelect.isAllSelected } }, { key: "addOptionMethod", value: function (e) { this.virtualSelect.addOption(e, !0) } }, { key: "getNewValueMethod", value: function () { return this.virtualSelect.getNewValue() } }, { key: "getDisplayValueMethod", value: function () { return this.virtualSelect.getDisplayValue() } }, { key: "getSelectedOptionsMethod", value: function (e) { return this.virtualSelect.getSelectedOptions(e) } }, { key: "getDisabledOptionsMethod", value: function () { return this.virtualSelect.getDisabledOptions() } }, { key: "openMethod", value: function () { return this.virtualSelect.openDropbox() } }, { key: "closeMethod", value: function () { return this.virtualSelect.closeDropbox() } }, { key: "focusMethod", value: function () { return this.virtualSelect.focus() } }, { key: "enableMethod", value: function () { return this.virtualSelect.enable() } }, { key: "disableMethod", value: function () { return this.virtualSelect.disable() } }, { key: "destroyMethod", value: function () { return this.virtualSelect.destroy() } }, { key: "validateMethod", value: function () { return this.virtualSelect.validate() } }, { key: "toggleRequiredMethod", value: function (e) { return this.virtualSelect.toggleRequired(e) } }, { key: "onResizeMethod", value: function () { document.querySelectorAll(".vscomp-ele-wrapper").forEach((function (e) { e.parentElement.virtualSelect.onResize() })) } }], i && x(t.prototype, i), o && x(t, o), Object.defineProperty(t, "prototype", { writable: !1 }), t; var t, i, o }(); document.addEventListener("reset", T.onFormReset), document.addEventListener("submit", T.onFormSubmit), window.addEventListener("resize", T.onResizeMethod), k = T.getAttrProps(), window.VirtualSelect = T, "undefined" != typeof NodeList && NodeList.prototype && !NodeList.prototype.forEach && (NodeList.prototype.forEach = Array.prototype.forEach) }(), function () { "use strict"; function e(e) { return function (e) { if (Array.isArray(e)) return t(e) }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || function (e, i) { if (e) { if ("string" == typeof e) return t(e, i); var o = Object.prototype.toString.call(e).slice(8, -1); return "Object" === o && e.constructor && (o = e.constructor.name), "Map" === o || "Set" === o ? Array.from(e) : "Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o) ? t(e, i) : void 0 } }(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function t(e, t) { (null == t || t > e.length) && (t = e.length); for (var i = 0, o = new Array(t); i < t; i++)o[i] = e[i]; return o } var i = function () { function t() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, t) } var i; return i = [{ key: "addClass", value: function (i, o) { i && (o = o.split(" "), t.getElements(i).forEach((function (t) { var i; (i = t.classList).add.apply(i, e(o)) }))) } }, { key: "removeClass", value: function (i, o) { i && (o = o.split(" "), t.getElements(i).forEach((function (t) { var i; (i = t.classList).remove.apply(i, e(o)) }))) } }, { key: "getElements", value: function (e) { if (e) return void 0 === e.forEach && (e = [e]), e } }, { key: "getMoreVisibleSides", value: function (e) { if (!e) return {}; var t = e.getBoundingClientRect(), i = window.innerWidth, o = window.innerHeight, s = t.left, n = t.top; return { horizontal: s > i - s - t.width ? "left" : "right", vertical: n > o - n - t.height ? "top" : "bottom" } } }, { key: "getAbsoluteCoords", value: function (e) { if (e) { var t = e.getBoundingClientRect(), i = window.pageXOffset, o = window.pageYOffset; return { width: t.width, height: t.height, top: t.top + o, right: t.right + i, bottom: t.bottom + o, left: t.left + i } } } }, { key: "getCoords", value: function (e) { return e ? e.getBoundingClientRect() : {} } }, { key: "getData", value: function (e, t, i) { if (e) { var o = e ? e.dataset[t] : ""; return "number" === i ? o = parseFloat(o) || 0 : "true" === o ? o = !0 : "false" === o && (o = !1), o } } }, { key: "setData", value: function (e, t, i) { e && (e.dataset[t] = i) } }, { key: "setStyle", value: function (e, t, i) { e && (e.style[t] = i) } }, { key: "show", value: function (e) { var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "block"; t.setStyle(e, "display", i) } }, { key: "hide", value: function (e) { t.setStyle(e, "display", "none") } }, { key: "getHideableParent", value: function (e) { for (var t, i = e.parentElement; i;) { var o = getComputedStyle(i).overflow; if (-1 !== o.indexOf("scroll") || -1 !== o.indexOf("auto")) { t = i; break } i = i.parentElement } return t } }], i && function (e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o) } }(t, i), t }(), o = ["top", "bottom", "left", "right"].map((function (e) { return "position-".concat(e) })), s = { top: "rotate(180deg)", left: "rotate(90deg)", right: "rotate(-90deg)" }, n = function () { function e(t) { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e); try { this.setProps(t), this.init() } catch (e) { console.warn("Couldn't initiate popper"), console.error(e) } } var t; return t = [{ key: "init", value: function () { var e = this.$popperEle; e && this.$triggerEle && (i.setStyle(e, "zIndex", this.zIndex), this.setPosition()) } }, { key: "setProps", value: function (e) { var t = (e = this.setDefaultProps(e)).position ? e.position.toLowerCase() : "auto"; if (this.$popperEle = e.$popperEle, this.$triggerEle = e.$triggerEle, this.$arrowEle = e.$arrowEle, this.margin = parseFloat(e.margin), this.offset = parseFloat(e.offset), this.enterDelay = parseFloat(e.enterDelay), this.exitDelay = parseFloat(e.exitDelay), this.showDuration = parseFloat(e.showDuration), this.hideDuration = parseFloat(e.hideDuration), this.transitionDistance = parseFloat(e.transitionDistance), this.zIndex = parseFloat(e.zIndex), this.afterShowCallback = e.afterShow, this.afterHideCallback = e.afterHide, this.hasArrow = !!this.$arrowEle, -1 !== t.indexOf(" ")) { var i = t.split(" "); this.position = i[0], this.secondaryPosition = i[1] } else this.position = t } }, { key: "setDefaultProps", value: function (e) { return Object.assign({ position: "auto", margin: 8, offset: 5, enterDelay: 0, exitDelay: 0, showDuration: 300, hideDuration: 200, transitionDistance: 10, zIndex: 1 }, e) } }, { key: "setPosition", value: function () { i.show(this.$popperEle, "inline-flex"); var e, t, n, r = window.innerWidth, a = window.innerHeight, l = i.getAbsoluteCoords(this.$popperEle), u = i.getAbsoluteCoords(this.$triggerEle), c = l.width, p = l.height, h = l.top, d = l.right, v = l.bottom, f = l.left, y = u.width, b = u.height, m = u.top, g = u.right, O = u.bottom, S = u.left, x = m - h, w = S - f, k = w, C = x, E = this.position, $ = this.secondaryPosition, A = y / 2 - c / 2, T = b / 2 - p / 2, D = this.margin, V = this.transitionDistance, P = window.scrollY - h, I = a + P, M = window.scrollX - f, F = r + M, L = this.offset; L && (P += L, I -= L, M += L, F -= L), "auto" === E && (E = i.getMoreVisibleSides(this.$triggerEle).vertical); var H = { top: { top: C - p - D, left: k + A }, bottom: { top: C + b + D, left: k + A }, right: { top: C + T, left: k + y + D }, left: { top: C + T, left: k - c - D } }, G = H[E]; if (C = G.top, k = G.left, $ && ("top" === $ ? C = x : "bottom" === $ ? C = x + b - p : "left" === $ ? k = w : "right" === $ && (k = w + y - c)), k < M ? "left" === E ? n = "right" : k = M + f > g ? g - f : M : k + c > F && ("right" === E ? n = "left" : k = F + f < S ? S - d : F - c), C < P ? "top" === E ? n = "bottom" : C = P + h > O ? O - h : P : C + p > I && ("bottom" === E ? n = "top" : C = I + h < m ? m - v : I - p), n) { var N = H[n]; "top" === (E = n) || "bottom" === E ? C = N.top : "left" !== E && "right" !== E || (k = N.left) } "top" === E ? (e = C + V, t = k) : "right" === E ? (e = C, t = k - V) : "left" === E ? (e = C, t = k + V) : (e = C - V, t = k); var W = "translate3d(".concat(parseInt(t), "px, ").concat(parseInt(e), "px, 0)"); if (i.setStyle(this.$popperEle, "transform", W), i.setData(this.$popperEle, "fromLeft", t), i.setData(this.$popperEle, "fromTop", e), i.setData(this.$popperEle, "top", C), i.setData(this.$popperEle, "left", k), i.removeClass(this.$popperEle, o.join(" ")), i.addClass(this.$popperEle, "position-".concat(E)), this.hasArrow) { var B = 0, j = 0, q = k + f, R = C + h, z = this.$arrowEle.offsetWidth / 2, K = s[E] || ""; "top" === E || "bottom" === E ? (B = y / 2 + S - q) < z ? B = z : B > c - z && (B = c - z) : "left" !== E && "right" !== E || ((j = b / 2 + m - R) < z ? j = z : j > p - z && (j = p - z)), i.setStyle(this.$arrowEle, "transform", "translate3d(".concat(parseInt(B), "px, ").concat(parseInt(j), "px, 0) ").concat(K)) } i.hide(this.$popperEle) } }, { key: "resetPosition", value: function () { i.setStyle(this.$popperEle, "transform", "none"), this.setPosition() } }, { key: "show", value: function () { var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, o = t.resetPosition, s = t.data; clearTimeout(this.exitDelayTimeout), clearTimeout(this.hideDurationTimeout), o && this.resetPosition(), this.enterDelayTimeout = setTimeout((function () { var t = i.getData(e.$popperEle, "left"), o = i.getData(e.$popperEle, "top"), n = "translate3d(".concat(parseInt(t), "px, ").concat(parseInt(o), "px, 0)"), r = e.showDuration; i.show(e.$popperEle, "inline-flex"), i.getCoords(e.$popperEle), i.setStyle(e.$popperEle, "transitionDuration", r + "ms"), i.setStyle(e.$popperEle, "transform", n), i.setStyle(e.$popperEle, "opacity", 1), e.showDurationTimeout = setTimeout((function () { "function" == typeof e.afterShowCallback && e.afterShowCallback(s) }), r) }), this.enterDelay) } }, { key: "hide", value: function () { var e = this, t = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).data; clearTimeout(this.enterDelayTimeout), clearTimeout(this.showDurationTimeout), this.exitDelayTimeout = setTimeout((function () { if (e.$popperEle) { var o = parseInt(i.getData(e.$popperEle, "fromLeft")), s = parseInt(i.getData(e.$popperEle, "fromTop")), n = "translate3d(".concat(o, "px, ").concat(s, "px, 0)"), r = e.hideDuration; i.setStyle(e.$popperEle, "transitionDuration", r + "ms"), i.setStyle(e.$popperEle, "transform", n), i.setStyle(e.$popperEle, "opacity", 0), e.hideDurationTimeout = setTimeout((function () { i.hide(e.$popperEle), "function" == typeof e.afterHideCallback && e.afterHideCallback(t) }), r) } }), this.exitDelay) } }, { key: "updatePosition", value: function () { i.setStyle(this.$popperEle, "transitionDuration", "0ms"), this.resetPosition(); var e = parseInt(i.getData(this.$popperEle, "left")), t = parseInt(i.getData(this.$popperEle, "top")); i.show(this.$popperEle, "inline-flex"), i.setStyle(this.$popperEle, "transform", "translate3d(".concat(e, "px, ").concat(t, "px, 0)")) } }], t && function (e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o) } }(e.prototype, t), e }(); window.PopperComponent = n }(), function () { "use strict"; function e(t) { return (e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e })(t) } function t(e, t) { for (var o = 0; o < t.length; o++) { var s = t[o]; s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(e, i(s.key), s) } } function i(t) { var i = function (t, i) { if ("object" != e(t) || !t) return t; var o = t[Symbol.toPrimitive]; if (void 0 !== o) { var s = o.call(t, "string"); if ("object" != e(s)) return s; throw new TypeError("@@toPrimitive must return a primitive value.") } return String(t) }(t); return "symbol" == e(i) ? i : i + "" } var o = function () { return e = function e() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e) }, i = [{ key: "convertToBoolean", value: function (e) { return !0 === e || "true" === e || !1 !== e && "false" !== e && arguments.length > 1 && void 0 !== arguments[1] && arguments[1] } }, { key: "removeArrayEmpty", value: function (e) { return Array.isArray(e) && e.length ? e.filter((function (e) { return !!e })) : [] } }, { key: "throttle", value: function (e, t) { var i, o = 0; return function () { for (var s = arguments.length, n = new Array(s), r = 0; r < s; r++)n[r] = arguments[r]; var a = (new Date).getTime(), l = t - (a - o); clearTimeout(i), l <= 0 ? (o = a, e.apply(void 0, n)) : i = setTimeout((function () { e.apply(void 0, n) }), l) } } }], i && t(e, i), Object.defineProperty(e, "prototype", { writable: !1 }), e; var e, i }(); function s(e) { return s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, s(e) } function n(e) { return function (e) { if (Array.isArray(e)) return r(e) }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || function (e, t) { if (e) { if ("string" == typeof e) return r(e, t); var i = Object.prototype.toString.call(e).slice(8, -1); return "Object" === i && e.constructor && (i = e.constructor.name), "Map" === i || "Set" === i ? Array.from(e) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? r(e, t) : void 0 } }(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function r(e, t) { (null == t || t > e.length) && (t = e.length); for (var i = 0, o = new Array(t); i < t; i++)o[i] = e[i]; return o } function a(e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, l(o.key), o) } } function l(e) { var t = function (e, t) { if ("object" != s(e) || !e) return e; var i = e[Symbol.toPrimitive]; if (void 0 !== i) { var o = i.call(e, "string"); if ("object" != s(o)) return o; throw new TypeError("@@toPrimitive must return a primitive value.") } return String(e) }(e); return "symbol" == s(t) ? t : t + "" } var u = function () { function e() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e) } return t = e, i = [{ key: "addClass", value: function (t, i) { t && (i = i.split(" "), e.getElements(t).forEach((function (e) { var t; (t = e.classList).add.apply(t, n(i)) }))) } }, { key: "removeClass", value: function (t, i) { t && (i = i.split(" "), e.getElements(t).forEach((function (e) { var t; (t = e.classList).remove.apply(t, n(i)) }))) } }, { key: "hasClass", value: function (e, t) { return !!e && e.classList.contains(t) } }, { key: "getElement", value: function (e) { return e && ("string" == typeof e ? e = document.querySelector(e) : void 0 !== e.length && (e = e[0])), e || null } }, { key: "getElements", value: function (e) { if (e) return void 0 === e.forEach && (e = [e]), e } }, { key: "addEvent", value: function (t, i, o) { e.addOrRemoveEvent(t, i, o, "add") } }, { key: "removeEvent", value: function (t, i, o) { e.addOrRemoveEvent(t, i, o, "remove") } }, { key: "addOrRemoveEvent", value: function (t, i, s, n) { t && (i = o.removeArrayEmpty(i.split(" "))).forEach((function (i) { (t = e.getElements(t)).forEach((function (e) { "add" === n ? e.addEventListener(i, s) : e.removeEventListener(i, s) })) })) } }, { key: "getScrollableParents", value: function (e) { if (!e) return []; for (var t = [window], i = e.parentElement; i;) { var o = getComputedStyle(i).overflow; -1 === o.indexOf("scroll") && -1 === o.indexOf("auto") || t.push(i), i = i.parentElement } return t } }, { key: "convertPropToDataAttr", value: function (e) { return e ? "data-popover-".concat(e).replace(/([A-Z])/g, "-$1").toLowerCase() : "" } }], i && a(t, i), Object.defineProperty(t, "prototype", { writable: !1 }), t; var t, i }(); function c(e) { return c = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, c(e) } function p(e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, h(o.key), o) } } function h(e) { var t = function (e, t) { if ("object" != c(e) || !e) return e; var i = e[Symbol.toPrimitive]; if (void 0 !== i) { var o = i.call(e, "string"); if ("object" != c(o)) return o; throw new TypeError("@@toPrimitive must return a primitive value.") } return String(e) }(e); return "symbol" == c(t) ? t : t + "" } var d, v = { 27: "onEscPress" }, f = ["target", "position", "margin", "offset", "enterDelay", "exitDelay", "showDuration", "hideDuration", "transitionDistance", "updatePositionThrottle", "zIndex", "hideOnOuterClick", "showOnHover", "hideArrowIcon", "disableManualAction", "disableUpdatePosition"], y = function () { function e(t) { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e); try { this.setProps(t), this.init() } catch (e) { console.warn("Couldn't initiate Popover component"), console.error(e) } } return t = e, s = [{ key: "init", value: function (t) { var i = t.ele; if (i) { var o = !1; if ("string" == typeof i) { if (!(i = document.querySelectorAll(i))) return; 1 === i.length && (o = !0) } void 0 === i.length && (i = [i], o = !0); var s = []; return i.forEach((function (i) { t.ele = i, e.destroy(i), s.push(new e(t)) })), o ? s[0] : s } } }, { key: "destroy", value: function (e) { if (e) { var t = e.popComp; t && t.destroy() } } }, { key: "showMethod", value: function () { this.popComp.show() } }, { key: "hideMethod", value: function () { this.popComp.hide() } }, { key: "updatePositionMethod", value: function () { this.popComp.popper.updatePosition() } }, { key: "getAttrProps", value: function () { var e = u.convertPropToDataAttr, t = {}; return f.forEach((function (i) { t[e(i)] = i })), t } }], (i = [{ key: "init", value: function () { this.$popover && (this.setElementProps(), this.renderArrow(), this.initPopper(), this.addEvents()) } }, { key: "getEvents", value: function () { var e = [{ $ele: document, event: "click", method: "onDocumentClick" }, { $ele: document, event: "keydown", method: "onDocumentKeyDown" }]; return this.disableManualAction || (e.push({ $ele: this.$ele, event: "click", method: "onTriggerEleClick" }), this.showOnHover && (e.push({ $ele: this.$ele, event: "mouseenter", method: "onTriggerEleMouseEnter" }), e.push({ $ele: this.$ele, event: "mouseleave", method: "onTriggerEleMouseLeave" }))), e } }, { key: "addOrRemoveEvents", value: function (e) { var t = this; this.getEvents().forEach((function (i) { t.addOrRemoveEvent({ action: e, $ele: i.$ele, events: i.event, method: i.method }) })) } }, { key: "addEvents", value: function () { this.addOrRemoveEvents("add") } }, { key: "removeEvents", value: function () { this.addOrRemoveEvents("remove"), this.removeScrollEventListeners(), this.removeResizeEventListeners() } }, { key: "addOrRemoveEvent", value: function (e) { var t = this, i = e.action, s = e.$ele, n = e.events, r = e.method, a = e.throttle; s && (n = o.removeArrayEmpty(n.split(" "))).forEach((function (e) { var n = "".concat(r, "-").concat(e), l = t.events[n]; l || (l = t[r].bind(t), a && (l = o.throttle(l, a)), t.events[n] = l), "add" === i ? u.addEvent(s, e, l) : u.removeEvent(s, e, l) })) } }, { key: "addScrollEventListeners", value: function () { this.$scrollableElems = u.getScrollableParents(this.$ele), this.addOrRemoveEvent({ action: "add", $ele: this.$scrollableElems, events: "scroll", method: "onAnyParentScroll", throttle: this.updatePositionThrottle }) } }, { key: "removeScrollEventListeners", value: function () { this.$scrollableElems && (this.addOrRemoveEvent({ action: "remove", $ele: this.$scrollableElems, events: "scroll", method: "onAnyParentScroll" }), this.$scrollableElems = null) } }, { key: "addResizeEventListeners", value: function () { this.addOrRemoveEvent({ action: "add", $ele: window, events: "resize", method: "onResize", throttle: this.updatePositionThrottle }) } }, { key: "removeResizeEventListeners", value: function () { this.addOrRemoveEvent({ action: "remove", $ele: window, events: "resize", method: "onResize" }) } }, { key: "onAnyParentScroll", value: function () { this.popper.updatePosition() } }, { key: "onResize", value: function () { this.popper.updatePosition() } }, { key: "onDocumentClick", value: function (e) { var t = e.target, i = t.closest(".pop-comp-ele"), o = t.closest(".pop-comp-wrapper"); this.hideOnOuterClick && i !== this.$ele && o !== this.$popover && this.hide() } }, { key: "onDocumentKeyDown", value: function (e) { var t = e.which || e.keyCode, i = v[t]; i && this[i](e) } }, { key: "onEscPress", value: function () { this.hideOnOuterClick && this.hide() } }, { key: "onTriggerEleClick", value: function () { this.toggle() } }, { key: "onTriggerEleMouseEnter", value: function () { this.show() } }, { key: "onTriggerEleMouseLeave", value: function () { this.hide() } }, { key: "setProps", value: function (e) { e = this.setDefaultProps(e), this.setPropsFromElementAttr(e); var t = o.convertToBoolean; this.$ele = e.ele, this.target = e.target, this.position = e.position, this.margin = parseFloat(e.margin), this.offset = parseFloat(e.offset), this.enterDelay = parseFloat(e.enterDelay), this.exitDelay = parseFloat(e.exitDelay), this.showDuration = parseFloat(e.showDuration), this.hideDuration = parseFloat(e.hideDuration), this.transitionDistance = parseFloat(e.transitionDistance), this.updatePositionThrottle = parseFloat(e.updatePositionThrottle), this.zIndex = parseFloat(e.zIndex), this.hideOnOuterClick = t(e.hideOnOuterClick), this.showOnHover = t(e.showOnHover), this.hideArrowIcon = t(e.hideArrowIcon), this.disableManualAction = t(e.disableManualAction), this.disableUpdatePosition = t(e.disableUpdatePosition), this.beforeShowCallback = e.beforeShow, this.afterShowCallback = e.afterShow, this.beforeHideCallback = e.beforeHide, this.afterHideCallback = e.afterHide, this.events = {}, this.$popover = u.getElement(this.target) } }, { key: "setDefaultProps", value: function (e) { return Object.assign({ position: "auto", margin: 8, offset: 5, enterDelay: 0, exitDelay: 0, showDuration: 300, hideDuration: 200, transitionDistance: 10, updatePositionThrottle: 100, zIndex: 1, hideOnOuterClick: !0, showOnHover: !1, hideArrowIcon: !1, disableManualAction: !1, disableUpdatePosition: !1 }, e) } }, { key: "setPropsFromElementAttr", value: function (e) { var t = e.ele; for (var i in d) { var o = t.getAttribute(i); o && (e[d[i]] = o) } } }, { key: "setElementProps", value: function () { var t = this.$ele; t.popComp = this, t.show = e.showMethod, t.hide = e.hideMethod, t.updatePosition = e.updatePositionMethod, u.addClass(this.$ele, "pop-comp-ele"), u.addClass(this.$popover, "pop-comp-wrapper") } }, { key: "getOtherTriggerPopComp", value: function () { var e, t = this.$popover.popComp; return t && t.$ele !== this.$ele && (e = t), e } }, { key: "initPopper", value: function () { var e = { $popperEle: this.$popover, $triggerEle: this.$ele, $arrowEle: this.$arrowEle, position: this.position, margin: this.margin, offset: this.offset, enterDelay: this.enterDelay, exitDelay: this.exitDelay, showDuration: this.showDuration, hideDuration: this.hideDuration, transitionDistance: this.transitionDistance, zIndex: this.zIndex, afterShow: this.afterShow.bind(this), afterHide: this.afterHide.bind(this) }; this.popper = new PopperComponent(e) } }, { key: "beforeShow", value: function () { "function" == typeof this.beforeShowCallback && this.beforeShowCallback(this) } }, { key: "beforeHide", value: function () { "function" == typeof this.beforeHideCallback && this.beforeHideCallback(this) } }, { key: "show", value: function () { this.isShown() || (this.isShownForOtherTrigger() ? this.showAfterOtherHide() : (u.addClass(this.$popover, "pop-comp-disable-events"), this.$popover.popComp = this, this.beforeShow(), this.popper.show({ resetPosition: !0 }), u.addClass(this.$ele, "pop-comp-active"))) } }, { key: "hide", value: function () { this.isShown() && (this.beforeHide(), this.popper.hide(), this.removeScrollEventListeners(), this.removeResizeEventListeners()) } }, { key: "toggle", value: function (e) { void 0 === e && (e = !this.isShown()), e ? this.show() : this.hide() } }, { key: "isShown", value: function () { return u.hasClass(this.$ele, "pop-comp-active") } }, { key: "isShownForOtherTrigger", value: function () { var e = this.getOtherTriggerPopComp(); return !!e && e.isShown() } }, { key: "showAfterOtherHide", value: function () { var e = this, t = this.getOtherTriggerPopComp(); if (t) { var i = t.exitDelay + t.hideDuration + 100; setTimeout((function () { e.show() }), i) } } }, { key: "afterShow", value: function () { var e = this; this.showOnHover ? setTimeout((function () { u.removeClass(e.$popover, "pop-comp-disable-events") }), 2e3) : u.removeClass(this.$popover, "pop-comp-disable-events"), this.disableUpdatePosition || (this.addScrollEventListeners(), this.addResizeEventListeners()), "function" == typeof this.afterShowCallback && this.afterShowCallback(this) } }, { key: "afterHide", value: function () { u.removeClass(this.$ele, "pop-comp-active"), "function" == typeof this.afterHideCallback && this.afterHideCallback(this) } }, { key: "renderArrow", value: function () { if (!this.hideArrowIcon) { var e = this.$popover.querySelector(".pop-comp-arrow"); e || (this.$popover.insertAdjacentHTML("afterbegin", '<i class="pop-comp-arrow"></i>'), e = this.$popover.querySelector(".pop-comp-arrow")), this.$arrowEle = e } } }, { key: "destroy", value: function () { this.removeEvents() } }]) && p(t.prototype, i), s && p(t, s), Object.defineProperty(t, "prototype", { writable: !1 }), t; var t, i, s }(); d = y.getAttrProps(), window.PopoverComponent = y }();
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

</body>

</html>