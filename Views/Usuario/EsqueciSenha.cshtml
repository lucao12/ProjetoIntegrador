<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Esqueci Senha</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        .bg-white {
            background-color: #f6ead4 !important;
        }

        body {
            font-family: 'Segoe UI', sans-serif;
            background-color: #f6ead4;
            margin: 0;
            overflow: hidden; /* Impede a barra de rolagem */
        }

        .fundo-img {
            max-width: 90%;
            max-height: 90%;
        }
       

        .bg-image {
            background: url('https://images.unsplash.com/photo-1555396273-367ea8b74c76?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D') no-repeat center center fixed; /* Substitua pela imagem desejada */
            background-size: cover;
            color: white;
        }

        .logo-container-left {
            padding-left: 20%;
            max-width: 80%;
            text-align: center;
        }

        .tagline {
            color: #426841 !important;
            font-size: 1.8rem;
            font-weight: 500;
        }

        .login-card {
            background: rgba(255, 255, 255, 0.9);
            padding: 60px;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            max-width: 450px;
            width: 90%; /* Adapta-se a telas menores */
        }

        .logo-container-right {
            text-align: center;
            margin-bottom: 30px;
        }

        h2 {
            font-weight: 700;
            margin-bottom: 35px;
            color: #426841;
            text-align: center;
            font-size: 2.5rem;
        }

        .form-label {
            font-size: 1.1rem;
            color: #333;
            margin-bottom: 10px;
            display: block;
            text-align: left;
        }

        .form-control {
            border-radius: 8px;
            border: 1px solid #ddd;
            padding: 16px;
            margin-bottom: 30px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            border-color: #007bff;
            outline: none;
            box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);
        }

        .input-group {
            margin-bottom: 30px;
        }

        .input-group-text {
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 0 8px 8px 0;
            cursor: pointer;
            padding: 16px 18px;
            color: #555;
        }

        .btn-primary {
            background-color: #426841;
            border: none;
            border-radius: 8px;
            padding: 18px 30px;
            font-weight: 600;
            font-size: 1.2rem;
            letter-spacing: 0.5px;
            transition: background-color 0.3s ease, transform 0.2s ease-in-out;
        }

        .btn-primary:hover {
                background-color: #426841;
            transform: scale(1.02);
        }

        .btn-primary:active {
            transform: scale(0.98);
        }

        .btn-outline-primary {
            color: #007bff;
            border-color: #007bff;
            border-radius: 8px;
            padding: 18px 30px;
            font-weight: 600;
            margin-top: 25px;
            transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
        }

        .btn-outline-primary:hover {
            background-color: #007bff;
            border-color: #007bff;
            color: #fff;
        }

        .btn-dark-mode {
            position: fixed;
            top: 30px;
            right: 30px;
            background-color: #444;
            color: white;
            border: none;
            padding: 14px 20px;
            border-radius: 50%;
            cursor: pointer;
            z-index: 1000; /* Garante que fique acima de tudo */
            transition: background-color 0.3s ease;
        }

        .btn-dark-mode:hover {
            background-color: #666;
        }


        .dark-mode .bg-image {
            opacity: 0.8; /* Suaviza a imagem de fundo no modo escuro */
        }

        .dark-mode .login-card {
            background: rgba(30, 30, 30, 0.9);
            color: #eee;
            box-shadow: 0 12px 50px rgba(0, 0, 0, 0.8);
        }

        .dark-mode h2 {
                color: #426841;
        }

        .dark-mode .form-label {
            color: #ccc;
        }

        .dark-mode .form-control {
            background-color: #333;
            color: #eee;
            border-color: #555;
        }

        .dark-mode .form-control:focus {
            border-color: #66b3ff;
            box-shadow: 0 0 8px rgba(102, 179, 255, 0.5);
        }

        .dark-mode .input-group-text {
            background-color: #333;
            color: #eee;
            border-color: #555;
        }

        .dark-mode .btn-primary {
                background-color: #426841;
        }

        .dark-mode .btn-primary:hover {
                    background-color: #426841;
        }

        .dark-mode .btn-outline-primary {
            color: #ccc;
            border-color: #555;
        }

        .dark-mode .btn-outline-primary:hover {
            background-color: #555;
            border-color: #555;
            color: #eee;
        }

        #error-message {
            display: none;
            margin-top: 25px;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
        }
    </style>
</head>

<body>
    <div class="container-fluid vh-100">
        <div class="row h-100">
            <div class="col-md-6 bg-image d-flex align-items-center justify-content-center">
                <div class="logo-container-left">
                    <img src="~/fundo.png" alt="Logo Nutria" class="img-fluid fundo-img" >
                    <h1 class="text-white mt-4 text-center tagline">Redefina sua senha!</h1>
                </div>
            </div>

            <div class="col-md-6 d-flex align-items-center justify-content-center bg-white">
                <div class="login-card text-center">
                    <div class="logo-container-right mb-4">
                        <img src="~/nutria.png" alt="Logo iFood" class="img-fluid" style="max-width: 150px;">
                    </div>
                    <h2 class="mb-3">Esqueci Senha</h2>
                    <form id="authForm">
                        <div class="mb-3">
                            <label for="email" class="form-label">Email:</label>
                            <input type="email" class="form-control" id="email" name="email"
                                placeholder="Digite seu e-mail" required>
                        </div>

                        <div class="mb-3" id="codigoContainer" style="display: none;">
                            <label for="codigo" class="form-label">Código:</label>
                            <input type="text" class="form-control" id="codigo" name="codigo"
                                placeholder="Digite seu código">
                        </div>

                        <div class="mb-3" id="passwordContainer" style="display: none;">
                            <label for="password" class="form-label">Nova Senha:</label>
                            <div class="input-group">
                                <input type="password" class="form-control" id="password" name="password"
                                    placeholder="Digite sua nova senha" required>
                                <span id="btnVeja" class="input-group-text">
                                    <i id="togglePassword" class="fas fa-eye"></i>
                                </span>
                            </div>
                            <div id="password-requirements" class="mt-2">
                                <p id="length" class="invalid">No mínimo 8 caracteres</p>
                                <p id="lowercase" class="invalid">No mínimo 1 caractere minúsculo</p>
                                <p id="uppercase" class="invalid">No mínimo 1 letra maiúscula</p>
                                <p id="numberReq" class="invalid">No mínimo 1 número</p>
                                <p id="specialChar" class="invalid">No mínimo 1 caractere especial</p>
                            </div>
                        </div>

                        <button id="btnEnviar" onclick="marceloTeixeira()" type="button"
                            class="btn btn-primary w-100">Enviar</button>
                        <button id="btnValidar" type="button" class="btn btn-primary w-100"
                            style="display: none;">Validar</button>
                        <button id="btnReset" type="button" class="btn btn-primary w-100" style="display: none;">Resetar
                            Senha</button>

                        <div id="error-message" class="alert alert-danger mt-3" style="display: none;"></div>
                    </form>

                    <div class="mt-3">
                        <a href="/login" class="btn btn-outline-primary w-100">Voltar para o Login</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <button id="toggleDarkMode" class="btn-dark-mode">
        <i class="fas fa-moon"></i>
    </button>

    <script>

        function togglePasswordVisibility(inputId, iconId) {
            const passwordField = document.getElementById(inputId);
            const icon = document.getElementById(iconId);

            if (passwordField.type === "password") {
                passwordField.type = "text";
                icon.classList.remove("fa-eye");
                icon.classList.add("fa-eye-slash");
            } else {
                passwordField.type = "password";
                icon.classList.remove("fa-eye-slash");
                icon.classList.add("fa-eye");
            }
        }

        document.getElementById("btnVeja").addEventListener("click", function () {
            togglePasswordVisibility("password", "togglePassword");
        });
        const btnEnviar = document.getElementById('btnEnviar');
        const btnValidar = document.getElementById('btnValidar');
        const btnReset = document.getElementById('btnReset');
        const emailInput = document.getElementById('email');
        const codigoContainer = document.getElementById('codigoContainer');
        const codigoInput = document.getElementById('codigo');
        const passwordInput = document.getElementById('password');
        const errorMessage = document.getElementById('error-message');
        const passwordContainer = document.getElementById('passwordContainer'); // pega o container da senha

        async function marceloTeixeira() {
            const email = emailInput.value.trim();

            if (!email) {
                showError('Preencha o e-mail.');
                return;
            }

            try {
                const response = await fetch('/esqueci', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Email: email })
                });

                if (response.ok) {
                    codigoContainer.style.display = 'block';
                    btnEnviar.style.display = 'none';
                    btnValidar.style.display = 'block';
                    errorMessage.style.display = 'none';
                    emailInput.readOnly = true; // email bloqueado para edição
                } else {
                    const result = await response.json();
                    showError(result.error || 'Erro ao enviar email!');
                }
            } catch (error) {
                showError('Erro de conexão!');
            }
        };

        btnValidar.addEventListener('click', async () => {
            const email = emailInput.value.trim();
            const codigo = codigoInput.value.trim();

            if (!email || !codigo) {
                showError('Preencha o e-mail e o código.');
                return;
            }

            try {
                const response = await fetch('/esqueciValida', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Email: email, Codigo: codigo })
                });

                if (response.ok) {
                    // Salvar email no localStorage
                    localStorage.setItem('resetEmail', email);

                    // Esconder email e código
                    emailInput.parentElement.style.display = 'none';
                    codigoContainer.style.display = 'none';
                    btnValidar.style.display = 'none';

                    // Mostrar senha e botão de resetar
                    passwordContainer.style.display = 'block';
                    btnReset.style.display = 'block';
                    errorMessage.style.display = 'none';

                    // Adicionar ouvinte para validação da nova senha
                    passwordInput.addEventListener('input', validatePassword);

                } else {
                    const result = await response.json();
                    showError(result.error || 'Código inválido!');
                }
            } catch (error) {
                showError('Erro de conexão!');
            }
        });

        btnReset.addEventListener('click', async () => {
            const password = passwordInput.value.trim();
            const email = localStorage.getItem('resetEmail');

            if (!email || !password) {
                showError('Preencha a nova senha.');
                return;
            }

            // Valida a senha antes de enviar
            if (!validatePassword()) {
                showError('A senha não atende aos requisitos.');
                return;
            }

            try {
                const response = await fetch('/trocaSenha', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Email: email, Senha: password })
                });

                if (response.ok) {
                    // Limpa o localStorage e redireciona
                    localStorage.removeItem('resetEmail');
                    window.location.href = '/login';
                } else {
                    const result = await response.json();
                    showError(result.error || 'Erro ao trocar senha!');
                }
            } catch (error) {
                showError('Erro de conexão!');
            }
        });

        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
        }

        // Validação da senha (mesma lógica do script anterior)
        const passwordInputNew = document.getElementById('password');
        const lengthRequirement = document.getElementById('length');
        const lowercaseRequirement = document.getElementById('lowercase');
        const uppercaseRequirement = document.getElementById('uppercase');
        const numberRequirement = document.getElementById('numberReq');
        const specialCharRequirement = document.getElementById('specialChar');
        const resetPasswordButton = document.getElementById('btnReset');

        function validatePassword() {
            const password = passwordInputNew.value;
            const hasLength = password.length >= 8;
            const hasLowercase = /[a-z]/.test(password);
            const hasUppercase = /[A-Z]/.test(password);
            const hasNumber = /[0-9]/.test(password);
            const hasSpecialChar = /[!#$%^&*(),.?":{}|<>]/.test(password);

            lengthRequirement.className = hasLength ? 'valid' : 'invalid';
            lowercaseRequirement.className = hasLowercase ? 'valid' : 'invalid';
            uppercaseRequirement.className = hasUppercase ? 'valid' : 'invalid';
            numberRequirement.className = hasNumber ? 'valid' : 'invalid';
            specialCharRequirement.className = hasSpecialChar ? 'valid' : 'invalid';

            return hasLength && hasLowercase && hasUppercase && hasNumber && hasSpecialChar;
        }

        // Inicialmente, desabilita o botão de resetar senha
        resetPasswordButton.disabled = true;

        passwordInputNew.addEventListener('input', () => {
            resetPasswordButton.disabled = !validatePassword();
        });

    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>