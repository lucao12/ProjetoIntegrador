<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Home Nutri</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="~/NovaPasta/loader.css">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            margin: 0;
            position: relative;
            transition: background-color 0.3s, color 0.3s;
        }

        .container {
            padding: 20px;
            width: 100%;
            max-width: 900px;
            transition: background-color 0.3s;
        }

        h1 {
            color: #343a40;
        }

        h3 {
            color: #343a40;
        }

        .list-group {
            max-height: px;
            overflow-y: auto;
            margin-top: 15px;
        }

        .list-group-item {
            background-color: #ffffff;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-bottom: 10px;
        }

        .list-group-item button {
            margin-left: 10px;
        }

        .list-group-item span {
            font-weight: bold;
        }

        #pedidosAceitos {
            margin-top: 30px;
        }

        .alert-custom {
            margin-top: 20px;
            color: #d9534f;
        }

        .no-pedidos {
            text-align: center;
            font-size: 1.2rem;
            color: #6c757d;
        }

        /* Botões no canto superior direito */
        .button-container {
            position: absolute;
            top: 20px;
            left: 20px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .btn {
            max-width: 200px;
        }

        /* Modo Noturno */
        body.dark-mode {
            background-color: #121212;
            color: white;
        }

        .dark-mode .card {
            background-color: #1e1e1e;
            color: white;
        }

        .dark-mode h3 {
            color: white;
        }

        .dark-mode .form-control {
            background-color: #333;
            color: white;
            border: 1px solid #555;
        }

        .dark-mode .form-control::placeholder {
            color: #bbb;
        }

        .dark-mode .list-group-item {
            background-color: #333;
            color: white;
        }

        .dark-mode .btn-primary {
            background-color: #007bff;
            border: none;
        }

        .dark-mode .btn-primary:hover {
            background-color: #0056b3;
        }

        .dark-mode .modal-content {
        background-color: #1e1e1e;
            color: white;
        }

        .dark-mode .modal-header,
        .dark-mode .modal-body,
        .dark-mode .modal-footer {
        background-color: #1e1e1e;
        }

        .dark-mode .modal-header .btn-close {
            color: white;
        }

        .dark-mode .form-control {
            background-color: #333;
            color: white;
            border: 1px solid #555;
        }

        .dark-mode .form-control::placeholder {
            color: #bbb;
        }

        .dark-mode .form-select {
            background-color: #444;
            color: white;
            border: 1px solid #555;
        }

        .btn-dark-mode {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #343a40;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 50px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
    </style>
</head>

<body>
    <div class="overlay" id="loader-container" style="display: none;">
        <div class="loader"></div>
    </div>

    <button id="toggleDarkMode" class="btn-dark-mode">
        <i class="fas fa-moon"></i>
    </button>
    <div class="container">

        <div class="mb-4 text-center">
            <img id="profileImage" src="~/default.png" alt="Foto de perfil" class="rounded-circle" width="150"
                 height="150">
        </div>

        <!-- Botões no canto superior direito -->
        <div class="button-container">
            <button class="btn btn-outline-dark" data-bs-toggle="modal"
                    data-bs-target="#settingsModal">
                Configurações
            </button>
            <button class="btn btn-danger" id="btnLogout">
                <i class="fas fa-door-open"></i>
            </button>
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#settingsModal" id="btnsocial">
                &#64
            </button>
        </div>

        <!-- Modal de Configurações -->
        <div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="settingsModalLabel">Configurações da Conta</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="settingsForm">
                            <div class="mb-3">
                                <label for="name" class="form-label">Nome</label>
                                <input type="text" class="form-control" id="name">
                            </div>
                            <div class="mb-3">
                                <label for="email" class="form-label">E-mail</label>
                                <input type="email" class="form-control" id="email">
                            </div>
                            <div class="mb-3">
                                <label for="phone" class="form-label">Telefone</label>
                                <input type="text" class="form-control" id="phone">
                            </div>
                            <div class="mb-3">
                                <label for="sex" class="form-label">Sexo</label>
                                <select class="form-control" id="sex">
                                    <option value="" selected>Escolha seu sexo</option>
                                    <option value="masculino">Masculino</option>
                                    <option value="feminino">Feminino</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="idade" class="form-label">Idade</label>
                                <input type="number" class="form-control" id="idade" min="18" max="99" step="18">
                            </div>
                            <div class="mb-3">
                                <label for="peso" class="form-label">Peso (Kg)</label>
                                <input type="number" class="form-control" id="peso" min="0" step="1">
                            </div>
                            <div class="mb-3">
                                <label for="altura" class="form-label">Altura (cm)</label>
                                <input type="number" class="form-control" id="altura" min="0" step="1">
                            </div>
                            <div class="mb-3">
                                <label for="profilePhoto" class="form-label">Foto</label>
                                <input type="file" id="profilePhoto" accept="image/*">
                            </div>
                            <div class="mb-3">
                                <label for="oldPassword" class="form-label">Senha Antiga</label>
                                <input type="password" class="form-control" id="oldPassword">
                            </div>
                            <div class="mb-3">
                                <label for="newPassword" class="form-label">Nova Senha</label>
                                <input type="password" class="form-control" id="newPassword">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                        <button type="button" class="btn btn-primary" onclick="saveChanges()">Salvar alterações</button>
                        <button type="button" class="btn btn-danger" onclick="deleteAccount()">Deletar conta</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="settingsModalLabel">Redes Sociais</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="settingsForm">
                            <div class="mb-3">
                                <label for="instagram" class="form-label">Instagram</label>
                                <input type="text" id="instagram" class="form-control" placeholder="Digite seu &#64">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                        <button type="button" class="btn btn-primary" onclick="saveChangesocial()">Salvar
                            alterações</button>
                        <button type="button" class="btn btn-danger" onclick="deleteAccount()">Deletar conta</button>
                    </div>
                </div>
            </div>
        </div>

        <h2>Pedidos Nutricionista</h2>

        <div id="pedidosPendentes">
            <h3>Pedidos Pendentes</h3>
            <ul id="listPedidos" class="list-group"></ul>
            <div id="noPedidosPendentes" class="no-pedidos"></div>
        </div>

        <div id="pedidosAceitos">
            <h3>Pedidos Aceitos</h3>
            <ul id="listPedidosAceitos" class="list-group"></ul>
            <div id="noPedidosAceitos" class="no-pedidos"></div>
        </div>

        <!-- Modal para alteração de senha -->
        <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="changePasswordModalLabel">Alterar Senha</h5>
                    </div>
                    <div class="modal-body">
                        <form id="changePasswordForm">
                            <div class="mb-3">
                                <label for="newPasswordAdmin" class="form-label">Nova Senha</label>
                                <input type="password" class="form-control" id="newPasswordAdmin" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="changePassword()">Salvar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function ColocaCarregando() {
            document.getElementById("loader-container").style.display = "flex";
        }

        function TiraCarregando() {
            document.getElementById("loader-container").style.display = "none";
        }

        $(document).ready(function () {
            const token = localStorage.getItem("token");
            if (!token) {
                window.location.href = "/login";
                return;
            }

            function logout() {
                localStorage.removeItem("token");
                window.location.href = "/login";
            }
            window.logout = logout;

            // Função de Logout
            $('#btnLogout').click(function () {
                localStorage.removeItem("token");
                window.location.href = "/login";  // Redireciona para a página de login
            });

            function Verifica() {
                fetch("/verificaAdmCriou", {
                    method: "GET",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                        "Content-Type": "application/json"
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        if (data.sim) {
                            const changePasswordModal = new bootstrap.Modal(document.getElementById('changePasswordModal'));
                            changePasswordModal.show();
                        } else {
                            carregarPedidosPendentes();
                            carregarPedidosAceitos();
                        }
                    })
                    .catch(error => {
                        console.error("Erro ao verificar administrador:", error);
                    });
            }


            document.getElementById("changePasswordModal").addEventListener("hidden.bs.modal", function () {
                Verifica();
            });

            function carregarPedidosPendentes() {
                $.ajax({
                    url: '/verifica/pedidos/nutri',
                    type: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    success: function (data) {
                        var pedidos = data.pedido;
                        $('#listPedidos').empty();
                        $('#noPedidosPendentes').empty();

                        let contador = 0;
                        if (pedidos && pedidos.length > 0) {
                            pedidos.forEach(function (pedido) {
                                console.log(pedido);
                                $('#listPedidos').append(`
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                         <span>${pedido.usuario.nome} - ${pedido.usuario.email}</span>
                                        <div>
                                            <button class="btn btn-success btn-sm" onclick="aceitarRejeitarPedido(${pedido.id}, 1)">Aceitar</button>
                                            <button class="btn btn-danger btn-sm" onclick="aceitarRejeitarPedido(${pedido.id}, 0)">Rejeitar</button>
                                        </div>
                                    </li>
                                `);
                            });
                            contador++;
                        } else {
                            $('#noPedidosPendentes').html('<p class="alert alert-info">Não há pedidos pendentes</p>');
                        }
                    },
                    error: function () {
                        alert('Erro ao carregar pedidos.');
                    }
                });
            }

            function changePassword() {
                const token = localStorage.getItem("token");
                const newPassword = document.getElementById("newPasswordAdmin").value.trim();

                if (!newPassword) {
                    alert("Por favor, insira uma nova senha.");
                    return;
                }

                fetch("/mudasenha", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ senha: newPassword })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("A senha deve conter no mínimo 8 caracteres, com pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial.");
                        }
                        alert("Senha alterada com sucesso! Faça login novamente.");
                        logout();
                    })
                    .catch(error => {
                        console.error("Erro ao alterar senha:", error);
                        alert("A senha deve conter no mínimo 8 caracteres, com pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial.");
                    });
            }
            window.changePassword = changePassword;


            function carregarPedidosAceitos() {
                $.ajax({
                    url: '/verifica/aceitos/nutri',
                    type: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    success: function (data) {
                        var pedidosAceitos = data.pedido;
                        $('#listPedidosAceitos').empty(); // Limpa a lista de pedidos aceitos
                        $('#noPedidosAceitos').empty(); // Limpa a mensagem de "não tem"

                        if (pedidosAceitos && pedidosAceitos.length > 0) {
                            pedidosAceitos.forEach(function (pedido) {
                                $('#listPedidosAceitos').html(`
                                    <li class="list-group-item">
                                        ${pedido.usuario.nome} - ${pedido.usuario.email}
                                        <button class="btn btn-outline-dark" data-bs-toggle="modal"
                                      data-bs-target="#ChatModal">Chat com o ${pedido.usuario.nome}</button>
                                      <div class="modal fade" id="ChatModal" tabindex="-1" aria-labelledby="settingsModalLabel"
                                        aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="settingsModalLabel">Chat com o ${pedido.usuario.nome}</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <form id="ChatForm">
                                                        <form>
                                                            <div id="ChatTextForm">
                                                            </div>
                                                        </form>
                                                            <input type="text" id="mensagem" name="mensagem" placeholder="Digite sua mensagem">
                                                            <button type="button" class="btn btn-primary" onclick="EnviarMensagens(${pedido.usuario.id})">Enviar</button>
                                                        </form>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                                                </div>
                                            </div>
                                        </div>
                                   </div>
                                    </li>
                                    
                                `);
                                document.getElementById("ChatModal").addEventListener("shown.bs.modal", function () {
                                    const nutricionistaId = pedido.usuario.id;
                                    cronJob = setInterval(() => fetchMensagens(nutricionistaId), 1000);
                                    fetchMensagens(nutricionistaId);
                                });

                                document.getElementById("ChatModal").addEventListener("hidden.bs.modal", function () {
                                    if (cronJob) {
                                        clearInterval(cronJob);
                                        cronJob = null;
                                    }
                                });
                            });
                            
                        } else {
                            $('#noPedidosAceitos').html('<p class="alert alert-info">Não há pedidos aceitos</p>');
                        }
                    },
                    error: function () {
                        alert('Erro ao carregar pedidos aceitos.');
                    }
                });
            }
            window.EnviarMensagens = function(idEnvio)  {
                const token = localStorage.getItem("token");

                fetch(`/EnviarMensagem`, {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        id: idEnvio,
                        mensagem: document.getElementById('mensagem').value

                    })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("Erro ao enviar pedido.");
                        }
                        alert("Mensagem enviada com sucesso!");
                        document.getElementById('mensagem').value = ""
                    })
                    .catch(error => {
                        console.error("Erro ao enviar mensagem:", error);
                        alert("Erro ao enviar mensagem.");
                    });
            }
            async function fetchMensagens(nutricionistaId) {
                const token = localStorage.getItem("token");
                fetch(`/PegarMensagem/${nutricionistaId}`, {
                    method: "GET",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                        "Content-Type": "application/json"
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Erro ao buscar mensagens: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(mensagens => {
                    // Atualizar a área de chat
                    const chatBox = document.getElementById("ChatTextForm");
                    chatBox.innerHTML = ""; // Limpa o chat antes de adicionar novas mensagens

                    mensagens.forEach(msg => {
                        const p = document.createElement("p");
                        p.textContent = msg.nutricionista.role + " " + msg.nutricionista.nome + " - " + msg.mensage; // Supondo que a mensagem tenha um campo 'texto'
                        chatBox.appendChild(p);
                    });
                })
                .catch(error => {
                    console.error("Erro ao buscar mensagens:", error);
                });
            }
            function aceitarRejeitarPedido(pedidoId, aceito) {
                console.log(token);
                $.ajax({
                    url: `/validar/pedido/${pedidoId}/${aceito}`,
                    type: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    success: function () {
                        alert('Pedido atualizado com sucesso!');
                        carregarPedidosPendentes(); // Recarrega a lista de pedidos pendentes
                        carregarPedidosAceitos();   // Recarrega a lista de pedidos aceitos
                    },
                    error: function () {
                        alert('Erro ao atualizar pedido.');
                    }
                });
            }
            window.aceitarRejeitarPedido = aceitarRejeitarPedido;

            // Carregar os pedidos na página
            Verifica();
        });
        function deleteAccount() {
            const token = localStorage.getItem("token");

            fetch("/delete/yourself", {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Erro ao deletar conta.");
                    }
                    alert("Conta deletada com sucesso!");
                    localStorage.removeItem("token");
                    window.location.href = "/login";
                })
                .catch(error => {
                    console.error("Erro ao deletar conta:", error);
                    alert("Erro ao deletar conta.");
                });
        }

        function saveChanges() {
            const token = localStorage.getItem("token");
            if (document.getElementById("idade").value < 99 && document.getElementById("idade").value > 18) {
                console.log(document.getElementById("sex").value)
                if (document.getElementById("sex").value == "masculino" || document.getElementById("sex").value == "feminino") {
                    if (document.getElementById("peso").value > 0) {
                        if (document.getElementById("altura").value > 0) {
                            console.log(token)

                            ColocaCarregando();

                            const userData = {
                                Nome: document.getElementById("name").value,
                                Telefone: document.getElementById("phone").value,
                                Email: document.getElementById("email").value,
                                Sexo: document.getElementById("sex").value,
                                Idade: document.getElementById("idade").value,
                                Peso: document.getElementById("peso").value,
                                Altura: document.getElementById("altura").value,
                                SenhaAntiga: document.getElementById("oldPassword").value,
                                NovaSenha: document.getElementById("newPassword").value.trim() === "" ? null : document.getElementById("newPassword").value
                            };

                            console.log(userData)

                            fetch("/update/user/yourself", {
                                method: "PUT",
                                headers: {
                                    "Authorization": `Bearer ${token}`,
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify(userData)
                            })
                                .then(async response => {
                                    const json = await response.json();

                                    if (!response.ok) {
                                        let errorMessage = "Erro ao salvar";
                                        TiraCarregando();

                                        if (json.error) {
                                            errorMessage = json.error;
                                        } else if (json.errors) {
                                            const firstErrorKey = Object.keys(json.errors)[0];
                                            if (json.errors[firstErrorKey] && json.errors[firstErrorKey].length > 0) {
                                                errorMessage = json.errors[firstErrorKey][0];
                                            }
                                        }

                                        throw new Error(errorMessage);
                                    }


                                    const fileInput = document.getElementById("profilePhoto");

                                    const formData = new FormData();
                                            if (fileInput.files.length > 0) {
                                                formData.append("Foto", fileInput.files[0]); // Adiciona a foto ao FormData
                                            }

                                    try {
                                             // Verifica se há dados para enviar
                                            if (formData.has("Foto")) {
                                                const response = await fetch("/update/user/photo", {
                                                    method: "PUT",
                                                    headers: {
                                                        "Authorization": `Bearer ${token}`
                                                    },
                                                    body: formData
                                                });

                                                const result = await response.json();

                                                if (response.ok) {
                                                    TiraCarregando();
                                                    alert("Alterações salvas com sucesso! \nFaça Login novamente");
                                                    logout(); // Recarrega as informações no modal
                                                } else {
                                                    TiraCarregando();
                                                    alert(result.error || "Erro ao atualizar a foto.");
                                                }
                                            } else {
                                                TiraCarregando();
                                                    alert("Alterações salvas com sucesso! \nFaça Login novamente");
                                                    logout(); // Recarrega as informações no modal
                                            }
                                    } catch (error) {
                                        TiraCarregando();
                                        console.error("Erro ao enviar a foto:", error);
                                    }
                                })
                                .catch(error => {
                                    TiraCarregando();
                                    console.error("Erro ao salvar alterações:", error);
                                    alert("Erro ao salvar alterações.");
                                });
                        } else {
                            TiraCarregando();
                            console.error("Digite uma altura");
                            alert("Digite uma altura");
                        }
                    } else {
                        TiraCarregando();
                        console.error("Digite um peso");
                        alert("Digite um peso");
                    }
                } else {
                    TiraCarregando();
                    console.error("Escolha um sexo");
                    alert("Escolha um sexo");
                }
            }
            else {
                TiraCarregando();
                console.error("Digite uma idade entre 18 anos e 99 anos");
                alert("Digite uma idade entre 18 anos e 99 anos");
            }
        }

        function saveChangesocial() {
            const token = localStorage.getItem("token");
            console.log(token)

            const userData = {
                Instagram: document.getElementById("instagram").value,
            };

            console.log(userData)

            fetch("/update/user/social", {
                method: "PUT",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(userData)
            })
                .then(async response => {
                    const json = await response.json();

                    if (!response.ok) {
                        let errorMessage = "Erro ao salvar";

                        if (json.error) {
                            errorMessage = json.error;
                        } else if (json.errors) {
                            const firstErrorKey = Object.keys(json.errors)[0];
                            if (json.errors[firstErrorKey] && json.errors[firstErrorKey].length > 0) {
                                errorMessage = json.errors[firstErrorKey][0];
                            }
                        }

                        throw new Error(errorMessage);
                    }
                    alert("Alterações salvas com sucesso! \nFaça Login novamente");
                    logout(); // Recarrega as informações no modal
                })
                .catch(error => {
                    console.error("Erro ao salvar alterações:", error);
                    alert("Erro ao salvar alterações.");
                });
        }

        function loadContent() {
            const token = localStorage.getItem("token");
            if (!token) {
                window.location.href = "/login";
                return;
            }
            // Chama a requisição para preencher o modal com os dados do usuário
            fetch("/user/yourself", {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(user => {
                    if (user) {
                        // Preenche os campos do modal com os dados do usuário
                        document.getElementById("name").value = user.nome;
                        document.getElementById("email").value = user.email;
                        document.getElementById("phone").value = user.telefone || '';
                        document.getElementById("sex").value = user.sexo || '';
                        document.getElementById("peso").value = user.peso || '';
                        document.getElementById("altura").value = user.altura || '';
                        document.getElementById("idade").value = user.idade || '';

                        if (user.foto) {
                            document.getElementById("profileImage").src = user.foto;
                        }
                    }
                })
                .catch(error => {
                    console.error("Erro ao carregar dados do usuário:", error);
                });
        }

        document.addEventListener("DOMContentLoaded", function () {
            const toggleButton = document.getElementById("toggleDarkMode");
            const body = document.body;

            if (localStorage.getItem("dark-mode") === "enabled") {
                body.classList.add("dark-mode");
                toggleButton.innerHTML = '<i class="fas fa-sun"></i>';
            }

            toggleButton.addEventListener("click", function () {
                body.classList.toggle("dark-mode");

                if (body.classList.contains('dark-mode')) {
                    localStorage.setItem('dark-mode', 'enabled');
                    toggleButton.innerHTML = '<i class="fas fa-sun"></i>';
                } else {
                    localStorage.setItem('dark-mode', 'disabled');
                    toggleButton.innerHTML = '<i class="fas fa-moon"></i>';
                }
            });

            loadContent();
        });
    </script>
</body>

</html>