<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Home Nutri</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="~/NovaPasta/loader.css">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <style>
        /*!
                * Virtual Select v1.0.47
                * https://sa-si-dev.github.io/virtual-select
                * Licensed under MIT (https://github.com/sa-si-dev/virtual-select/blob/master/LICENSE)
                */
        vscomp-animation-spin {
            to {
                transform: rotateZ(360deg)
            }

        }

        .vscomp-popup-active {
            overflow: hidden !important
        }

        .vscomp-ele {
            display: inline-block;
            max-width: 250px;
            width: 100%
        }

        .vscomp-wrapper {
            color: #333;
            display: inline-flex;
            flex-wrap: wrap;
            font-family: sans-serif;
            font-size: 14px;
            position: relative;
            text-align: left;
            width: 100%
        }

        .vscomp-wrapper *,
        .vscomp-wrapper *::before,
        .vscomp-wrapper *::after {
            box-sizing: border-box
        }

        .vscomp-wrapper:focus {
            outline: none
        }

        .vscomp-dropbox-wrapper {
            left: 0;
            position: absolute;
            top: 0
        }

        .vscomp-toggle-button {
            align-items: center;
            background-color: #fff;
            border: 1px solid #ddd;
            cursor: pointer;
            display: flex;
            padding: 7px 30px 7px 10px;
            position: relative;
            width: 100%
        }

        .vscomp-value {
            height: 20px;
            line-height: 20px;
            max-width: 100%;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap
        }

        .vscomp-arrow {
            align-items: center;
            display: flex;
            height: 100%;
            justify-content: center;
            position: absolute;
            right: 0;
            top: 0;
            width: 30px
        }

        .vscomp-arrow::after {
            transform: rotate(45deg);
            border: 1px solid rgba(0, 0, 0, 0);
            border-bottom-color: #111;
            border-right-color: #111;
            content: "";
            height: 8px;
            margin-top: -6px;
            width: 8px
        }

        .vscomp-clear-icon {
            height: 12px;
            position: relative;
            width: 12px
        }

        .vscomp-clear-icon::before,
        .vscomp-clear-icon::after {
            background-color: #999;
            content: "";
            height: 12px;
            left: 5px;
            position: absolute;
            top: 0;
            width: 2px
        }

        .vscomp-clear-icon::before {
            transform: rotate(45deg)
        }

        .vscomp-clear-icon::after {
            transform: rotate(-45deg)
        }

        .vscomp-clear-icon:hover::before,
        .vscomp-clear-icon:hover::after {
            background: #333
        }

        .vscomp-clear-button {
            align-items: center;
            border-radius: 50%;
            display: none;
            height: 24px;
            justify-content: center;
            margin-top: -12px;
            position: absolute;
            right: 30px;
            top: 50%;
            width: 24px
        }

        .vscomp-clear-button:hover {
            background: #ccc
        }

        .vscomp-clear-button:hover .vscomp-clear-icon::before,
        .vscomp-clear-button:hover .vscomp-clear-icon::after {
            background-color: #333
        }

        .vscomp-dropbox-close-button {
            align-items: center;
            background-color: #fff;
            border-radius: 50%;
            bottom: -48px;
            cursor: pointer;
            display: none;
            height: 40px;
            justify-content: center;
            left: 50%;
            margin-left: -20px;
            position: absolute;
            width: 40px
        }

        .vscomp-value-tag.more-value-count {
            white-space: nowrap
        }

        .vscomp-dropbox-container {
            width: 100%;
            z-index: 2
        }

        .vscomp-dropbox {
            background-color: #fff;
            width: 100%
        }

        .vscomp-options-container {
            max-height: 210px;
            overflow: auto;
            position: relative
        }

        .vscomp-options-bottom-freezer {
            bottom: 0;
            height: 2px;
            left: 0;
            position: absolute;
            right: 0
        }

        .vscomp-option {
            align-items: center;
            cursor: pointer;
            display: flex;
            flex-wrap: wrap;
            height: 40px;
            padding: 0 15px;
            position: relative
        }

        .vscomp-option.selected {
            background-color: #eee
        }

        .vscomp-option.focused {
            background-color: #ccc
        }

        .vscomp-option.disabled {
            cursor: default;
            opacity: .5
        }

        .vscomp-option.group-title .vscomp-option-text {
            cursor: default;
            opacity: .6
        }

        .vscomp-option.group-title.selected {
            background-color: rgba(0, 0, 0, 0)
        }

        .vscomp-option.group-option {
            padding-left: 30px
        }

        .vscomp-new-option-icon {
            height: 30px;
            position: absolute;
            right: 0;
            top: 0;
            width: 30px
        }

        .vscomp-new-option-icon::before {
            border: 15px solid #512da8;
            border-bottom-color: rgba(0, 0, 0, 0);
            border-left-color: rgba(0, 0, 0, 0);
            content: "";
            position: absolute;
            right: 0;
            top: 0
        }

        .vscomp-new-option-icon::after {
            align-items: center;
            color: #fff;
            content: "+";
            display: flex;
            font-size: 18px;
            height: 15px;
            justify-content: center;
            position: absolute;
            right: 1px;
            top: 0;
            width: 15px
        }

        .vscomp-option-text {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none;
            width: 100%
        }

        .vscomp-option-description {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            color: #666;
            font-size: 13px;
            line-height: 15px;
            width: 100%
        }

        .vscomp-search-container {
            align-items: center;
            border-bottom: 1px solid #ddd;
            display: flex;
            height: 40px;
            padding: 0 5px 0 15px;
            position: relative
        }

        .vscomp-search-label,
        .vscomp-live-region,
        .vscomp-dropbox-container-top,
        .vscomp-dropbox-container-bottom {
            border: 0;
            clip: rect(0 0 0 0);
            height: 1px;
            margin: -1px;
            overflow: hidden;
            padding: 0;
            position: absolute;
            white-space: nowrap;
            width: 1px
        }

        .vscomp-search-input {
            background-color: rgba(0, 0, 0, 0);
            border: 0;
            color: inherit;
            font-size: 15px;
            height: 38px;
            padding: 10px 0;
            width: calc(100% - 30px)
        }

        .vscomp-search-input:focus {
            outline: none
        }

        .vscomp-search-clear {
            align-items: center;
            color: #999;
            cursor: pointer;
            display: flex;
            font-size: 25px;
            height: 30px;
            justify-content: center;
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none;
            visibility: hidden;
            width: 30px
        }

        .vscomp-search-clear:hover {
            color: inherit
        }

        .vscomp-no-options,
        .vscomp-no-search-results {
            align-items: center;
            display: none;
            justify-content: center;
            padding: 20px 10px
        }

        .vscomp-options-loader {
            display: none;
            padding: 20px 0;
            text-align: center
        }

        h6 {
            padding: 15px;
        }

        #conteudo-abas-dieta {
            padding: 10px;
            text-align: center;
        }


        .vscomp-options-loader::before {
            animation: vscomp-animation-spin .8s infinite linear;
            background-color: #fff;
            border-radius: 50%;
            box-shadow: -4px -5px 3px -3px rgba(0, 0, 0, .3);
            content: "";
            display: inline-block;
            height: 40px;
            opacity: .7;
            width: 40px
        }

        .vscomp-ele[disabled] {
            cursor: not-allowed;
            -webkit-user-select: none;
            -moz-user-select: none;
            user-select: none
        }

        .vscomp-ele[disabled] .vscomp-wrapper {
            opacity: .7;
            pointer-events: none
        }

        .vscomp-wrapper .checkbox-icon {
            display: inline-flex;
            height: 15px;
            margin-right: 10px;
            position: relative;
            width: 15px
        }

        .nav-tabs .nav-link.active {
            border-color: #dee2e6 #dee2e6 #fff;
            font-weight: 600;
        }

        .nav-tabs .nav-link {
            color: #495057;
        }

        .nav-tabs .nav-link.text-danger {
            font-weight: 500;
        }

        .vscomp-wrapper .checkbox-icon::after {
            transition-duration: .2s;
            border: 2px solid #888;
            content: "";
            display: inline-block;
            height: 100%;
            width: 100%
        }

        .vscomp-wrapper .checkbox-icon.checked::after {
            transform: rotate(45deg) translate(1px, -4px);
            border-color: #512da8;
            border-left-color: rgba(0, 0, 0, 0);
            border-top-color: rgba(0, 0, 0, 0);
            width: 50%
        }

        .vscomp-wrapper.show-as-popup .vscomp-dropbox-container {
            align-items: center;
            background-color: rgba(0, 0, 0, .5);
            display: flex;
            height: 100vh;
            justify-content: center;
            left: 0;
            opacity: 1;
            overflow: auto;
            padding: 0 10px;
            position: fixed;
            top: 0;
            width: 100vw
        }

        .vscomp-wrapper.show-as-popup .vscomp-dropbox {
            margin-top: -24px;
            max-height: calc(80% - 48px);
            max-width: 500px;
            position: relative;
            width: 80%
        }

        .vscomp-wrapper.show-as-popup .vscomp-dropbox-close-button {
            display: flex
        }

        .vscomp-wrapper.popup-position-left .vscomp-dropbox-container {
            justify-content: flex-start
        }

        .vscomp-wrapper.popup-position-right .vscomp-dropbox-container {
            justify-content: flex-end
        }

        .vscomp-wrapper.has-select-all .vscomp-toggle-all-button {
            align-items: center;
            cursor: pointer;
            display: flex
        }

        .vscomp-wrapper.has-select-all .vscomp-search-input,
        .vscomp-wrapper.has-select-all .vscomp-toggle-all-label {
            width: calc(100% - 55px)
        }

        .vscomp-wrapper.has-select-all .vscomp-toggle-all-label {
            display: none
        }

        .vscomp-wrapper:not(.has-search-input) .vscomp-toggle-all-button {
            width: 100%
        }

        .vscomp-wrapper:not(.has-search-input) .vscomp-toggle-all-label {
            display: inline-block
        }

        .vscomp-wrapper.multiple .vscomp-option .vscomp-option-text {
            width: calc(100% - 25px)
        }

        .vscomp-wrapper.multiple .vscomp-option .vscomp-option-description {
            padding-left: 25px
        }

        .vscomp-wrapper.multiple .vscomp-option.selected .checkbox-icon::after {
            transform: rotate(45deg) translate(1px, -4px);
            border-color: #512da8;
            border-left-color: rgba(0, 0, 0, 0);
            border-top-color: rgba(0, 0, 0, 0);
            width: 50%
        }

        .vscomp-wrapper.focused .vscomp-toggle-button,
        .vscomp-wrapper:focus .vscomp-toggle-button {
            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .12), 0 1px 5px 0 rgba(0, 0, 0, .2)
        }

        .vscomp-wrapper.closed .vscomp-dropbox-container,
        .vscomp-wrapper.closed.vscomp-dropbox-wrapper {
            display: none
        }

        .vscomp-wrapper:not(.has-value) .vscomp-value {
            opacity: .5
        }

        .vscomp-wrapper.has-clear-button.has-value .vscomp-clear-button {
            display: flex
        }

        .vscomp-wrapper.has-clear-button .vscomp-toggle-button {
            padding-right: 54px
        }

        .vscomp-wrapper.has-no-options .vscomp-options-container,
        .vscomp-wrapper.has-no-search-results .vscomp-options-container {
            display: none
        }

        .vscomp-wrapper.has-no-options .vscomp-no-options {
            display: flex
        }

        .vscomp-wrapper.has-no-search-results .vscomp-no-search-results {
            display: flex
        }

        .vscomp-wrapper.has-search-value .vscomp-search-clear {
            visibility: visible
        }

        .vscomp-wrapper.has-no-options .vscomp-toggle-all-button {
            opacity: .5;
            pointer-events: none
        }

        .vscomp-wrapper.keep-always-open .vscomp-toggle-button {
            padding-right: 24px
        }

        .vscomp-wrapper.keep-always-open .vscomp-clear-button {
            right: 5px
        }

        .vscomp-wrapper.keep-always-open .vscomp-arrow {
            display: none
        }

        .vscomp-wrapper.keep-always-open .vscomp-dropbox-container {
            position: relative;
            z-index: 1
        }

        .vscomp-wrapper.keep-always-open .vscomp-dropbox {
            transition-duration: 0s;
            border: 1px solid #ddd;
            box-shadow: none
        }

        .vscomp-wrapper.keep-always-open.focused,
        .vscomp-wrapper.keep-always-open:focus,
        .vscomp-wrapper.keep-always-open:hover {
            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .12), 0 1px 5px 0 rgba(0, 0, 0, .2)
        }

        .vscomp-wrapper.server-searching .vscomp-options-list {
            display: none
        }

        .vscomp-wrapper.server-searching .vscomp-options-loader {
            display: block
        }

        .vscomp-wrapper.has-error .vscomp-toggle-button {
            border-color: #b00020
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-toggle-button {
            padding: 4px 22px 0 10px
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value {
            display: flex;
            flex-wrap: wrap;
            height: auto;
            min-height: 28px;
            overflow: auto;
            text-overflow: unset;
            white-space: normal
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value-tag {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            align-items: center;
            border: 1px solid #ddd;
            border-radius: 20px;
            display: inline-flex;
            font-size: 12px;
            line-height: 16px;
            margin: 0 4px 4px 0;
            max-width: 100%;
            padding: 2px 3px 2px 8px
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value-tag.more-value-count {
            padding-right: 8px
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value-tag-content {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            width: calc(100% - 20px)
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value-tag-clear-button {
            align-items: center;
            display: flex;
            height: 20px;
            justify-content: center;
            width: 20px
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-value-tag-clear-button .vscomp-clear-icon {
            transform: scale(0.8)
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-arrow {
            height: 34px
        }

        .vscomp-wrapper.show-value-as-tags .vscomp-clear-button {
            margin-top: 0;
            top: 5px
        }

        .vscomp-wrapper.show-value-as-tags.has-value .vscomp-arrow {
            display: none
        }

        .vscomp-wrapper.show-value-as-tags.has-value .vscomp-clear-button {
            right: 2px
        }

        .vscomp-wrapper.show-value-as-tags:not(.has-value) .vscomp-toggle-button {
            padding-bottom: 2px
        }

        .vscomp-wrapper.show-value-as-tags:not(.has-value) .vscomp-value {
            align-items: center;
            padding-bottom: 3px
        }

        .vscomp-wrapper.text-direction-rtl {
            direction: rtl
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-toggle-button {
            padding: 7px 10px 7px 30px
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-arrow {
            left: 0;
            right: auto
        }



        .vscomp-wrapper.text-direction-rtl .vscomp-clear-button {
            left: 30px;
            right: auto !important
        }

        .vscomp-wrapper.text-direction-rtl .checkbox-icon {
            margin-left: 10px;
            margin-right: 0
        }

        .vscomp-wrapper.text-direction-rtl .checkbox-icon.checked::after {
            transform: rotate(45deg) translate(-4px, 1px)
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-search-container {
            padding: 0 15px 0 5px
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-toggle-all-label {
            text-align: right
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-option {
            text-align: right
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-option.group-option {
            padding-right: 30px
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-new-option-icon {
            left: 0;
            right: auto
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-new-option-icon::before {
            border-left-color: #512da8;
            border-right-color: rgba(0, 0, 0, 0)
        }

        .vscomp-wrapper.text-direction-rtl .vscomp-new-option-icon::after {
            left: 1px;
            right: auto
        }

        .vscomp-wrapper.text-direction-rtl.multiple .vscomp-option.selected .checkbox-icon::after {
            transform: rotate(45deg) translate(-4px, 1px)
        }

        .vscomp-wrapper.text-direction-rtl.has-clear-button .vscomp-toggle-button {
            padding-left: 54px
        }

        .vscomp-wrapper.text-direction-rtl.keep-always-open .vscomp-toggle-button {
            padding-left: 24px
        }

        .vscomp-wrapper.text-direction-rtl.keep-always-open .vscomp-clear-button {
            left: 5px
        }

        .vscomp-wrapper.text-direction-rtl.show-value-as-tags .vscomp-toggle-button {
            padding: 4px 10px 0 22px
        }

        .vscomp-wrapper.text-direction-rtl.show-value-as-tags .vscomp-value-tag {
            margin: 0 0 4px 4px;
            padding: 2px 8px 2px 3px
        }

        .vscomp-wrapper.text-direction-rtl.show-value-as-tags .vscomp-value-tag.more-value-count {
            padding-left: 8px
        }

        .vscomp-wrapper.text-direction-rtl.show-value-as-tags.has-value .vscomp-clear-button {
            left: 2px
        }

        /*!
                * Popover v1.0.13
                * https://sa-si-dev.github.io/popover
                * Licensed under MIT (https://github.com/sa-si-dev/popover/blob/master/LICENSE)
                */
        .pop-comp-wrapper {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
            color: #000;
            background-color: #fff;
            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .12), 0 1px 5px 0 rgba(0, 0, 0, .2);
            text-align: left;
            flex-wrap: wrap;
            z-index: 1
        }

        .pop-comp-arrow {
            position: absolute;
            z-index: 1;
            width: 16px;
            height: 16px;
            overflow: hidden;
            pointer-events: none
        }

        .pop-comp-arrow::before {
            content: "";
            position: absolute;
            top: 8px;
            left: 8px;
            width: 16px;
            height: 16px;
            background-color: #fff;
            box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .12), 0 1px 5px 0 rgba(0, 0, 0, .2);
            -webkit-transform-origin: left top;
            transform-origin: left top;
            -webkit-transform: rotate(45deg);
            transform: rotate(45deg)
        }

        .pop-comp-content {
            position: relative;
            z-index: 2
        }

        .pop-comp-wrapper.position-bottom>.pop-comp-arrow {
            margin-left: -8px;
            left: 0;
            top: -15px
        }

        .pop-comp-wrapper.position-bottom>.pop-comp-arrow::before {
            box-shadow: 0px 0px 2px 0 rgba(0, 0, 0, .14)
        }

        .pop-comp-wrapper.position-top>.pop-comp-arrow {
            margin-left: -8px;
            left: 0;
            bottom: -15px
        }

        .pop-comp-wrapper.position-right>.pop-comp-arrow {
            margin-top: -8px;
            top: 0;
            left: -15px
        }

        .pop-comp-wrapper.position-left>.pop-comp-arrow {
            margin-top: -8px;
            top: 0;
            right: -15px
        }

        .pop-comp-disable-events {
            pointer-events: none
        }
    </style>

    <style>
        :root {
            --bg-light: #f6ead4;
            --green: #426841;
            --blue: #007bff;
            --blue-dark: #0056b3;
            --input-border: #ddd;
            --input-focus: #007bff;
            --dark-bg: #1e1e1e;
            --dark-border: #555;
            --dark-text: #eee;

            /* Novas variáveis para substituir cores fixas */
            --primary: var(--blue);
            --secondary: var(--green);
            --bg-card: #ffffff;
            --text-main: #333333;
            --text-muted: #666666;
            --border: #cccccc;
            --shadow: 2px 2px 8px rgba(0, 0, 0, 0.1);

            /* Variáveis para o modal (novas ou ajustadas para o tema) */
            --modal-bg: var(--bg-card);
            --modal-text: var(--text-main);
            --modal-header-bg: var(--primary);
            --modal-header-text: #ffffff;
            --modal-footer-bg: var(--bg-card);
            --modal-button-primary-bg: var(--primary);
            --modal-button-primary-text: #ffffff;
            --modal-button-secondary-bg: var(--secondary);
            --modal-button-secondary-text: #ffffff;
            --modal-button-danger-bg: #dc3545;
            --modal-button-danger-text: #ffffff;

            /* Variáveis para o elemento .refeicao no dark mode */
            --refeicao-dark-bg: #2a2a2a;
            --refeicao-dark-border: #444;
            --refeicao-dark-text: #f1f1f1;

            /* Novas variáveis para o labels-container e alimento-container */
            --labels-container-bg: #f8f9fa;
            --labels-container-border: var(--border);
            --alimento-label-color: var(--text-main);
            --alimento-input-bg: var(--bg-card);
            --alimento-input-border: var(--input-border);
            --alimento-input-color: var(--text-main);

            /* Variáveis para o dark mode do labels-container e alimento-container */
            --labels-container-dark-bg: #2a2a2a;
            --labels-container-dark-border: #444;
            --alimento-label-dark-color: var(--dark-text);
            --alimento-input-dark-bg: #1e1e1e;
            --alimento-input-dark-border: #555;
            --alimento-input-dark-color: var(--dark-text);

            /* Novas variáveis para o VirtualSelect */
            --virtual-select-bg: var(--bg-card);
            --virtual-select-border: var(--input-border);
            --virtual-select-text: var(--text-main);
            --virtual-select-placeholder: var(--text-muted);
            --virtual-select-option-hover-bg: #f0f0f0;
            --virtual-select-active-option-bg: var(--primary);
            --virtual-select-active-option-text: #ffffff;
            --virtual-select-selected-item-bg: var(--primary);
            --virtual-select-selected-item-text: #ffffff;
            --virtual-select-clear-button: #dc3545;

            /* Variáveis para o dark mode do VirtualSelect */
            --virtual-select-dark-bg: #2a2a2a;
            --virtual-select-dark-border: #555;
            --virtual-select-dark-text: var(--dark-text);
            --virtual-select-dark-placeholder: #ccc;
            --virtual-select-dark-option-hover-bg: #3a3a3a;
            --virtual-select-dark-active-option-bg: var(--blue-dark);
            --virtual-select-dark-active-option-text: #ffffff;
            --virtual-select-dark-selected-item-bg: var(--blue-dark);
            --virtual-select-dark-selected-item-text: #ffffff;
            --virtual-select-dark-clear-button: #e84d4d;
        }

        body {
            font-family: 'Segoe UI', sans-serif;
            background-color: var(--bg-light);
            margin: 0;
        }

        h1,
        h3 {
            color: var(--primary);
        }

        .container {
            max-width: 1000px;
            width: 100%;
            padding: 20px;
            background-color: var(--bg-card);
            border-radius: 12px;
            box-shadow: var(--shadow);
            transition: background-color 0.3s, color 0.3s;
        }

        .list-group {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 20px;
            list-style: none;
            padding: 0;
        }

        .list-group-item {
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-left: 5px solid var(--primary);
            border-radius: 10px;
            padding: 16px;
            flex: 1 1 100%;
            box-shadow: var(--shadow);
            transition: transform 0.2s ease, background-color 0.3s, color 0.3s;
        }

        .list-group-item:hover {
            transform: translateY(-2px);
        }

        .user-info {
            font-size: 16px;
            font-weight: 500;
            color: var(--text-main);
        }

        .user-info .nome {
            font-weight: bold;
            font-size: 18px;
            color: var(--primary);
        }

        .user-info .email {
            font-size: 14px;
            color: var(--text-muted);
            margin-top: 4px;
        }

        .btn-dark-mode {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: var(--text-main);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 50px;
            cursor: pointer;
        }

        .alert-info {
            background-color: #e3f9f1;
            border-left: 4px solid var(--secondary);
            padding: 12px;
            color: var(--text-main);
            margin-bottom: 15px;
            border-radius: 8px;
        }

        #pedidosAceitos,
        #pedidosPendentes {
            margin-top: 20px;
            background-color: #fafafa;
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 20px;
        }

        #pedidosAceitos h3 {
            color: var(--primary);
            border-bottom: 1px solid var(--border);
            padding-bottom: 8px;
        }

        /* Estilos do Modal */
        .modal-content {
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            transition: background-color 0.3s, color 0.3s;
            background-color: var(--modal-bg);
            color: var(--modal-text);
        }

        .modal-header {
            border-bottom: 1px solid var(--border);
            background-color: var(--modal-header-bg);
            color: var(--modal-header-text);
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
            padding: 1rem 1.5rem;
        }

        .modal-header .btn-close {
            filter: invert(1);
        }

        .modal-title {
            color: var(--modal-header-text);
            font-size: 1.4rem;
            font-weight: 600;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            border-top: 1px solid var(--border);
            background-color: var(--modal-footer-bg);
            border-bottom-left-radius: 15px;
            border-bottom-right-radius: 15px;
            padding: 1rem 1.5rem;
        }

        /* Estilos dos inputs e labels dentro do modal (e agora para o .alimento-container também) */
        .modal-body .form-label,
        .alimento-container label {
            color: var(--text-main);
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .modal-body .form-control,
        .modal-body .form-select,
        .alimento-container input[type="number"] {
            border: 1px solid var(--input-border);
            border-radius: 8px;
            padding: 0.75rem 1rem;
            font-size: 1rem;
            color: var(--text-main);
            background-color: var(--bg-card);
            transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
            width: 100%;
            box-sizing: border-box;
        }

        .modal-body .form-control:focus,
        .modal-body .form-select:focus,
        .alimento-container input[type="number"]:focus {
            border-color: var(--input-focus);
            box-shadow: 0 0 0 0.25rem rgba(0, 123, 255, 0.25);
            outline: none;
        }

        .modal-body .mb-3 {
            margin-bottom: 1rem !important;
        }

        .refeicao {
            background-color: #fdfdfd;
            padding: 14px;
            border-left: 4px solid var(--secondary);
            border-radius: 8px;
            margin-bottom: 10px;
            color: var(--text-main);
        }

        
        .refeicao h5 {
            color: var(--secondary);
            font-size: 1.1rem;
            margin-bottom: 6px;
        }

        .refeicao strong,
        .refeicao div {
            color: var(--text-main);
            font-size: 0.95rem;
        }

        /* Estilos para o labels-container */
        .labels-container {
            background-color: var(--labels-container-bg);
            border: 1px solid var(--labels-container-border);
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
            box-shadow: var(--shadow);
            display: flex;
            flex-direction: column;
            gap: 15px;
            transition: background-color 0.3s, border-color 0.3s;
        }

        /* Estilos para cada alimento-container */
        .alimento-container {
            padding: 10px;
            border: 1px solid var(--input-border);
            border-radius: 8px;
            background-color: var(--bg-card);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            transition: background-color 0.3s, border-color 0.3s, box-shadow 0.3s;
        }

        .alimento-container .mb-3 {
            margin-bottom: 0 !important;
        }

        /* Estilos para o VirtualSelect */
        .virtual-select-wrapper {
            /* Container principal do VirtualSelect */
            --vs-bg-color: var(--virtual-select-bg);
            --vs-border-color: var(--virtual-select-border);
            --vs-text-color: var(--virtual-select-text);
            --vs-placeholder-color: var(--virtual-select-placeholder);
            --vs-option-hover-bg: var(--virtual-select-option-hover-bg);
            --vs-active-option-bg: var(--virtual-select-active-option-bg);
            --vs-active-option-color: var(--virtual-select-active-option-text);
            --vs-selected-item-bg: var(--virtual-select-selected-item-bg);
            --vs-selected-item-color: var(--virtual-select-selected-item-text);
            --vs-clear-button-color: var(--virtual-select-clear-button);

            /* Propriedades customizadas para controlar sub-componentes */
            --vs-dropdown-bg: var(--virtual-select-bg);
            --vs-dropdown-border: var(--virtual-select-border);
            --vs-dropdown-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            /* Sombra para o dropdown */
            --vs-search-input-bg: var(--bg-card);
            --vs-search-input-border: var(--input-border);
            --vs-search-input-color: var(--text-main);
            --vs-search-input-placeholder: var(--text-muted);
        }

        /* Ajustes específicos para o VirtualSelect que podem não ser cobertos pelas variáveis CSS */
        .virtual-select-wrapper .vscomp-toggle-button {
            background-color: var(--virtual-select-bg);
            border-color: var(--virtual-select-border);
            color: var(--virtual-select-text);
        }

        .virtual-select-wrapper .vscomp-search-input {
            background-color: var(--virtual-select-bg);
            color: var(--virtual-select-text);
            border-color: var(--virtual-select-border);
        }

        .virtual-select-wrapper .vscomp-value-label {
            color: var(--virtual-select-text);
        }

        .virtual-select-wrapper .vscomp-options-container {
            background-color: var(--virtual-select-bg);
            border-color: var(--virtual-select-border);
        }

        .virtual-select-wrapper .vscomp-option-selected {
            background-color: var(--virtual-select-active-option-bg);
            color: var(--virtual-select-active-option-text);
        }

        .virtual-select-wrapper .vscomp-option:hover {
            background-color: var(--virtual-select-option-hover-bg);
        }

        /* Dark mode */
        body.dark-mode {
            background-color: #121212;
            color: #e0e0e0;
        }

        .dark-mode #pedidosAceitos,
        .dark-mode #pedidosPendentes {
            background-color: #1e1e1e;
            border-width: 0;
        }

        .dark-mode .container,
        .dark-mode .list-group-item,
        .dark-mode .chat-message.nutricionista {
            background-color: #1e1e1e;
            color: #fff;
        }

        .dark-mode .modal-content {
            background-color: var(--dark-bg);
            color: var(--dark-text);
            box-shadow: 0 4px 25px rgba(0, 0, 0, 0.6);
        }

        .dark-mode .modal-header {
            background-color: var(--primary);
            color: var(--modal-header-text);
            border-color: var(--dark-border);
        }

        .dark-mode .modal-header .btn-close {
            filter: invert(1);
        }

        .dark-mode .modal-footer {
            background-color: var(--dark-bg);
            border-color: var(--dark-border);
        }

        .dark-mode .modal-body .form-label,
        .dark-mode .alimento-container label {
            color: var(--alimento-label-dark-color);
        }

        .dark-mode .modal-body .form-control,
        .dark-mode .modal-body .form-select,
        .dark-mode .alimento-container input[type="number"] {
            background-color: var(--alimento-input-dark-bg);
            border-color: var(--alimento-input-dark-border);
            color: var(--alimento-input-dark-color);
        }

        .dark-mode .refeicao {
            background-color: var(--refeicao-dark-bg);
            border-left-color: var(--secondary);
            color: var(--refeicao-dark-text);
        }

        .dark-mode .refeicao h5 {
            color: var(--secondary);
        }

        .dark-mode .refeicao strong,
        .dark-mode .refeicao div {
            color: var(--refeicao-dark-text);
        }

        /* Dark mode para o labels-container e alimento-container */
        .dark-mode .labels-container {
            background-color: var(--labels-container-dark-bg);
            border-color: var(--labels-container-dark-border);
        }

        .dark-mode .alimento-container {
            background-color: var(--labels-container-dark-bg);
            border-color: var(--labels-container-dark-border);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        /* Dark mode para o VirtualSelect */
        .dark-mode .virtual-select-wrapper {
            --vs-bg-color: var(--virtual-select-dark-bg);
            --vs-border-color: var(--virtual-select-dark-border);
            --vs-text-color: var(--virtual-select-dark-text);
            --vs-placeholder-color: var(--virtual-select-dark-placeholder);
            --vs-option-hover-bg: var(--virtual-select-dark-option-hover-bg);
            --vs-active-option-bg: var(--virtual-select-dark-active-option-bg);
            --vs-active-option-color: var(--virtual-select-dark-active-option-text);
            --vs-selected-item-bg: var(--virtual-select-dark-selected-item-bg);
            --vs-selected-item-color: var(--virtual-select-dark-selected-item-text);
            --vs-clear-button-color: var(--virtual-select-dark-clear-button);

            --vs-dropdown-bg: var(--virtual-select-dark-bg);
            --vs-dropdown-border: var(--virtual-select-dark-border);
            --vs-dropdown-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);
            /* Sombra mais intensa no dark mode */
            --vs-search-input-bg: #1e1e1e;
            /* Fundo do input de busca no dark mode */
            --vs-search-input-border: #666;
            --vs-search-input-color: var(--dark-text);
            --vs-search-input-placeholder: #aaa;
        }

        .dark-mode .virtual-select-wrapper .vscomp-toggle-button {
            background-color: var(--virtual-select-dark-bg);
            border-color: var(--virtual-select-dark-border);
            color: var(--virtual-select-dark-text);
        }

        .dark-mode .virtual-select-wrapper .vscomp-search-input {
            background-color: var(--virtual-select-dark-bg);
            color: var(--virtual-select-dark-text);
            border-color: var(--virtual-select-dark-border);
        }

        .dark-mode .virtual-select-wrapper .vscomp-value-label {
            color: var(--virtual-select-dark-text);
        }

        .dark-mode .virtual-select-wrapper .vscomp-options-container {
            background-color: var(--virtual-select-dark-bg);
            border-color: var(--virtual-select-dark-border);
        }

        .dark-mode .virtual-select-wrapper .vscomp-option-selected {
            background-color: var(--virtual-select-dark-active-option-bg);
            color: var(--virtual-select-dark-active-option-text);
        }

        .dark-mode .virtual-select-wrapper .vscomp-option:hover {
            background-color: var(--virtual-select-dark-option-hover-bg);
        }

        /* Cores dos ícones de seta e "x" no VirtualSelect no dark mode */
        .dark-mode .virtual-select-wrapper .vscomp-arrow-btn,
        .dark-mode .virtual-select-wrapper .vscomp-clear-btn {
            filter: invert(1) hue-rotate(180deg);
            /* Inverte e ajusta para ficar visível */
            color: var(--virtual-select-dark-text);
            /* Fallback */
        }


        .dark-mode .chat-message.usuario {
            align-self: flex-end;
            background-color: #9b59b6;
            color: white;
        }

        .dark-mode .btn-dark-mode {
            background-color: #555;
        }


        .btn-chat,
        .btn-enviar-dieta,
        .btn-grafico,
        .btn-ver-sintomas {
            background-color: #426841;
            color: white
        }

        .loader {
            border: 6px solid #f3f3f3;
            border-top: 6px solid #007bff;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        button.btn-primary,
        button.btn-secondary,
        button.btn-danger {
            border: none;
            border-radius: 20px;
            padding: 10px 20px;
            transition: 0.3s;
            cursor: pointer;
        }

        button.btn-primary {
            background-color: var(--modal-button-primary-bg);
            color: var(--modal-button-primary-text);
        }

        button.btn-primary:hover {
            background-color: var(--blue-dark);
        }

        button.btn-secondary {
            background-color: var(--modal-button-secondary-bg);
            color: var(--modal-button-secondary-text);
        }

        button.btn-secondary:hover {
            background-color: #314d31;
        }

        button.btn-danger {
            background-color: var(--modal-button-danger-bg);
            color: var(--modal-button-danger-text);
        }

        button.btn-danger:hover {
            background-color: #c82333;
        }


        #listPedidos li,
        #listPedidosAceitos li {
            background: #f8f9fa;
            border: 1px solid #ccc;
            padding: 10px 15px;
            margin: 5px 0;
            border-radius: 10px;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
        }

        body.dark-mode #listPedidos li,
        body.dark-mode #listPedidosAceitos li {
            background: #2a2a2a;
            border-color: #444;
            color: #f1f1f1;
        }

        #profileImage {
            border: 4px solid #007bff;
            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s;
        }

        #profileImage:hover {
            transform: scale(1.05);
        }

        :focus {
            outline: 2px dashed var(--primary);
            outline-offset: 2px;
        }


        #ChatTextForm {
            display: flex;
            flex-direction: column;
            gap: 10px;
            padding: 10px;
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #f9f9f9;
        }

        .chat-message {
            max-width: 70%;
            padding: 10px;
            border-radius: 8px;
            position: relative;
            word-wrap: break-word;
        }

        .chat-message.usuario {
            align-self: flex-end;
            background-color: #007bff;
            color: white;
        }

        .chat-message.nutricionista {
            align-self: flex-start;
            background-color: #e9ecef;
            color: black;
        }

        .chat-message strong {
            display: block;
            margin-bottom: 5px;
            font-size: 0.9em;
        }

        .chat-input {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            padding: 10px;
            background-color: #fff;
            border-top: 1px solid #ccc;
        }

        .chat-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 1em;
            outline: none;
            transition: border-color 0.3s;
        }

        .chat-input input:focus {
            border-color: #007bff;
        }

        .chat-input button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1em;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .chat-input button:hover {
            background-color: #0056b3;
        }
    </style>


</head>

<body>
    <div class="overlay" id="loader-container" style="display: none;">
        <div class="loader"></div>
    </div>

    <button id="toggleDarkMode" class="btn-dark-mode">
        <i class="fas fa-moon"></i>
    </button>
    <div class="container">

        <div class="mb-4 text-center">
            <img id="profileImage" src="~/default.png" alt="Foto de perfil" class="rounded-circle" width="150"
                height="150">
        </div>


        @* Modal Add Alimentos *@
        <div class="modal fade" id="modalAddAlimentos" tabindex="-1" aria-labelledby="addAlimentosModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addAlimentosModalLabel">Adicionar Novo Alimento</h5>
                    </div>
                    <div class="modal-body">
                        <input type="text" id="inputAlimento" class="form-control"
                            placeholder="Digite o nome do alimento" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="salvarAlimentos()">Pesquisar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                    </div>
                    <div id="dadosRecebidos" class="modal-body mt-3" style="display: none;">
                    </div>
                </div>
            </div>
        </div>

        <!-- Botões no canto superior direito -->
        <div class="mb-4" style="text-align: center;">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#settingsModal">
                Configurações
            </button>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#settingsModalSocial" id="btnsocial">
                Rede Social
            </button>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalAddAlimentos">
                Adicionar Alimento
            </button>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalLayouts">
                Layouts
            </button>
            <button id="btnLogout" class="btn btn-danger ms-2" onclick="logout()">Logout</button>

        </div>

        <div class="modal fade" id="modalLayouts" tabindex="-1" aria-labelledby="modalLayoutsLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">

                    <div class="modal-header">
                        <h5 class="modal-title" id="modalLayoutsLabel">Layouts de Dieta Disponíveis</h5>
                    </div>

                    <div class="modal-body">
                        <div id="listaLayouts" class="list-group">
                            <!-- Layouts serão carregados aqui via JS -->
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                            data-bs-target="#modalNovoLayout">Novo Layout</button>
                    </div>

                </div>
            </div>
        </div>

        <!-- Modal para Adicionar Novo Layout -->
        <div class="modal fade" id="modalNovoLayout" tabindex="-1" aria-labelledby="modalNovoLayoutLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">

                    <div class="modal-header">
                        <h5 class="modal-title" id="modalNovoLayoutLabel">Adicionar Novo Layout de Dieta</h5>
                    </div>

                    <div class="modal-body">
                        <!-- Nome do Layout -->
                        <div class="mb-3">
                            <label for="nomeLayout" class="form-label">Nome do Layout</label>
                            <input type="text" class="form-control" id="nomeLayout"
                                placeholder="Digite o nome do layout" required>
                        </div>

                        <!-- Seleção das Refeições -->
                        <h6>Café da Manhã</h6>
                        <div id="modal-cafe-layout">
                            <div class="alimentos-selects" id="virtual-cafe"></div>
                        </div>

                        <h6>Almoço</h6>
                        <div id="modal-almoco-layout">

                            <div class="alimentos-selects" id="virtual-almoco"></div>
                        </div>

                        <h6>Café da Tarde</h6>
                        <div id="modal-cafedt-layout">

                            <div class="alimentos-selects" id="virtual-cafedt"></div>
                        </div>

                        <h6>Janta</h6>
                        <div id="modal-janta-layout">

                            <div class="alimentos-selects" id="virtual-janta"></div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="button" class="btn btn-primary" id="salvarLayout" onclick="enviaLayout()">Salvar
                            Layout</button>
                    </div>

                </div>
            </div>
        </div>


        <!-- Modal de Configurações -->
        <div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="settingsModalLabel">Configurações da Conta</h5>
                    </div>
                    <div class="modal-body">
                        <form id="settingsForm">
                            <div class="mb-3">
                                <label for="name" class="form-label">Nome</label>
                                <input type="text" class="form-control" id="name">
                            </div>
                            <div class="mb-3">
                                <label for="email" class="form-label">E-mail</label>
                                <input type="email" class="form-control" id="email">
                            </div>
                            <div class="mb-3">
                                <label for="phone" class="form-label">Telefone</label>
                                <input type="text" class="form-control" id="phone">
                            </div>
                            <div class="mb-3">
                                <label for="sex" class="form-label">Sexo</label>
                                <select class="form-control" id="sex">
                                    <option value="" selected>Escolha seu sexo</option>
                                    <option value="masculino">Masculino</option>
                                    <option value="feminino">Feminino</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="idade" class="form-label">Idade</label>
                                <input type="number" class="form-control" id="idade" min="18" max="99" step="18">
                            </div>
                            <div class="mb-3">
                                <label for="profilePhoto" class="form-label">Foto</label>
                                <input type="file" id="profilePhoto" accept="image/*">
                            </div>
                            <div class="mb-3">
                                <label for="oldPassword" class="form-label">Senha Antiga</label>
                                <input type="password" class="form-control" id="oldPassword">
                            </div>
                            <div class="mb-3">
                                <label for="newPassword" class="form-label">Nova Senha</label>
                                <input type="password" class="form-control" id="newPassword">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                        <button type="button" class="btn btn-primary" onclick="saveChanges()">Salvar alterações</button>
                        <button type="button" class="btn btn-danger" onclick="deleteAccount()">Apagar conta</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="settingsModalSocial" tabindex="-1" aria-labelledby="settingsModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="settingsModalLabel">Redes Sociais</h5>
                    </div>
                    <div class="modal-body">
                        <form id="settingsForm">
                            <div class="mb-3">
                                <label for="instagram" class="form-label">Instagram</label>
                                <input type="text" id="instagram" class="form-control" placeholder="Digite seu &#64">
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                        <button type="button" class="btn btn-primary" onclick="saveChangesocial()">Salvar
                            alterações</button>
                        <button type="button" class="btn btn-danger" onclick="deleteAccount()">Deletar conta</button>
                    </div>
                </div>
            </div>
        </div>

        <h2>Pedidos Nutricionista</h2>

        <div id="pedidosPendentes">
            <h3>Pedidos Pendentes</h3>
            <ul id="listPedidos"></ul>
            <div id="noPedidosPendentes" class="no-pedidos"></div>
        </div>

        <div id="pedidosAceitos">
            <h3>Pedidos Aceitos</h3>
            <ul id="listPedidosAceitos"></ul>
            <div id="noPedidosAceitos" class="no-pedidos"></div>
        </div>

        <div class="modal fade" id="EnviaDietaModal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">

                    <div class="modal-header">
                        <h5 class="modal-title">Selecionar Dietas</h5>
                    </div>

                    <div data-usuario-id="">
                        <ul class="nav nav-tabs" id="tabs-dieta" role="tablist">
                            <!-- Abas dos dias da semana -->
                        </ul>
                        <div id="virtualSelectLayout"></div>
                        <div class="tab-content" id="conteudo-abas-dieta" style="overflow-y: auto; max-height: 600px;">
                            <!-- Conteúdo de cada aba -->
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                        <button type="button" class="btn btn-danger" onclick="CopiarLayoutParaTodos()">Copiar dieta para
                            todos</button>
                        <button class="btn btn-primary" onclick="EnviaDieta()">Enviar Dieta</button>
                    </div>

                </div>
            </div>
        </div>



        <!-- Modal para alteração de senha -->
        <div class="modal fade" id="changePasswordModal" tabindex="-1" aria-labelledby="changePasswordModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="changePasswordModalLabel">Alterar Senha</h5>
                    </div>
                    <div class="modal-body">
                        <form id="changePasswordForm">
                            <div class="mb-3">
                                <label for="newPasswordAdmin" class="form-label">Nova Senha</label>
                                <input type="password" class="form-control" id="newPasswordAdmin" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" onclick="changePassword()">Salvar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="modalGrafico" tabindex="-1" aria-labelledby="modalGrafico" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalGrafico">Gráfico de peso</h5>
                </div>
                <div class="modal-body">

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="modalSintomas" tabindex="-1" aria-labelledby="modalSintomasLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalSintomasLabel">Sintomas do Usuário</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <ul id="listaSintomas" class="list-group row"></ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                </div>
            </div>
        </div>
    </div>


    <script>
        const virtualSelectInstances = {};

        let layoutsNutri = [];
        function ColocaCarregando() {
            document.getElementById("loader-container").style.display = "flex";
        }

        function TiraCarregando() {
            document.getElementById("loader-container").style.display = "none";
        }

        function CarregaGrafico(idUsuario) {
            const token = localStorage.getItem("token");
            if (!token) {
                alert("Erro: Token não encontrado.");
                return;
            }

            // 1º fetch: Dados de peso por semana
            fetch(`/pesoSemana/${idUsuario}`, {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => {
                    if (!response.ok) throw new Error("Erro ao buscar os dados de peso");
                    return response.json();
                })
                .then(async data => {
                    if (data.length === 0) {
                        const modalBody2 = document.querySelector("#modalGrafico .modal-body");
                        modalBody2.innerHTML = "Nenhum dado de peso encontrado.";
                        return;
                    }

                    // Ordena os dados por data (mais recente por último)
                    data.sort((a, b) => new Date(a.dataAlteracao) - new Date(b.dataAlteracao));

                    const labels = data.map(item => new Date(item.dataAlteracao).toLocaleDateString());
                    const pesos = data.map(item => item.peso);

                    // Última data para calcular a meta
                    const ultimaData = new Date(data[data.length - 1].dataAlteracao);
                    const dataMeta = new Date(ultimaData);
                    dataMeta.setDate(ultimaData.getDate() + 7); // adiciona 7 dias

                    // Formata data para exibição no eixo X
                    const labelMeta = dataMeta.toLocaleDateString();

                    // 🔵 Busca a meta de peso
                    let metaPeso = null;
                    try {
                        const metaResponse = await fetch(`/metapeso/${idUsuario}`, {
                            method: "GET",
                            headers: {
                                "Authorization": `Bearer ${token}`,
                                "Content-Type": "application/json"
                            }
                        });

                        if (metaResponse.ok) {
                            const metaData = await metaResponse.json();
                            metaPeso = metaData.metaPeso;
                        }
                    } catch (error) {
                        console.warn("Erro ao buscar meta de peso:", error);
                    }

                    // Insere o gráfico no modal
                    const modalBody = document.querySelector("#modalGrafico .modal-body");
                    modalBody.innerHTML = '<canvas id="graficoPeso"></canvas>';

                    const ctx = document.getElementById("graficoPeso").getContext("2d");

                    const datasets = [{
                        label: "Peso (kg)",
                        data: pesos,
                        borderColor: "blue",
                        borderWidth: 2,
                        fill: false
                    }];

                    // 🎯 Adiciona a bolinha da meta, se ela existir
                    if (metaPeso !== null) {
                        labels.push(labelMeta);
                        datasets.push({
                            label: "Meta (projeção)",
                            data: Array(pesos.length).fill(null).concat([metaPeso]),
                            backgroundColor: "red",
                            borderColor: "red",
                            borderWidth: 0,
                            pointRadius: 6,
                            pointStyle: 'circle',
                            showLine: false
                        });
                    }

                    new Chart(ctx, {
                        type: "line",
                        data: {
                            labels: labels,
                            datasets: datasets
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                x: { title: { display: true, text: "Data" } },
                                y: { title: { display: true, text: "Peso (kg)" }, beginAtZero: false }
                            }
                        }
                    });
                })

                .catch(error => {
                    console.error("Erro ao buscar meta:", error);
                    alert("Erro ao carregar a meta de peso.");
                });
        }

        $(document).ready(function () {
            const token = localStorage.getItem("token");
            if (!token) {
                window.location.href = "/login";
                return;
            }

            function logout() {
                localStorage.removeItem("token");
                window.location.href = "/login";
            }
            window.logout = logout;

            // Função de Logout
            $('#btnLogout').click(function () {
                localStorage.removeItem("token");
                window.location.href = "/login";  // Redireciona para a página de login
            });

            function Verifica() {
                fetch("/verificaAdmCriou", {
                    method: "GET",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                        "Content-Type": "application/json"
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        if (data.sim) {
                            const changePasswordModal = new bootstrap.Modal(document.getElementById('changePasswordModal'));
                            changePasswordModal.show();
                        } else {
                            carregarPedidosPendentes();
                            carregarPedidosAceitos();
                        }
                    })
                    .catch(error => {
                        console.error("Erro ao verificar administrador:", error);
                    });
            }


            document.getElementById("changePasswordModal").addEventListener("hidden.bs.modal", function () {
                Verifica();
            });

            function carregarPedidosPendentes() {
                $.ajax({
                    url: '/verifica/pedidos/nutri',
                    type: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    success: function (data) {
                        var pedidos = data.pedido;
                        $('#listPedidos').empty();
                        $('#noPedidosPendentes').empty();

                        let contador = 0;
                        if (pedidos && pedidos.length > 0) {
                            pedidos.forEach(function (pedido) {
                                console.log(pedido);
                                $('#listPedidos').append(`
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                         <span>${pedido.usuario.nome} - ${pedido.usuario.email}</span>
                                        <div>
                                            <button class="btn btn-success btn-sm" onclick="aceitarRejeitarPedido(${pedido.id}, 1)">Aceitar</button>
                                            <button class="btn btn-danger btn-sm" onclick="aceitarRejeitarPedido(${pedido.id}, 0)">Rejeitar</button>
                                        </div>
                                    </li>
                                `);
                            });
                            contador++;
                        } else {
                            $('#noPedidosPendentes').html('<p class="alert alert-info">Não há pedidos pendentes</p>');
                        }
                    },
                    error: function () {
                        alert('Erro ao carregar pedidos.');
                    }
                });
            }

            function changePassword() {
                const token = localStorage.getItem("token");
                const newPassword = document.getElementById("newPasswordAdmin").value.trim();

                if (!newPassword) {
                    alert("Por favor, insira uma nova senha.");
                    return;
                }

                fetch("/mudasenha", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ senha: newPassword })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("A senha deve conter no mínimo 8 caracteres, com pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial.");
                        }
                        alert("Senha alterada com sucesso! Faça login novamente.");
                        logout();
                    })
                    .catch(error => {
                        console.error("Erro ao alterar senha:", error);
                        alert("A senha deve conter no mínimo 8 caracteres, com pelo menos uma letra maiúscula, uma letra minúscula, um número e um caractere especial.");
                    });
            }
            window.changePassword = changePassword;

            function carregarPedidosAceitos() {
                $.ajax({
                    url: '/verifica/aceitos/nutri',
                    type: 'GET',
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    success: function (data) {
                        var pedidosAceitos = data.pedido;
                        $('#listPedidosAceitos').empty();
                        $('#noPedidosAceitos').empty();

                        if (pedidosAceitos && pedidosAceitos.length > 0) {
                            pedidosAceitos.forEach(function (pedido) {
                                $('#listPedidosAceitos').append(`
                                    <li class="list-group-item">
                                        <div class="user-info">
                                            <div class="nome">${pedido.usuario.nome}</div>
                                            <div class="email">${pedido.usuario.email}</div>
                                        </div>
                                        @* ${pedido.usuario.nome} - ${pedido.usuario.email} *@
                                        <label class="idUser" style="display: none">${pedido.usuario.id}</label>
                                        <button class="btn btn-outline-dark btn-chat" data-id="${pedido.usuario.id}" data-bs-toggle="modal" data-bs-target="#ChatModal">Bate-papo</button>
                                        <button class="btn btn-outline-dark btn-enviar-dieta" data-id="${pedido.usuario.id}" data-bs-toggle="modal" data-bs-target="#EnviaDietaModal" onclick="CarregaDietasSelect(${pedido.usuario.id})">Enviar dieta</button>
                                        <button class="btn btn-outline-dark btn-grafico" data-id="${pedido.usuario.id}" data-bs-toggle="modal" data-bs-target="#modalGrafico">Ver gráfico de peso</button>
                                    <button class="btn btn-outline-dark btn-ver-sintomas" data-id="${pedido.usuario.id}" data-bs-toggle="modal" data-bs-target="#modalSintomas">Ver sintomas</button>

                                        </li>
                                `);
                            });

                            // Adiciona eventos corretamente após a criação dos elementos
                            document.querySelectorAll('.btn-chat').forEach(button => {
                                button.addEventListener('click', function () {
                                    const idUser = this.getAttribute('data-id');
                                    console.log("Abrindo chat para o ID:", idUser);
                                    localStorage.setItem('idUser', idUser);
                                    fetchMensagens(idUser);
                                });
                            });

                            document.querySelectorAll('.btn-enviar-dieta').forEach(button => {
                                button.addEventListener('click', function () {
                                    const idUser = this.getAttribute('data-id');
                                    localStorage.setItem('idUser', idUser);
                                    carregarAlimentos(idUser);
                                });
                            });

                            document.querySelectorAll('.btn-grafico').forEach(button => {
                                button.addEventListener('click', function () {
                                    const idUser = this.getAttribute('data-id');
                                    localStorage.setItem('idUser', idUser);
                                    CarregaGrafico(idUser);
                                });
                            });
                        } else {
                            $('#noPedidosAceitos').html('<p class="alert alert-info">Não há pedidos aceitos</p>');
                        }
                    },
                    error: function () {
                        alert('Erro ao carregar pedidos aceitos.');
                    }
                });
            }

            // Modais fixos no HTML
            document.body.insertAdjacentHTML("beforeend", `
                <div class="modal fade" id="ChatModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="settingsModalLabel">Chat</h5>
                            </div>
                            <div class="modal-body">
                                <div id="ChatContainer">
                                    <div id="ChatTextForm"></div>
                                    <div class="chat-input">
                                        <input type="text" id="mensagem" name="mensagem" placeholder="Digite sua mensagem">
                                        <button type="button" class="btn btn-primary" id="btnEnviarMensagem">Enviar</button>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                            </div>
                        </div>
                    </div>
                </div>
            `);

            document.getElementById("ChatModal").addEventListener("shown.bs.modal", function () {
                const nutricionistaId = localStorage.getItem("idUser");
                if (nutricionistaId) {
                    console.log("Iniciando atualização do chat para:", nutricionistaId);
                    cronJob = setInterval(() => fetchMensagens(nutricionistaId), 1000);
                    fetchMensagens(nutricionistaId);
                }
            });

            document.getElementById("ChatModal").addEventListener("hidden.bs.modal", function () {
                if (cronJob) {
                    clearInterval(cronJob);
                    cronJob = null;
                }
            });

            // Evento para enviar mensagem
            document.getElementById("btnEnviarMensagem").addEventListener("click", function () {
                const idUser = localStorage.getItem("idUser");
                EnviarMensagens(idUser);
            });

            window.EnviarMensagens = function (idEnvio) {
                const token = localStorage.getItem("token");

                fetch(`/EnviarMensagem`, {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        id: idEnvio,
                        mensagem: document.getElementById('mensagem').value

                    })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("Erro ao enviar pedido.");
                        }
                        document.getElementById('mensagem').value = ""
                    })
                    .catch(error => {
                        console.error("Erro ao enviar mensagem:", error);
                        alert("Erro ao enviar mensagem.");
                    });
            }

            async function fetchMensagens(nutricionistaId) {
                console.log("fetchMensagens chamado com ID:", nutricionistaId);

                const token = localStorage.getItem("token");
                console.log("Token recuperado:", token);

                fetch(`/PegarMensagem/${nutricionistaId}`, {
                    method: "GET",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                        "Content-Type": "application/json"
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Erro ao buscar mensagens: ${response.statusText}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log("Dados recebidos do backend:", data);

                        const chatBox = document.getElementById("ChatTextForm");
                        console.log("Elemento ChatTextForm:", chatBox);

                        if (!chatBox) {
                            console.error("Elemento ChatTextForm não encontrado!");
                            return;
                        }

                        // Combina as mensagens do usuário e do nutricionista em uma única lista
                        const todasMensagens = [
                            ...data.mensagensUsuario.map(msg => ({ ...msg, tipo: "usuario" })),
                            ...data.mensagensNutricionista.map(msg => ({ ...msg, tipo: "nutricionista" }))
                        ];

                        // Ordena as mensagens pelo ID (garantindo ordem correta)
                        todasMensagens.sort((a, b) => a.id - b.id);

                        console.log("Mensagens ordenadas:", todasMensagens);

                        // Limpa o chat antes de renderizar
                        chatBox.innerHTML = "";

                        // Adiciona todas as mensagens ao chat
                        todasMensagens.forEach(msg => {
                            console.log("Adicionando mensagem:", msg);
                            const div = document.createElement("div");
                            div.classList.add("chat-message", msg.tipo);

                            if (msg.tipo === "usuario") {
                                div.innerHTML = `<strong data-id="${msg.id}">Você:</strong> ${msg.mensagem}`;
                            } else {
                                div.innerHTML = `<strong data-id="${msg.id}">Paciente:</strong> ${msg.mensagem}`;
                            }

                            chatBox.appendChild(div);
                        });

                        setTimeout(() => {
                            chatBox.scrollTop = chatBox.scrollHeight;
                        }, 10);
                    })
                    .catch(error => {
                        console.error("Erro ao buscar mensagens:", error);
                    });
            }

            function aceitarRejeitarPedido(pedidoId, aceito) {
                console.log(token);
                $.ajax({
                    url: `/validar/pedido/${pedidoId}/${aceito}`,
                    type: 'POST',
                    headers: {
                        'Authorization': 'Bearer ' + token
                    },
                    success: function () {
                        alert('Pedido atualizado com sucesso!');
                        carregarPedidosPendentes(); // Recarrega a lista de pedidos pendentes
                        carregarPedidosAceitos();   // Recarrega a lista de pedidos aceitos
                    },
                    error: function () {
                        alert('Erro ao atualizar pedido.');
                    }
                });
            }
            window.aceitarRejeitarPedido = aceitarRejeitarPedido;

            // Carregar os pedidos na página
            Verifica();
        });

        function deleteAccount() {
            const token = localStorage.getItem("token");

            fetch("/delete/yourself", {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Erro ao deletar conta.");
                    }
                    alert("Conta deletada com sucesso!");
                    localStorage.removeItem("token");
                    window.location.href = "/login";
                })
                .catch(error => {
                    console.error("Erro ao deletar conta:", error);
                    alert("Erro ao deletar conta.");
                });
        }

        function saveChanges() {
            const token = localStorage.getItem("token");
            if (document.getElementById("idade").value < 99 && document.getElementById("idade").value >= 18) {
                console.log(document.getElementById("sex").value)
                if (document.getElementById("sex").value == "masculino" || document.getElementById("sex").value == "feminino") {
                    console.log(token)

                    ColocaCarregando();

                    const userData = {
                        Nome: document.getElementById("name").value,
                        Telefone: document.getElementById("phone").value,
                        Email: document.getElementById("email").value,
                        Sexo: document.getElementById("sex").value,
                        Idade: document.getElementById("idade").value,
                        SenhaAntiga: document.getElementById("oldPassword").value,
                        NovaSenha: document.getElementById("newPassword").value.trim() === "" ? null : document.getElementById("newPassword").value
                    };

                    console.log(userData)

                    fetch("/update/user/yourself", {
                        method: "PUT",
                        headers: {
                            "Authorization": `Bearer ${token}`,
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(userData)
                    })
                        .then(async response => {
                            const json = await response.json();

                            if (!response.ok) {
                                let errorMessage = "Erro ao salvar";
                                TiraCarregando();

                                if (json.error) {
                                    errorMessage = json.error;
                                } else if (json.errors) {
                                    const firstErrorKey = Object.keys(json.errors)[0];
                                    if (json.errors[firstErrorKey] && json.errors[firstErrorKey].length > 0) {
                                        errorMessage = json.errors[firstErrorKey][0];
                                    }
                                }

                                throw new Error(errorMessage);
                            }


                            const fileInput = document.getElementById("profilePhoto");

                            const formData = new FormData();
                            if (fileInput.files.length > 0) {
                                formData.append("Foto", fileInput.files[0]); // Adiciona a foto ao FormData
                            }

                            try {
                                // Verifica se há dados para enviar
                                if (formData.has("Foto")) {
                                    const response = await fetch("/update/user/photo", {
                                        method: "PUT",
                                        headers: {
                                            "Authorization": `Bearer ${token}`
                                        },
                                        body: formData
                                    });

                                    const result = await response.json();

                                    if (response.ok) {
                                        TiraCarregando();
                                        alert("Alterações salvas com sucesso! \nFaça Login novamente");
                                        logout(); // Recarrega as informações no modal
                                    } else {
                                        TiraCarregando();
                                        alert(result.error || "Erro ao atualizar a foto.");
                                    }
                                } else {
                                    TiraCarregando();
                                    alert("Alterações salvas com sucesso! \nFaça Login novamente");
                                    logout(); // Recarrega as informações no modal
                                }
                            } catch (error) {
                                TiraCarregando();
                                console.error("Erro ao enviar a foto:", error);
                            }
                        })
                        .catch(error => {
                            TiraCarregando();
                            console.error("Erro ao salvar alterações:", error);
                            alert("Erro ao salvar alterações.");
                        });
                } else {
                    TiraCarregando();
                    console.error("Escolha um sexo");
                    alert("Escolha um sexo");
                }
            }
            else {
                TiraCarregando();
                console.error("Digite uma idade entre 18 anos e 99 anos");
                alert("Digite uma idade entre 18 anos e 99 anos");
            }
        }


        function getVirtualSelectById(id) {
            const el = document.getElementById(id);
            if (!el) return null;
            return el;
        }

        function CopiarLayoutParaTodos() {
            const diasSemana = ["segunda", "terca", "quarta", "quinta", "sexta", "sabado", "domingo"];
            const refeicoes = ["cafe", "almoco", "cafedt", "janta"];

            const abaAtiva = document.querySelector(".nav-link.active");
            if (!abaAtiva) return;

            const idAbaAtiva = abaAtiva.getAttribute("href").replace("#tab-", "");
            const indexAbaAtiva = diasSemana.indexOf(idAbaAtiva);

            diasSemana.forEach((dia, idx) => {
                if (dia === idAbaAtiva) return;

                refeicoes.forEach(async (ref) => {
                    const idOrigem = `virtual-${ref.toLowerCase()}${indexAbaAtiva}`;
                    const idDestino = `virtual-${ref.toLowerCase()}${idx}`;

                    const vsOrigem = getVirtualSelectById(idOrigem);
                    const vsDestino = getVirtualSelectById(idDestino);

                    if (!vsOrigem || !vsDestino) return;
                    var ids = [];
                    var valor = [];
                    vsOrigem.value.forEach(alimentos => {
                        ids.push(alimentos);
                        valor.push(vsOrigem.querySelector(`input[name="quantidade-${alimentos}"]`).value);
                    });
                    vsDestino.setValue(ids);
                    recriarLabels(ids, document.getElementById(idDestino), valor);
                });
            });

            alert("Alimentos copiados para todos os dias com sucesso!");
        }

        function CarregaDietasSelect(idUser) {
            localStorage.setItem('idUsuario', idUser);
            const diasSemana = [
                { nome: "Segunda", id: "segunda" },
                { nome: "Terça", id: "terca" },
                { nome: "Quarta", id: "quarta" },
                { nome: "Quinta", id: "quinta" },
                { nome: "Sexta", id: "sexta" },
                { nome: "Sábado", id: "sabado" },
                { nome: "Domingo", id: "domingo" }
            ];

            const tabList = document.getElementById("tabs-dieta");
            const tabContent = document.getElementById("conteudo-abas-dieta");
            tabList.innerHTML = '';
            tabContent.innerHTML = '';
            diasSemana.forEach((dia, i) => {
                // Criar aba
                const li = document.createElement("li");
                li.className = "nav-item";

                const a = document.createElement("a");
                a.className = "nav-link" + (i === 0 ? " active" : "");
                a.href = `#tab-${dia.id}`;
                a.dataset.bsToggle = "tab";
                a.role = "tab";
                a.innerText = dia.nome;
                a.onclick = (e) => {
                    e.preventDefault();
                    document.querySelectorAll(".nav-link").forEach(el => el.classList.remove("active"));
                    document.querySelectorAll(".tab-pane").forEach(el => el.classList.remove("show", "active"));

                    a.classList.add("active");
                    document.getElementById(`tab-${dia.id}`).classList.add("show", "active");
                };

                li.appendChild(a);
                tabList.appendChild(li);

                //Criar o virtual select
                // Criar conteúdo da aba
                const tabPane = document.createElement("div");
                tabPane.className = "tab-pane fade" + (i === 0 ? " show active" : "");
                tabPane.id = `tab-${dia.id}`;
                tabPane.role = "tabpanel";

                const layoutContainer = document.createElement("div");
                layoutContainer.className = "alimentos-selects";

                const layoutSelectDiv = document.createElement("div");
                layoutSelectDiv.id = `select-layout-${dia.id}`;
                layoutSelectDiv.setAttribute("name", "native-select");
                layoutSelectDiv.setAttribute("placeholder", "Selecione um layout");
                layoutSelectDiv.setAttribute("data-search", "true");
                layoutSelectDiv.setAttribute("data-silent-initial-value-set", "true");

                const metaDiv = document.createElement("input");
                metaDiv.id = `input-metaPeso`;
                metaDiv.setAttribute("name", "native-select");
                metaDiv.setAttribute("placeholder", "Digite a meta estimada");
                metaDiv.setAttribute("data-search", "true");
                metaDiv.setAttribute("data-silent-initial-value-set", "true");

                layoutContainer.appendChild(metaDiv);
                layoutContainer.appendChild(layoutSelectDiv);

                tabPane.appendChild(layoutContainer);

                const refeicoes = ["cafe", "almoco", "cafedt", "janta"];
                const refeicoesLabels = ["Café da Manhã", "Almoço", "Café da Tarde", "Janta"];

                refeicoes.forEach((ref, idx) => {
                    const div = document.createElement("div");
                    div.className = "refeicao";
                    div.id = `modal-${dia.id}-${ref}`;
                    div.innerHTML = `<h6>${refeicoesLabels[idx]}</h6>
              <div class="alimentos-selects">
                                <div id="virtual-${ref + i}" name="native-select" placeholder="Todos os alimentos" data-search="true"
                                     data-silent-initial-value-set="true">
                                </div>
                                <div class="labelsinputs"></div>
                            </div>`;
                    tabPane.appendChild(div);
                });

                tabContent.appendChild(tabPane);

                virtualSelectInstances[dia.id] = VirtualSelect.init({
                    ele: `#select-layout-${dia.id}`,
                    options: layoutsNutri.map(layout => ({
                        label: layout.name,
                        value: layout.id
                    })),
                    search: true,
                    placeholder: "Escolha um layout...",
                    noOptionsText: "Nenhum layout encontrado",
                    searchPlaceholderText: "Buscar layout..."
                });

                document.querySelector(`#select-layout-${dia.id}`).addEventListener('change', function () {
                    console.log(this.value);

                    const valorSelecionado = layoutsNutri.find(item => item.id == this.value);

                    console.log('Objeto encontrado:', valorSelecionado);
                    let contador = 0;
                    const refeicoes = ['cafe', 'almoco', 'cafeDT', 'janta'];

                    refeicoes.forEach(async (ref) => {
                        document.getElementById(`virtual-${ref.toLowerCase()}${i}`).reset();
                        recriarLabels2(0, document.getElementById(`virtual-${ref.toLowerCase()}${i}`), 1);
                    });

                    refeicoes.forEach(async (ref) => {


                        const alimentos = valorSelecionado[ref];
                        if (!alimentos) return;

                        console.log(alimentos)
                        const idsAlimentos = alimentos.map(a => a.alimentos.id);

                        const alimentosMap = alimentos.reduce((acc, a) => {
                            acc[a.alimentos.id] = a.quantidade;
                            return acc;
                        }, {});

                        console.log(`IDs para ${ref}:`, idsAlimentos);

                        console.log(`virtual-${ref}${i}`);
                        document.getElementById(`virtual-${ref.toLowerCase()}${i}`).setValue(idsAlimentos);

                        let contador = 0;
                        idsAlimentos.forEach(async (a) => {
                            console.log(a)
                            console.log(alimentosMap[a])
                            await recriarLabels2(a, document.getElementById(`virtual-${ref.toLowerCase()}${i}`), +alimentosMap[a]);
                            contador++
                        });

                    });

                });
            });
            console.log('teste1')
            carregarAlimentos(idUser)
        }



        function saveChangesocial() {
            const token = localStorage.getItem("token");
            console.log(token)

            const userData = {
                Instagram: document.getElementById("instagram").value,
            };

            console.log(userData)

            fetch("/update/user/social", {
                method: "PUT",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(userData)
            })
                .then(async response => {
                    const json = await response.json();

                    if (!response.ok) {
                        let errorMessage = "Erro ao salvar";

                        if (json.error) {
                            errorMessage = json.error;
                        } else if (json.errors) {
                            const firstErrorKey = Object.keys(json.errors)[0];
                            if (json.errors[firstErrorKey] && json.errors[firstErrorKey].length > 0) {
                                errorMessage = json.errors[firstErrorKey][0];
                            }
                        }

                        throw new Error(errorMessage);
                    }
                    alert("Alterações salvas com sucesso! \nFaça Login novamente");
                    logout(); // Recarrega as informações no modal
                })
                .catch(error => {
                    console.error("Erro ao salvar alterações:", error);
                    alert("Erro ao salvar alterações.");
                });
        }

        function loadContent() {
            const token = localStorage.getItem("token");
            if (!token) {
                window.location.href = "/login";
                return;
            }
            // Chama a requisição para preencher o modal com os dados do usuário
            fetch("/user/yourself", {
                method: "GET",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(user => {
                    if (user) {
                        // Preenche os campos do modal com os dados do usuário
                        document.getElementById("name").value = user.nome;
                        document.getElementById("email").value = user.email;
                        document.getElementById("phone").value = user.telefone || '';
                        document.getElementById("instagram").value = user.instagram;
                        document.getElementById("sex").value = user.sexo || '';
                        document.getElementById("idade").value = user.idade || '';

                        if (user.foto) {
                            document.getElementById("profileImage").src = user.foto;
                        }
                    }
                })
                .catch(error => {
                    console.error("Erro ao carregar dados do usuário:", error);
                });
        }

        async function carregarLayouts() {
            const token = localStorage.getItem('token');

            try {
                const response = await fetch('/Layouts', {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Erro ao buscar layouts');
                }

                const layouts = await response.json();
                layoutsNutri = layouts
                console.log(layoutsNutri);

                VirtualSelect.init({
                    ele: '#select-layout',
                    options: layoutsNutri.map(layout => ({
                        label: layout.name,
                        value: layout.id
                    })),
                    search: true,       // Habilita busca
                    placeholder: "Escolha um layout...",
                    noOptionsText: "Nenhum layout encontrado",
                    searchPlaceholderText: "Buscar layout...",
                });
                const listaLayouts = document.getElementById('listaLayouts');
                listaLayouts.innerHTML = ''; // Limpar qualquer conteúdo anterior

                layouts.forEach(layout => {
                    // Criar botão para cada layout
                    const button = document.createElement('button');
                    button.className = 'list-group-item list-group-item-action';
                    button.textContent = layout.name;

                    // Quando clicar no botão, abrir um novo modal para mostrar detalhes
                    button.addEventListener('click', () => {
                        abrirDetalhesLayout(layout);
                    });

                    listaLayouts.appendChild(button);
                });

            } catch (error) {
                console.error('Erro:', error);
            }
        }

        function abrirDetalhesLayout(layout) {
            // Criar conteúdo detalhado do layout
            const detalhes = `
            <div class="modal fade" id="modalDetalhesLayout" tabindex="-1" aria-labelledby="modalDetalhesLayoutLabel" aria-hidden="true">
              <div class="modal-dialog modal-lg">
                <div class="modal-content">

                  <div class="modal-header">
                    <h5 class="modal-title" id="modalDetalhesLayoutLabel">${layout.name}</h5>
                  </div>

                  <div class="modal-body">
                    ${gerarRefeicao('Café da Manhã', layout.cafe)}
                    ${gerarRefeicao('Almoço', layout.almoco)}
                    ${gerarRefeicao('Café da Tarde', layout.cafeDT)}
                    ${gerarRefeicao('Janta', layout.janta)}
                  </div>

                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                  </div>

                </div>
              </div>
            </div>
          `;

            // Remover qualquer modal anterior de detalhes
            const modalAnterior = document.getElementById('modalDetalhesLayout');
            if (modalAnterior) {
                modalAnterior.remove();
            }

            // Adicionar o novo modal no final do body
            document.body.insertAdjacentHTML('beforeend', detalhes);

            // Abrir o novo modal
            const modal = new bootstrap.Modal(document.getElementById('modalDetalhesLayout'));
            modal.show();
        }

        function gerarRefeicao(nomeRefeicao, itens) {
            if (!itens || itens.length === 0) {
                return `<div class="refeicao"><h5>${nomeRefeicao}</h5><p>Sem itens.</p></div>`;
            }

            const alimentosHTML = itens.map(item => `
            <div class="mb-3">
              <strong>${item.alimentos.nome}</strong><br>
              Quantidade: ${item.quantidade}g<br>
              Calorias: ${item.alimentos.calorias} kcal<br>
            </div>
          `).join('');

            return `
            <div class="refeicao">
              <h5>${nomeRefeicao}</h5>
              ${alimentosHTML}
            </div>
          `;
        }

        async function AbrirLayout() {
            const modal = new bootstrap.Modal(document.getElementById('modalLayouts'));
            modal.show();
        }


        document.addEventListener("DOMContentLoaded", function () {
            VirtualSelect.init({
                ele: 'select[name="alimentos"]', // <- substitua pelo seletor correto
                hideClearButton: true,
                search: true,
                multiple: true,
                maxWidth: "600px"
            });


            // Recupera o idUser do localStorage
            const idUser = localStorage.getItem('idUser');

            const toggleButton = document.getElementById("toggleDarkMode");
            const body = document.body;

            if (localStorage.getItem("dark-mode") === "enabled") {
                body.classList.add("dark-mode");
                toggleButton.innerHTML = '<i class="fas fa-sun"></i>';
            }

            toggleButton.addEventListener("click", function () {
                body.classList.toggle("dark-mode");

                if (body.classList.contains('dark-mode')) {
                    localStorage.setItem('dark-mode', 'enabled');
                    toggleButton.innerHTML = '<i class="fas fa-sun"></i>';
                } else {
                    localStorage.setItem('dark-mode', 'disabled');
                    toggleButton.innerHTML = '<i class="fas fa-moon"></i>';
                }
            });

            document.body.addEventListener('click', async function (event) {
                if (event.target.classList.contains('btn-ver-sintomas')) {
                    const idUser = event.target.getAttribute('data-id');
                    const token = localStorage.getItem('token'); // ou onde você armazena o JWT
                    const listaSintomas = document.getElementById('listaSintomas');

                    listaSintomas.innerHTML = '<li class="list-group-item">Carregando...</li>';

                    try {
                        const response = await fetch(`/pegarSintomas/${idUser}`, {
                            method: 'GET',
                            headers: {
                                'Authorization': `Bearer ${token}`
                            }
                        });

                        const sintomas = await response.json();
                        listaSintomas.innerHTML = '';

                        if (Array.isArray(sintomas) && sintomas.length > 0) {
                            sintomas.forEach(s => {
                                const dias = s.dias && s.dias.length ? s.dias.join(', ') : 'Nenhum dia informado';
                                listaSintomas.innerHTML += `
                                        <li class=" list-group-sintomas d-flex row">
                                            <strong>${s.sintomaDescricao}</strong><br>
                                            <small><em>Dias: ${dias}</em></small>
                                        </li>
                                    `;
                            });
                        } else {
                            listaSintomas.innerHTML = '<li class="list-group-item">Nenhum sintoma encontrado.</li>';
                        }
                    } catch (error) {
                        console.error("Erro ao buscar sintomas:", error);
                        listaSintomas.innerHTML = '<li class="list-group-item text-danger">Erro ao carregar sintomas.</li>';
                    }
                }
            });

            loadContent();
            carregarLayouts();
            carregarComidas();
        });

        async function carregarComidas() {
            const token = localStorage.getItem("token");

            fetch("/alimentos/getAlimentos", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Erro HTTP: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Alimentos recebidos:", data);

                    let selectAlimentoa = document.getElementById('virtual-cafe');
                    let selectAlimentob = document.getElementById('virtual-almoco');
                    let selectAlimentoc = document.getElementById('virtual-cafedt');
                    let selectAlimentod = document.getElementById('virtual-janta');

                    if (selectAlimentoa && selectAlimentob && selectAlimentoc && selectAlimentod) {
                        console.log("Inicializando VirtualSelect...");

                        // Se já existe um VirtualSelect, destruí-lo antes de recriar
                        if (selectAlimentoa.virtualSelect) {
                            selectAlimentoa.virtualSelect.destroy();
                        }
                        if (selectAlimentob.virtualSelect) {
                            selectAlimentob.virtualSelect.destroy();
                        }
                        if (selectAlimentoc.virtualSelect) {
                            selectAlimentoc.virtualSelect.destroy();
                        }
                        if (selectAlimentod.virtualSelect) {
                            selectAlimentod.virtualSelect.destroy();
                        }

                        // Criar um array de opções para o VirtualSelect
                        let options = data.map(alimento => ({
                            value: alimento.id,
                            label: alimento.nome
                        }));

                        // Inicializa o VirtualSelect para todos os elementos, incluindo os itens desabilitados
                        VirtualSelect.init({
                            ele: selectAlimentoa,
                            search: true,
                            multiple: true,
                            hideClearButton: true,
                            maxWidth: "600px",
                            options: options,
                        });

                        VirtualSelect.init({
                            ele: selectAlimentob,
                            search: true,
                            multiple: true,
                            hideClearButton: true,
                            maxWidth: "600px",
                            options: options,
                        });

                        VirtualSelect.init({
                            ele: selectAlimentoc,
                            search: true,
                            multiple: true,
                            hideClearButton: true,
                            maxWidth: "600px",
                            options: options,
                        });

                        VirtualSelect.init({
                            ele: selectAlimentod,
                            search: true,
                            multiple: true,
                            hideClearButton: true,
                            maxWidth: "600px",
                            options: options,
                        });

                        $('#virtual-cafe').on('beforeClose', function () {
                            const selecionados = selectAlimentoa.value; // Pega os valores selecionados
                            console.log("Alimentos selecionados (café):", selecionados);
                            recriarLabels(selecionados, this);
                        });

                        $('#virtual-almoco').on('beforeClose', function () {
                            const selecionados = selectAlimentob.value; // Pega os valores selecionados
                            console.log("Alimentos selecionados (almoço):", selecionados);
                            recriarLabels(selecionados, this);
                        });

                        $('#virtual-cafedt').on('beforeClose', function () {
                            const selecionados = selectAlimentoc.value; // Pega os valores selecionados
                            console.log("Alimentos selecionados (café da tarde):", selecionados);
                            recriarLabels(selecionados, this);
                        });

                        $('#virtual-janta').on('beforeClose', function () {
                            const selecionados = selectAlimentod.value; // Pega os valores selecionados
                            console.log("Alimentos selecionados (janta):", selecionados);
                            recriarLabels(selecionados, this);
                        });
                    }
                }).catch(error => console.error("Erro ao carregar alimentos:", error));
        }

        async function enviaLayout() {
            const refeicoes = ["cafe", "almoco", "cafedt", "janta"];
            const layout = {
                Cafe: [],
                Almoco: [],
                CafeDT: [],
                Janta: []
            };

            refeicoes.forEach(ref => {
                const divRefeicao = document.querySelector(`#modal-${ref}-layout`);
                const inputs = divRefeicao.querySelectorAll("input");

                const alimentos = Array.from(inputs).map(input => input.value.trim()).filter(val => val !== "");
                if (alimentos.length > 0) {
                    let alimentoInt = alimentos[0].split(",");
                    alimentos.shift();
                    for (var i = 0; i > alimentoInt.length; i++) {
                        alimentoInt[i] = parseInt(alimentoInt[i]);
                    }
                    if (!isNaN(alimentoInt[0])) {
                        switch (ref) {
                            case "cafe":
                                alimentos.forEach((alimento, index) => {
                                    layout.Cafe.push({ Key: alimentoInt[index], Value: alimento });
                                })
                                break;
                            case "almoco":
                                alimentos.forEach((alimento, index) => {
                                    layout.Almoco.push({ Key: alimentoInt[index], Value: alimento });
                                })
                                break;
                            case "cafedt":
                                alimentos.forEach((alimento, index) => {
                                    layout.CafeDT.push({ Key: alimentoInt[index], Value: alimento });
                                })
                                break;
                            case "janta":
                                alimentos.forEach((alimento, index) => {
                                    layout.Janta.push({ Key: alimentoInt[index], Value: alimento });
                                })
                                break;
                        }
                    }
                }

            });


            console.log(layout);


            const token = localStorage.getItem("token");

            const sendDieta = {
                Name: document.getElementById('nomeLayout').value,
                Dietas: layout
            };

            try {
                const response = await fetch('/enviarLayout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(sendDieta)
                });

                if (!response.ok) throw new Error(`Erro: ${response.status}`);
                console.log('Dieta enviada com sucesso:');
                location.reload();
            } catch (error) {
                console.error('Erro ao enviar dieta:', error);
            }
        }

        function carregarAlimentos(idUser) {
            const token = localStorage.getItem("token");
            const userLogado = localStorage.getItem("usuarioId");

            console.log("ID do usuário recebido:", idUser);
            console.log("ID do usuário logado:", userLogado);

            if (!token || !userLogado) {
                console.error("Usuário não autenticado! O token ou usuário não foram encontrados.");
                return;
            }

            // Primeiro, buscar todos os alimentos disponíveis
            fetch("/alimentos/getAlimentos", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Erro HTTP: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("Alimentos recebidos:", data);


                    // Buscar os alimentos já selecionados pelo usuário logado (para verificar permissões)
                    fetch(`/alimentos/getAlimentosUsuario/${userLogado}`, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json",
                            "Access-Control-Allow-Origin": "*",
                            "Authorization": `Bearer ${token}`
                        }
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Erro ao obter alimentos do usuário: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(alimentosUsuario => {
                            let alimentosSelecionados = alimentosUsuario.map(alimento => alimento.id);

                            // Buscar os alimentos já selecionados pelo idUser (para bloquear no VirtualSelect)
                            fetch(`/alimentos/getAlimentosUsuario/${idUser}`, {
                                method: "GET",
                                headers: {
                                    "Content-Type": "application/json",
                                    "Access-Control-Allow-Origin": "*",
                                    "Authorization": `Bearer ${token}`
                                }
                            })
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error(`Erro ao obter alimentos do usuário: ${response.status}`);
                                    }
                                    return response.json();
                                })
                                .then(alimentosBloqueados => {
                                    let alimentosBloqueadosIds = alimentosBloqueados.map(alimento => alimento.id);
                                    for (var i = 0; i < 7; i++) {

                                        // Inicializar o VirtualSelect, se ainda não estiver
                                        let selectAlimento = document.getElementById('virtual-cafe' + i);
                                        let selectAlimento2 = document.getElementById('virtual-almoco' + i);
                                        let selectAlimento3 = document.getElementById('virtual-cafedt' + i);
                                        let selectAlimento4 = document.getElementById('virtual-janta' + i);

                                        if (selectAlimento && selectAlimento2 && selectAlimento3 && selectAlimento4) {
                                            console.log("Inicializando VirtualSelect...");

                                            // Se já existe um VirtualSelect, destruí-lo antes de recriar
                                            if (selectAlimento.virtualSelect) {
                                                selectAlimento.virtualSelect.destroy();
                                            }
                                            if (selectAlimento2.virtualSelect) {
                                                selectAlimento2.virtualSelect.destroy();
                                            }
                                            if (selectAlimento3.virtualSelect) {
                                                selectAlimento3.virtualSelect.destroy();
                                            }
                                            if (selectAlimento4.virtualSelect) {
                                                selectAlimento4.virtualSelect.destroy();
                                            }

                                            // Criar um array de opções para o VirtualSelect
                                            let options = data.map(alimento => ({
                                                value: alimento.id,
                                                label: alimento.nome
                                            }));

                                            // Inicializa o VirtualSelect para todos os elementos, incluindo os itens desabilitados
                                            VirtualSelect.init({
                                                ele: selectAlimento,
                                                search: true,
                                                multiple: true,
                                                hideClearButton: true,
                                                maxWidth: "600px",
                                                options: options,
                                                disabledOptions: alimentosBloqueadosIds // Desabilita os alimentos bloqueados
                                            });

                                            VirtualSelect.init({
                                                ele: selectAlimento2,
                                                search: true,
                                                multiple: true,
                                                hideClearButton: true,
                                                maxWidth: "600px",
                                                options: options,
                                                disabledOptions: alimentosBloqueadosIds
                                            });

                                            VirtualSelect.init({
                                                ele: selectAlimento3,
                                                search: true,
                                                multiple: true,
                                                hideClearButton: true,
                                                maxWidth: "600px",
                                                options: options,
                                                disabledOptions: alimentosBloqueadosIds
                                            });

                                            VirtualSelect.init({
                                                ele: selectAlimento4,
                                                search: true,
                                                multiple: true,
                                                hideClearButton: true,
                                                maxWidth: "600px",
                                                options: options,
                                                disabledOptions: alimentosBloqueadosIds
                                            });

                                            // Marcar os alimentos selecionados (se necessário)
                                            selectAlimento.setValue(alimentosSelecionados);
                                            selectAlimento2.setValue(alimentosSelecionados);
                                            selectAlimento3.setValue(alimentosSelecionados);
                                            selectAlimento4.setValue(alimentosSelecionados);

                                            // Usar 'beforeClose' para obter os valores após o fechamento do VirtualSelect
                                            $('#virtual-cafe' + i).on('beforeClose', function () {
                                                const selecionados = selectAlimento.value; // Pega os valores selecionados
                                                console.log("Alimentos selecionados (café):", selecionados);
                                                recriarLabels(selecionados, this);
                                            });

                                            $('#virtual-almoco' + i).on('beforeClose', function () {
                                                const selecionados = selectAlimento2.value; // Pega os valores selecionados
                                                console.log("Alimentos selecionados (almoço):", selecionados);
                                                recriarLabels(selecionados, this);
                                            });

                                            $('#virtual-cafedt' + i).on('beforeClose', function () {
                                                const selecionados = selectAlimento3.value; // Pega os valores selecionados
                                                console.log("Alimentos selecionados (café da tarde):", selecionados);
                                                recriarLabels(selecionados, this);
                                            });

                                            $('#virtual-janta' + i).on('beforeClose', function () {
                                                const selecionados = selectAlimento4.value; // Pega os valores selecionados
                                                console.log("Alimentos selecionados (janta):", selecionados);
                                                recriarLabels(selecionados, this);
                                            });
                                        }

                                    }
                                })
                                .catch(error => console.error("Erro ao carregar alimentos bloqueados:", error));
                        })
                        .catch(error => console.error("Erro ao carregar alimentos do usuário:", error));
                })
                .catch(error => console.error("Erro ao carregar alimentos:", error));
        }

        function recriarLabels(alimentosSelecionados, containerId, valor) {
            const token = localStorage.getItem("token");
            const container = containerId;

            if (!container) {
                console.warn(`Container com ID "${containerId}" não encontrado.`);
                return;
            }

            console.log(container);

            // Localiza ou cria um container de labels dentro do próprio container principal
            let labelsContainer = container.querySelector(".labels-container");

            if (!labelsContainer) {
                labelsContainer = document.createElement("div");
                labelsContainer.classList.add("labels-container");
                container.appendChild(labelsContainer);
            }

            // Limpa os labels existentes
            labelsContainer.innerHTML = "";

            // Impede processamento se não houver alimentos
            if (!alimentosSelecionados || alimentosSelecionados.length === 0) return;

            alimentosSelecionados.forEach((alimentoId, id) => {
                fetch(`/alimentos/getAlimentosid/${alimentoId}`, {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${token}`
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error("Erro ao carregar alimento");
                        }
                        return response.json();
                    })
                    .then(alimento => {
                        // Evita adicionar duplicados
                        if (labelsContainer.querySelector(`[data-id="${alimento.id}"]`)) return;

                        // Cria elementos
                        const label = document.createElement("label");
                        label.textContent = alimento.nome;
                        label.setAttribute("data-id", alimento.id);

                        const input = document.createElement("input");
                        input.type = "number";
                        input.name = `quantidade-${alimento.id}`;
                        input.placeholder = `Quantidade de ${alimento.nome} em gramas ou ml`;
                        if (Array.isArray(valor) && valor[id] != null) {
                            input.value = valor[id];
                        }
                        const alimentoContainer = document.createElement("div");
                        alimentoContainer.classList.add("alimento-container", "mb-3");

                        alimentoContainer.appendChild(label);
                        alimentoContainer.appendChild(input);
                        labelsContainer.appendChild(alimentoContainer);
                    })
                    .catch(error => {
                        console.error(`Erro ao carregar alimento com ID ${alimentoId}:`, error);
                    });
            });
        }

        function recriarLabels2(alimentosSelecionados, containerId, valor) {
            const token = localStorage.getItem("token");
            const container = containerId;

            if (!container) {
                console.warn(`Container com ID "${containerId}" não encontrado.`);
                return;
            }

            console.log(container);

            // Localiza ou cria um container de labels dentro do próprio container principal
            let labelsContainer = container.querySelector(".labels-container");

            if (!labelsContainer) {
                labelsContainer = document.createElement("div");
                labelsContainer.classList.add("labels-container");
                container.appendChild(labelsContainer);
            }

            // Limpa os labels existentes
            labelsContainer.innerHTML = "";

            if (alimentosSelecionados == 0) return;

            // Impede processamento se não houver alimentos


            fetch(`/alimentos/getAlimentosid/${alimentosSelecionados}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Erro ao carregar alimento");
                    }
                    return response.json();
                })
                .then((alimento) => {
                    // Evita adicionar duplicados
                    if (labelsContainer.querySelector(`[data-id="${alimento.id}"]`)) return;

                    // Cria elementos
                    const label = document.createElement("label");
                    label.textContent = alimento.nome;
                    label.setAttribute("data-id", alimento.id);

                    const input = document.createElement("input");
                    input.type = "number";
                    input.name = `quantidade-${alimento.id}`;
                    input.placeholder = `Quantidade de ${alimento.nome} em gramas ou ml`;
                    input.classList.add("form-control", "mb-2");
                    input.value = valor;

                    const alimentoContainer = document.createElement("div");
                    alimentoContainer.classList.add("alimento-container", "mb-3");

                    alimentoContainer.appendChild(label);
                    alimentoContainer.appendChild(input);
                    labelsContainer.appendChild(alimentoContainer);

                })
                .catch(error => {
                    console.error(`Erro ao carregar alimento com ID ${alimentoId}:`, error);
                });

            console.log("sim")
        }



        $('#EnviaDietaModal').on('show.bs.modal', function (event) {
            // @* carregarAlimentos(); *@

            var button = event.relatedTarget;
            var idUsuario = button.getAttribute('data-id');
            var modal = $(this);

            modal.find('.modal-body').data('usuario-id', idUsuario);
        });


        const titulos = ["Segunda-Feira", "Terça-Feira", "Quarta-Feira", "Quinta-Feira", "Sexta-Feira", "Sábado"];
        let dietaIndex = 0; // Para controlar qual título será exibido

        // async function AdicionarDieta() {
        //             if(dietaNumber < 7){
        //                 var modal = $('#EnviaDietaModal');
        //                     var idUsuario = modal.find('.modal-body').data('usuario-id'); // Recupera o ID do usuário
        //                     console.log(idUsuario);

        //                     const token = localStorage.getItem("token");
        //                     var titulo =document.getElementById('titulodieta')
        //                     let cafe = [];
        //                     let almoco = [];
        //                     let cafeDT = [];
        //                     let janta = [];
        //                     var modelcafe = document.getElementById('modal-cafe')
        //                     var modelalmoco = document.getElementById('modal-almoco')
        //                     var modelcafedt = document.getElementById('modal-cafedt')
        //                     var modeljanta = document.getElementById('modal-janta')
        //                     var divsAlimentoContainercafe = modelcafe.getElementsByClassName('alimento-container');
        //                     var divsAlimentoContaineralmoco = modelalmoco.getElementsByClassName('alimento-container');
        //                     var divsAlimentoContainercafedt = modelcafedt.getElementsByClassName('alimento-container');
        //                     var divsAlimentoContainerjanta = modeljanta.getElementsByClassName('alimento-container');

        //                     Array.from(divsAlimentoContainercafe).forEach(function(div) {
        //                         var input = div.querySelector('input');
        //                         var inputName = input.name;
        //                         var inputValue = input.value;

        //                         // Adiciona o par chave/valor ao array 'cafe'
        //                         cafe.push({ key: inputName, value: inputValue });
        //                     });
        //                     Array.from(divsAlimentoContaineralmoco).forEach(function(div) {
        //                         var input = div.querySelector('input');
        //                         var inputName = input.name;
        //                         var inputValue = input.value;

        //                         // Adiciona o par chave/valor ao array 'cafe'
        //                         almoco.push({ key: inputName, value: inputValue });
        //                     });
        //                     Array.from(divsAlimentoContainercafedt).forEach(function(div) {
        //                         var input = div.querySelector('input');
        //                         var inputName = input.name;
        //                         var inputValue = input.value;

        //                         // Adiciona o par chave/valor ao array 'cafe'
        //                         cafeDT.push({ key: inputName, value: inputValue });
        //                     });
        //                     Array.from(divsAlimentoContainerjanta).forEach(function(div) {
        //                         var input = div.querySelector('input');
        //                         var inputName = input.name;
        //                         var inputValue = input.value;

        //                         // Adiciona o par chave/valor ao array 'cafe'
        //                         janta.push({ key: inputName, value: inputValue });
        //                     });
        //                     const dieta = {
        //                         Cafe: cafe,
        //                         Almoco: almoco,
        //                         CafeDT: cafeDT,
        //                         Janta: janta
        //                     };

        //                     dietaList.push(dieta)
        //                     dietaNumber++;

        //                     titulo.textContent = titulos[dietaIndex];
        //                     dietaIndex = (dietaIndex + 1) % titulos.length;


        //                     document.getElementById("virtual-cafe").setValue(null);
        //                     document.getElementById('virtual-almoco').setValue(null);
        //                     document.getElementById('virtual-cafedt').setValue(null);
        //                     document.getElementById('virtual-janta').setValue(null);
        //                     recriarLabels(document.getElementById('virtual-cafe').value, 'virtual-cafe');
        //                     recriarLabels(document.getElementById('virtual-almoco').value, 'virtual-almoco');
        //                     recriarLabels(document.getElementById('virtual-cafedt').value, 'virtual-cafedt');
        //                     recriarLabels(document.getElementById('virtual-janta').value, 'virtual-janta');
        //     } else{
        //         alert("Você atingiu o limite máximo de 7 dietas.");
        //     }      
        // }

        async function EnviaDieta() {
            const dietaList = [];
            const dias = ["segunda", "terca", "quarta", "quinta", "sexta", "sabado", "domingo"];
            const refeicoes = ["cafe", "almoco", "cafedt", "janta"];

            dias.forEach(dia => {
                const dieta = {
                    Dia: dia,
                    Cafe: [],
                    Almoco: [],
                    CafeDT: [],
                    Janta: []
                };

                refeicoes.forEach(ref => {
                    const divRefeicao = document.querySelector(`#modal-${dia}-${ref}`);
                    const inputs = divRefeicao.querySelectorAll("input");

                    const alimentos = Array.from(inputs).map(input => input.value.trim()).filter(val => val !== "");
                    if (alimentos.length > 0) {
                        let alimentoInt = alimentos[0].split(",");
                        alimentos.shift();
                        for (var i = 0; i > alimentoInt.length; i++) {
                            alimentoInt[i] = parseInt(alimentoInt[i]);
                        }
                        if (!isNaN(alimentoInt[0])) {
                            switch (ref) {
                                case "cafe":
                                    alimentos.forEach((alimento, index) => {
                                        dieta.Cafe.push({ Key: alimentoInt[index], Value: alimento });
                                    })
                                    break;
                                case "almoco":
                                    alimentos.forEach((alimento, index) => {
                                        dieta.Almoco.push({ Key: alimentoInt[index], Value: alimento });
                                    })
                                    break;
                                case "cafedt":
                                    alimentos.forEach((alimento, index) => {
                                        dieta.CafeDT.push({ Key: alimentoInt[index], Value: alimento });
                                    })
                                    break;
                                case "janta":
                                    alimentos.forEach((alimento, index) => {
                                        dieta.Janta.push({ Key: alimentoInt[index], Value: alimento });
                                    })
                                    break;
                            }
                        }
                    }

                });

                if (
                    dieta.Cafe.length > 0 ||
                    dieta.Almoco.length > 0 ||
                    dieta.CafeDT.length > 0 ||
                    dieta.Janta.length > 0
                ) {
                    dietaList.push(dieta);
                }
            });


            const modal = $('#EnviaDietaModal');
            const idUsuario = parseInt(modal.find('.modal-body').data('usuario-id'));
            const token = localStorage.getItem("token");

            const sendDieta = {
                idUsuario: localStorage.getItem('idUsuario'),
                Dietas: dietaList,
                MetaPeso: document.getElementById('input-metaPeso').value,
            };

            try {
                const response = await fetch('/enviardieta', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(sendDieta)
                });

                if (!response.ok) throw new Error(`Erro: ${response.status}`);
                const data = await response.json();

                const alimentosTotais = {};

                data.dietas.forEach(dia => {
                    ['cafe', 'almoco', 'cafeDT', 'janta'].forEach(refeicao => {
                        dia[refeicao].forEach(item => {
                            const alimentoNome = item.alimentos.nome;
                            const quantidade = item.quantidade;

                            if (!alimentosTotais[alimentoNome]) {
                                alimentosTotais[alimentoNome] = 0; // Inicializa a quantidade no primeiro encontro
                            }

                            alimentosTotais[alimentoNome] += quantidade; // Soma a quantidade para o alimento encontrado
                        });
                    });
                });

                console.log(alimentosTotais);
                const base642 = await gerarPDFDietaNutricionista2(alimentosTotais);
                const base64 = await gerarPDFDietaNutricionista(data);
                console.log('Dieta enviada com sucesso:', data);
                try {
                    console.log(dietaList);


                    const emailObj = {
                        idusuario: localStorage.getItem('idUsuario'),
                        titulo: "Uma nova dieta foi enviada",
                        body: "Olá, Seu nutricionista acabou de enviar mais uma dieta para você!",
                        anexoBase64: base64, // PDF em base64
                        nomeArquivo: "Dieta.pdf"
                    };

                    const emailObj2 = {
                        idusuario: localStorage.getItem('idUsuario'),
                        titulo: "Sua lista de compras foi enviada",
                        body: "Confira a sua lista de compras!",
                        anexoBase64: base642, // PDF em base64
                        nomeArquivo: "Compras.pdf"
                    };

                    const response = await fetch('/EnviaEmailAnexo', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify(emailObj)
                    });

                    if (!response.ok) throw new Error(`Erro: ${response.status}`);
                    console.log('Email enviado com sucesso');
                    const response2 = await fetch('/EnviaEmailAnexo', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify(emailObj2)
                    });

                    if (!response.ok) throw new Error(`Erro: ${response.status}`);
                    console.log('Email enviado com sucesso');
                } catch (error) {
                    console.error('Erro ao enviar dieta:', error);
                }
            } catch (error) {
                console.error('Erro ao enviar dieta:', error);
            }

        }

        async function gerarPDFDietaNutricionista(dietaResponse) {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            const fundo = hexToRgb("#F5F5DC");

            function hexToRgb(hex) {
                const bigint = parseInt(hex.replace("#", ""), 16);
                return {
                    r: (bigint >> 16) & 255,
                    g: (bigint >> 8) & 255,
                    b: bigint & 255
                };
            }

            const desenharFundo = () => {
                doc.setFillColor(fundo.r, fundo.g, fundo.b);
                doc.rect(0, 0, 210, 297, 'F');
                doc.setDrawColor(150, 0, 0);
                doc.setLineWidth(0.5);
                doc.rect(5, 5, 200, 287);
                doc.setLineWidth(0.2);
                doc.rect(7, 7, 196, 283);
            };

            desenharFundo();

            let y = 20;

            doc.setFont("Helvetica", "bold");
            doc.setFontSize(16);
            doc.setTextColor(80, 30, 30);
            doc.text("Plano Semanal de Dieta", 105, y, { align: "center" });
            y += 12;

            dietaResponse.dietas.forEach((diaObj, index) => {
                const dia = diaObj.dia.toUpperCase();
                doc.setFontSize(14);
                doc.setFont("helvetica", "bold");
                doc.text(`${dia}`, 10, y);
                y += 7;

                const refeicoes = {
                    "Café da manhã": diaObj.cafe,
                    "Almoço": diaObj.almoco,
                    "Café da Tarde": diaObj.cafeDT,
                    "Janta": diaObj.janta
                };

                doc.setFontSize(11);
                for (const [refeicao, alimentos] of Object.entries(refeicoes)) {
                    if (!alimentos || alimentos.length === 0) continue;

                    doc.setFont("helvetica", "bold");
                    doc.text(`  ${refeicao}:`, 10, y);
                    y += 5;

                    doc.setFont("helvetica", "normal");
                    alimentos.forEach(({ alimentos, quantidade }) => {
                        const texto = `    • ${alimentos.nome} (${quantidade}g) - ${alimentos.calorias}kcal, ${alimentos.carboidratos}g carb, ${alimentos.proteinas}g prot, ${alimentos.gorduras}g gord.`;
                        doc.text(texto, 10, y);
                        y += 5;

                        if (y > 270) {
                            doc.addPage();
                            y = 15;
                        }
                    });

                    y += 3;
                }

                y += 5;
                if (y > 270 && index !== dietaResponse.dietas.length - 1) {
                    doc.addPage();
                    y = 15;
                }
            });

            return doc.output('datauristring'); // retorna base64
        }

        async function gerarPDFDietaNutricionista2(dietaResponse) {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            const fundo = hexToRgb("#F5F5DC");

            function hexToRgb(hex) {
                const bigint = parseInt(hex.replace("#", ""), 16);
                return {
                    r: (bigint >> 16) & 255,
                    g: (bigint >> 8) & 255,
                    b: bigint & 255
                };
            }

            const desenharFundo = () => {
                doc.setFillColor(fundo.r, fundo.g, fundo.b);
                doc.rect(0, 0, 210, 297, 'F');
                doc.setDrawColor(150, 0, 0);
                doc.setLineWidth(0.5);
                doc.rect(5, 5, 200, 287);
                doc.setLineWidth(0.2);
                doc.rect(7, 7, 196, 283);
            };

            desenharFundo();

            let y = 20;

            doc.setFont("Helvetica", "bold");
            doc.setFontSize(16);
            doc.setTextColor(80, 30, 30);
            doc.text("Lista de Compra Semanal da Dieta", 105, y, { align: "center" });
            y += 12;

            doc.setFont("Helvetica", "normal");
            doc.setFontSize(12);
            doc.setTextColor(0, 0, 0);

            // Iterando sobre o objeto dietaResponse
            Object.keys(dietaResponse).forEach((alimento) => {
                const quantidade = dietaResponse[alimento];
                doc.text(`${alimento.charAt(0).toUpperCase() + alimento.slice(1)}: ${quantidade} g/ml`, 10, y);
                y += 8;

                // Verifica se o conteúdo não ultrapassa a página
                if (y > 270) {
                    doc.addPage();
                    y = 20;
                }
            });

            return doc.output('datauristring'); // retorna base64
        }






        function salvarAlimentos() {
            const token = localStorage.getItem("token");
            const usuarioId = localStorage.getItem("usuarioId");

            if (!token || !usuarioId) {
                console.error("Usuário não autenticado!");
                document.getElementById("mensagem").innerText = "Usuário não autenticado!";
                return;
            }

            const alimento = document.getElementById("inputAlimento").value.trim();

            if (alimento) {
                fetch('/EnviarIngrediente', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`  // Envia o token no cabeçalho
                    },
                    body: JSON.stringify({
                        ingrediente: alimento
                    })
                })
                    .then(response => {
                        if (response.ok) {
                            return response.json();
                        }
                        throw new Error('Erro ao salvar o alimento');
                    })
                    .then(data => {
                        // Exibe os dados recebidos abaixo do botão "Salvar"
                        const dadosRecebidosDiv = document.getElementById("dadosRecebidos");

                        const ingrediente = {
                            nome: alimento.toLowerCase(),
                            calorias: data.Calorias,
                            carboidratos: data.Carboidratos,
                            gorduras: data.Gorduras,
                            proteinas: data.Proteinas,
                            vitaminaseminerais: data["Vitaminas e Minerais"]
                        };

                        window.ingredienteAtual = ingrediente;

                        // Formata os dados recebidos em texto
                        const textoRecebido = `
                        <p><strong>Calorias:</strong> ${data.Calorias} kcal</p>
                        <p><strong>Carboidratos:</strong> ${data.Carboidratos} g</p>
                        <p><strong>Proteínas:</strong> ${data.Proteinas} g</p>
                        <p><strong>Gorduras:</strong> ${data.Gorduras} g</p>
                        <p><strong>Vitaminas e Minerais:</strong> ${data["Vitaminas e Minerais"]}</p>
                        <button class="btn-primary" onclick="salvarAlimentosBanco()">Salvar</button>
                        <button class="btn-secondary" onclick="cancelarAlimentosBanco()">Cancelar</button>
                    `;



                        // Insere os dados na div
                        dadosRecebidosDiv.innerHTML = textoRecebido;
                        dadosRecebidosDiv.style.display = "block";  // Torna visível a div com os dados
                    })
                    .catch(error => {
                        console.error("Erro ao enviar a requisição:", error);
                        alert("Erro ao adicionar o alimento!");
                    });
            } else {
                alert("Por favor, digite o nome do alimento!");
            }
        }

        async function salvarAlimentosBanco() {

            try {
                // Obtém os dados armazenados globalmente
                if (!window.ingredienteAtual) {
                    alert("Erro: Nenhum ingrediente para salvar.");
                    return;
                }

                console.log(window.ingredienteAtual);

                const response = await fetch("/SalvarIngrediente", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": "Bearer " + localStorage.getItem("token")
                    },
                    body: JSON.stringify(window.ingredienteAtual)
                });

                if (response.ok) {
                    alert("Alimento salvo com sucesso!");
                    cancelarAlimentosBanco();
                } else {
                    alert("Alimento já cadastrado.");
                    cancelarAlimentosBanco();
                }
            } catch (error) {
                alert("Erro ao conectar com o servidor.");
            }
        }

        function cancelarAlimentosBanco() {
            const dadosRecebidosDiv = document.getElementById("dadosRecebidos");
            dadosRecebidosDiv.innerHTML = "";
            dadosRecebidosDiv.style.display = "none";
            window.ingredienteAtual = null;
        }
        function toggleInputs(id) {
            const section = document.getElementById(id);
            const button = document.querySelector(`[onclick="toggleInputs('${id}')"]`);

            if (section.classList.contains('hidden')) {
                section.classList.remove('hidden');
                button.textContent = 'Ocultar';
            } else {
                section.classList.add('hidden');
                button.textContent = 'Mostrar';
            }
        }

    </script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
               /*!
        * Virtual Select v1.0.47
        * https://sa-si-dev.github.io/virtual-select
        * Licensed under MIT (https://github.com/sa-si-dev/virtual-select/blob/master/LICENSE)
        */!function () { "use strict"; function e(e) { return function (e) { if (Array.isArray(e)) return t(e) }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || function (e, i) { if (e) { if ("string" == typeof e) return t(e, i); var o = {}.toString.call(e).slice(8, -1); return "Object" === o && e.constructor && (o = e.constructor.name), "Map" === o || "Set" === o ? Array.from(e) : "Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o) ? t(e, i) : void 0 } }(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function t(e, t) { (null == t || t > e.length) && (t = e.length); for (var i = 0, o = Array(t); i < t; i++)o[i] = e[i]; return o } function i(e) { return i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, i(e) } function o(e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, s(o.key), o) } } function s(e) { var t = function (e, t) { if ("object" != i(e) || !e) return e; var o = e[Symbol.toPrimitive]; if (void 0 !== o) { var s = o.call(e, t || "default"); if ("object" != i(s)) return s; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === t ? String : Number)(e) }(e, "string"); return "symbol" == i(t) ? t : t + "" } var n = function () { return t = function e() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e) }, n = [{ key: "getString", value: function (e) { return e || 0 === e ? e.toString() : "" } }, { key: "convertToBoolean", value: function (e) { return !0 === e || "true" === e || !1 !== e && "false" !== e && arguments.length > 1 && void 0 !== arguments[1] && arguments[1] } }, { key: "isEmpty", value: function (e) { var t = !1; return e ? Array.isArray(e) ? 0 === e.length && (t = !0) : "object" === i(e) && 0 === Object.keys(e).length && (t = !0) : t = !0, t } }, { key: "isNotEmpty", value: function (e) { return !this.isEmpty(e) } }, { key: "removeItemFromArray", value: function (t, i) { var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; if (!Array.isArray(t) || !t.length) return t; var s = o ? e(t) : t, n = s.indexOf(i); return -1 !== n && s.splice(n, 1), s } }, { key: "removeArrayEmpty", value: function (e) { return Array.isArray(e) && e.length ? e.filter((function (e) { return !!e })) : [] } }, { key: "getRandomInt", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i = Math.ceil(t), o = Math.floor(e); return Math.floor(Math.random() * (o - i - 1)) + i } }, { key: "regexEscape", value: function (e) { return e.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&") } }, { key: "normalizeString", value: function (e) { return e.normalize("NFD").replace(/[^\w]/g, "") } }, { key: "willTextOverflow", value: function (e, t) { var i = document.createElement("div"); i.style.position = "absolute", i.style.visibility = "hidden", i.style.whiteSpace = "nowrap", i.style.fontSize = window.getComputedStyle(e).fontSize, i.style.fontFamily = window.getComputedStyle(e).fontFamily, i.textContent = t, document.body.appendChild(i); var o = i.clientWidth; return document.body.removeChild(i), o > e.clientWidth } }, { key: "replaceDoubleQuotesWithHTML", value: function (e) { return e.replace(/"/g, "&quot;") } }, { key: "containsHTML", value: function (e) { return /<[a-z][\s\S]*>/i.test(e) } }, { key: "containsHTMLorJS", value: function (e) { return /<([a-z]+)[\s\S]*?>|on\w+="[^"]*"/i.test(e) } }], (s = null) && o(t.prototype, s), n && o(t, n), Object.defineProperty(t, "prototype", { writable: !1 }), t; var t, s, n }(); function r(e) { return r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, r(e) } function a(e, t) { return function (e) { if (Array.isArray(e)) return e }(e) || function (e, t) { var i = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"]; if (null != i) { var o, s, n, r, a = [], l = !0, u = !1; try { if (n = (i = i.call(e)).next, 0 === t) { if (Object(i) !== i) return; l = !1 } else for (; !(l = (o = n.call(i)).done) && (a.push(o.value), a.length !== t); l = !0); } catch (e) { u = !0, s = e } finally { try { if (!l && null != i.return && (r = i.return(), Object(r) !== r)) return } finally { if (u) throw s } } return a } }(e, t) || u(e, t) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function l(e) { return function (e) { if (Array.isArray(e)) return c(e) }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || u(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function u(e, t) { if (e) { if ("string" == typeof e) return c(e, t); var i = {}.toString.call(e).slice(8, -1); return "Object" === i && e.constructor && (i = e.constructor.name), "Map" === i || "Set" === i ? Array.from(e) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? c(e, t) : void 0 } } function c(e, t) { (null == t || t > e.length) && (t = e.length); for (var i = 0, o = Array(t); i < t; i++)o[i] = e[i]; return o } function p(e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, h(o.key), o) } } function h(e) { var t = function (e, t) { if ("object" != r(e) || !e) return e; var i = e[Symbol.toPrimitive]; if (void 0 !== i) { var o = i.call(e, t || "default"); if ("object" != r(o)) return o; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === t ? String : Number)(e) }(e, "string"); return "symbol" == r(t) ? t : t + "" } var d = function () { function e() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e) } return t = e, o = [{ key: "addClass", value: function (t, i) { if (t) { var o = i.split(" "); e.getElements(t).forEach((function (e) { var t; (t = e.classList).add.apply(t, l(o)) })) } } }, { key: "removeClass", value: function (t, i) { if (t) { var o = i.split(" "); e.getElements(t).forEach((function (e) { var t; (t = e.classList).remove.apply(t, l(o)) })) } } }, { key: "toggleClass", value: function (t, i, o) { var s; t && (void 0 !== o && (s = Boolean(o)), e.getElements(t).forEach((function (e) { e.classList.toggle(i, s) }))) } }, { key: "hasClass", value: function (e, t) { return !!e && e.classList.contains(t) } }, { key: "hasEllipsis", value: function (e) { return !!e && e.scrollWidth > e.offsetWidth } }, { key: "getData", value: function (e, t, i) { if (e) { var o = e ? e.dataset[t] : ""; return "number" === i ? o = parseFloat(o) || 0 : "true" === o ? o = !0 : "false" === o && (o = !1), o } } }, { key: "setData", value: function (e, t, i) { e && (e.dataset[t] = i) } }, { key: "setAttr", value: function (e, t, i) { e && e.setAttribute(t, i) } }, { key: "setAttrFromEle", value: function (e, t, i, o) { var s = {}; i.forEach((function (t) { s[t] = e.getAttribute(t) })), i.forEach((function (e) { var i = s[e]; (i || -1 !== o.indexOf(e) && "" === i) && t.setAttribute(e, i) })) } }, { key: "setStyle", value: function (e, t, i) { e && (e.style[t] = i) } }, { key: "setStyles", value: function (e, t) { e && t && Object.keys(t).forEach((function (i) { e.style[i] = t[i] })) } }, { key: "setAria", value: function (e, t, i) { var o = t; "role" !== o && (o = "aria-".concat(o)), e.setAttribute(o, i) } }, { key: "getElements", value: function (e) { return e ? void 0 === e.forEach ? [e] : e : [] } }, { key: "getElementsBySelector", value: function () { var e, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, o = void 0 !== i ? i : document; return "" !== t && (e = o.querySelectorAll(t)), void 0 !== e ? Array.from(e) : [] } }, { key: "addEvent", value: function (t, i, o) { t && n.removeArrayEmpty(i.split(" ")).forEach((function (i) { e.getElements(t).forEach((function (e) { e.addEventListener(i, o) })) })) } }, { key: "dispatchEvent", value: function (t, i) { var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; if (t) { var s = e.getElements(t); setTimeout((function () { s.forEach((function (e) { e.dispatchEvent(new CustomEvent(i, { bubbles: o })) })) }), 0) } } }, { key: "getAttributesText", value: function (e) { var t = ""; return e ? (Object.entries(e).forEach((function (e) { var i = a(e, 2), o = i[0], s = i[1]; void 0 !== s && (t += " ".concat(o, '="').concat(s, '" ')) })), t) : t } }, { key: "convertPropToDataAttr", value: function (e) { return e ? "data-".concat(e).replace(/([A-Z])/g, "-$1").toLowerCase() : "" } }, { key: "changeTabIndex", value: function (t, i) { t ? e.getElements(t).forEach((function (e) { e.tabIndex = i })) : console.log(t, "Invalid element provided.") } }, { key: "removeEvent", value: function (t, i, o) { t && e.getElements(t).forEach((function (e) { e.removeEventListener(i, o) })) } }], (i = null) && p(t.prototype, i), o && p(t, o), Object.defineProperty(t, "prototype", { writable: !1 }), t; var t, i, o }(); function v(e, t) { var i = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); t && (o = o.filter((function (t) { return Object.getOwnPropertyDescriptor(e, t).enumerable }))), i.push.apply(i, o) } return i } function f(e) { for (var t = 1; t < arguments.length; t++) { var i = null != arguments[t] ? arguments[t] : {}; t % 2 ? v(Object(i), !0).forEach((function (t) { y(e, t, i[t]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(i)) : v(Object(i)).forEach((function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(i, t)) })) } return e } function y(e, t, i) { return (t = w(t)) in e ? Object.defineProperty(e, t, { value: i, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = i, e } function b(e) { return b = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, b(e) } function m(e, t) { return function (e) { if (Array.isArray(e)) return e }(e) || function (e, t) { var i = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"]; if (null != i) { var o, s, n, r, a = [], l = !0, u = !1; try { if (n = (i = i.call(e)).next, 0 === t) { if (Object(i) !== i) return; l = !1 } else for (; !(l = (o = n.call(i)).done) && (a.push(o.value), a.length !== t); l = !0); } catch (e) { u = !0, s = e } finally { try { if (!l && null != i.return && (r = i.return(), Object(r) !== r)) return } finally { if (u) throw s } } return a } }(e, t) || O(e, t) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function g(e) { return function (e) { if (Array.isArray(e)) return S(e) }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || O(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function O(e, t) { if (e) { if ("string" == typeof e) return S(e, t); var i = {}.toString.call(e).slice(8, -1); return "Object" === i && e.constructor && (i = e.constructor.name), "Map" === i || "Set" === i ? Array.from(e) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? S(e, t) : void 0 } } function S(e, t) { (null == t || t > e.length) && (t = e.length); for (var i = 0, o = Array(t); i < t; i++)o[i] = e[i]; return o } function x(e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, w(o.key), o) } } function w(e) { var t = function (e, t) { if ("object" != b(e) || !e) return e; var i = e[Symbol.toPrimitive]; if (void 0 !== i) { var o = i.call(e, t || "default"); if ("object" != b(o)) return o; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === t ? String : Number)(e) }(e, "string"); return "symbol" == b(t) ? t : t + "" } var k, C = { 13: "onEnterPress", 38: "onUpArrowPress", 40: "onDownArrowPress", 46: "onBackspaceOrDeletePress", 8: "onBackspaceOrDeletePress" }, E = ["autofocus", "disabled", "multiple", "required"], $ = ["autofocus", "class", "disabled", "id", "multiple", "name", "placeholder", "required"], A = ["additionalClasses", "additionalDropboxClasses", "additionalDropboxContainerClasses", "additionalToggleButtonClasses", "aliasKey", "allOptionsSelectedText", "allowNewOption", "alwaysShowSelectedOptionsCount", "alwaysShowSelectedOptionsLabel", "ariaLabelledby", "ariaLabelText", "ariaLabelClearButtonText", "autoSelectFirstOption", "clearButtonText", "descriptionKey", "disableAllOptionsSelectedText", "disableOptionGroupCheckbox", "disableSelectAll", "disableValidation", "dropboxWidth", "dropboxWrapper", "emptyValue", "enableSecureText", "focusSelectedOptionOnOpen", "hasOptionDescription", "hideClearButton", "hideValueTooltipOnSelectAll", "keepAlwaysOpen", "labelKey", "markSearchResults", "maxValues", "maxWidth", "minValues", "moreText", "noOfDisplayValues", "noOptionsText", "noSearchResultsText", "optionHeight", "optionSelectedText", "optionsCount", "optionsSelectedText", "popupDropboxBreakpoint", "popupPosition", "position", "search", "searchByStartsWith", "searchDelay", "searchFormLabel", "searchGroup", "searchNormalize", "searchPlaceholderText", "selectAllOnlyVisible", "selectAllText", "setValueAsArray", "showDropboxAsPopup", "showOptionsOnlyOnSearch", "showSelectedOptionsFirst", "showValueAsTags", "silentInitialValueSet", "textDirection", "tooltipAlignment", "tooltipFontSize", "tooltipMaxWidth", "updatePositionThrottle", "useGroupValue", "valueKey", "zIndex"], T = function () { function e(t) { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e); try { this.createSecureTextElements(), this.setProps(t), this.setDisabledOptions(t.disabledOptions), this.setOptions(t.options), this.render() } catch (e) { console.warn("Couldn't initiate Virtual Select"), console.error(e) } } return t = e, i = [{ key: "render", value: function () { if (this.$ele) { var e = this.uniqueId, t = "vscomp-wrapper", i = "vscomp-toggle-button", o = this.showValueAsTags ? "" : this.getTooltipAttrText(this.placeholder, !0, !0), s = this.getTooltipAttrText(this.clearButtonText), n = this.ariaLabelledby ? 'aria-labelledby="'.concat(this.ariaLabelledby, '"') : "", r = this.ariaLabelText ? 'aria-label="'.concat(this.ariaLabelText, '"') : "", a = this.ariaLabelClearButtonText ? 'aria-label="'.concat(this.ariaLabelClearButtonText, '"') : "", l = !1; this.additionalClasses && (t += " ".concat(this.additionalClasses)), this.additionalToggleButtonClasses && (i += " ".concat(this.additionalToggleButtonClasses)), this.multiple && (t += " multiple", this.disableSelectAll || (t += " has-select-all")), this.hideClearButton || (t += " has-clear-button"), this.keepAlwaysOpen ? (t += " keep-always-open", l = !0) : t += " closed", this.showAsPopup && (t += " show-as-popup"), this.hasSearch && (t += " has-search-input"), this.showValueAsTags && (t += " show-value-as-tags"), this.textDirection && (t += " text-direction-".concat(this.textDirection)), this.popupPosition && (t += " popup-position-".concat(this.popupPosition.toLowerCase())); var u = '<div id="vscomp-ele-wrapper-'.concat(e, '" class="vscomp-ele-wrapper ').concat(t, '" tabindex="0"\n        role="combobox" aria-haspopup="listbox" aria-controls="vscomp-dropbox-container-').concat(e, '"\n        aria-expanded="').concat(l, '" ').concat(n, " ").concat(r, '>\n        <input type="hidden" name="').concat(this.name, '" class="vscomp-hidden-input">\n        <div class="').concat(i, '">\n          <div class="vscomp-value" ').concat(o, ">\n            ").concat(this.placeholder, '\n          </div>\n          <div class="vscomp-arrow"></div>\n          <div class="vscomp-clear-button toggle-button-child" ').concat(s, ' \n          tabindex="0" ').concat(a, '>\n            <i class="vscomp-clear-icon"></i>\n          </div>\n        </div>\n\n        ').concat(this.renderDropbox({ wrapperClasses: t }), "\n      </div>"); this.$ele.innerHTML = u, this.$body = document.querySelector("body"), this.$wrapper = this.$ele.querySelector(".vscomp-wrapper"), this.hasDropboxWrapper ? (this.$allWrappers = [this.$wrapper, this.$dropboxWrapper], this.$dropboxContainer = this.$dropboxWrapper.querySelector(".vscomp-dropbox-container"), d.addClass(this.$dropboxContainer, "pop-comp-wrapper")) : (this.$allWrappers = [this.$wrapper], this.$dropboxContainer = this.$wrapper.querySelector(".vscomp-dropbox-container")), this.$toggleButton = this.$ele.querySelector(".vscomp-toggle-button"), this.$clearButton = this.$ele.querySelector(".vscomp-clear-button"), this.$valueText = this.$ele.querySelector(".vscomp-value"), this.$hiddenInput = this.$ele.querySelector(".vscomp-hidden-input"), this.$dropbox = this.$dropboxContainer.querySelector(".vscomp-dropbox"), this.$dropboxCloseButton = this.$dropboxContainer.querySelector(".vscomp-dropbox-close-button"), this.$dropboxContainerBottom = this.$dropboxContainer.querySelector(".vscomp-dropbox-container-bottom"), this.$dropboxContainerTop = this.$dropboxContainer.querySelector(".vscomp-dropbox-container-top"), this.$search = this.$dropboxContainer.querySelector(".vscomp-search-wrapper"), this.$optionsContainer = this.$dropboxContainer.querySelector(".vscomp-options-container"), this.$optionsList = this.$dropboxContainer.querySelector(".vscomp-options-list"), this.$options = this.$dropboxContainer.querySelector(".vscomp-options"), this.$noOptions = this.$dropboxContainer.querySelector(".vscomp-no-options"), this.$noSearchResults = this.$dropboxContainer.querySelector(".vscomp-no-search-results"), this.afterRenderWrapper() } } }, { key: "renderDropbox", value: function (e) { var t = e.wrapperClasses, i = "self" !== this.dropboxWrapper ? document.querySelector(this.dropboxWrapper) : null, o = "vscomp-dropbox"; this.additionalDropboxClasses && (o += " ".concat(this.additionalDropboxClasses)); var s = "vscomp-dropbox-container"; this.additionalDropboxContainerClasses && (s += " ".concat(this.additionalDropboxContainerClasses)); var n = '<div id="vscomp-dropbox-container-'.concat(this.uniqueId, '" role="listbox" class="').concat(s, '">\n        <div class="vscomp-dropbox-container-top" aria-hidden="true" tabindex="0">&nbsp;</div>\n        <div class="').concat(o, '">\n          <div class="vscomp-search-wrapper"></div>\n\n          <div class="vscomp-options-container">\n            <div class="vscomp-options-loader"></div>\n\n            <div class="vscomp-options-list">\n              <div class="vscomp-options"></div>\n            </div>\n          </div>\n\n          <div class="vscomp-options-bottom-freezer"></div>\n          <div class="vscomp-no-options">').concat(this.noOptionsText, '</div>\n          <div class="vscomp-no-search-results">').concat(this.noSearchResultsText, '</div>\n\n          <span class="vscomp-dropbox-close-button"><i class="vscomp-clear-icon"></i></span>\n        </div>\n        <div class="vscomp-dropbox-container-bottom" aria-hidden="true" tabindex="0">&nbsp;</div>\n      </div>'); if (i) { var r = document.createElement("div"); return this.$dropboxWrapper = r, this.hasDropboxWrapper = !0, r.innerHTML = n, i.appendChild(r), d.addClass(r, "vscomp-dropbox-wrapper ".concat(t)), "" } return this.hasDropboxWrapper = !1, n } }, { key: "renderOptions", value: function () { var e, t = this, i = "", o = this.getVisibleOptions(), s = "", r = "", a = !(!this.markSearchResults || !this.searchValue), l = this.labelRenderer, u = this.disableOptionGroupCheckbox, c = this.uniqueId, p = this.searchGroup, h = "function" == typeof l, d = n.convertToBoolean, v = ""; if (a && (e = new RegExp("(".concat(n.regexEscape(this.searchValue), ")(?!([^<]+)?>)"), "gi")), this.multiple && (s = '<span class="checkbox-icon"></span>'), this.allowNewOption) { var f = this.getTooltipAttrText("New Option"); r = '<span class="vscomp-new-option-icon" '.concat(f, "></span>") } o.forEach((function (o) { var n, f = o.index, y = "vscomp-option", b = t.getTooltipAttrText("", !0, !0), m = s, g = "", O = "", S = "", x = "", w = "-1", k = d(o.isSelected), C = ""; if (o.classNames && (y += " ".concat(o.classNames)), o.isFocused && (w = "0", y += " focused"), o.isDisabled && (y += " disabled", C = 'aria-disabled="true"'), o.isGroupTitle && (v = o.label, y += " group-title", u && (m = "")), k && (y += " selected"), o.isGroupOption) { var E = ""; y += " group-option", S = 'data-group-index="'.concat(o.groupIndex, '"'), o.customData ? (v = void 0 !== o.customData.group_name ? "".concat(o.customData.group_name, ", ") : "", E = void 0 !== o.customData.description ? " ".concat(o.customData.description, ",") : "", x = 'aria-label="'.concat(v, " ").concat(o.label, ", ").concat(E, '"')) : x = 'aria-label="'.concat(v, ", ").concat(o.label, '"') } n = h ? l(o) : o.label, o.description && (O = '<div class="vscomp-option-description" '.concat(b, ">").concat(o.description, "</div>")), o.isCurrentNew ? (y += " current-new", g += r) : !a || o.isGroupTitle && !p || (n = n.replace(e, "<mark>$1</mark>")), i += '<div role="option" aria-selected="'.concat(k, '" id="vscomp-option-').concat(c, "-").concat(f, '"\n          class="').concat(y, '" data-value="').concat(o.value, '" data-index="').concat(f, '" data-visible-index="').concat(o.visibleIndex, '"\n          tabindex=').concat(w, " ").concat(S, " ").concat(C, " ").concat(x, "\n        >\n          ").concat(m, '\n          <span class="vscomp-option-text" ').concat(b, ">\n            ").concat(n, "\n          </span>\n          ").concat(O, "\n          ").concat(g, "\n        </div>") })), v = "", this.$options.innerHTML = i, this.$visibleOptions = this.$options.querySelectorAll(".vscomp-option"), this.afterRenderOptions() } }, { key: "renderSearch", value: function () { if (this.hasSearchContainer) { var e = "", t = ""; this.multiple && !this.disableSelectAll && (e = '<span class="vscomp-toggle-all-button" tabindex="0" aria-label="'.concat(this.selectAllText, '">\n          <span class="checkbox-icon vscomp-toggle-all-checkbox"></span>\n          <span class="vscomp-toggle-all-label">').concat(this.selectAllText, "</span>\n        </span>")), this.hasSearch && (t = '<label for="vscomp-search-input-'.concat(this.uniqueId, '" class="vscomp-search-label"\n        id="vscomp-search-label-').concat(this.uniqueId, '"\n      >\n        ').concat(this.searchFormLabel, '\n      </label>\n      <input type="text" class="vscomp-search-input" placeholder="').concat(this.searchPlaceholderText, '"\n        id="vscomp-search-input-').concat(this.uniqueId, '">\n      <span class="vscomp-search-clear">&times;</span>')); var i = '<div class="vscomp-search-container">\n        '.concat(e, "\n        ").concat(t, "\n      </div>"); this.$search.innerHTML = i, this.$searchInput = this.$dropboxContainer.querySelector(".vscomp-search-input"), this.$searchClear = this.$dropboxContainer.querySelector(".vscomp-search-clear"), this.$toggleAllButton = this.$dropboxContainer.querySelector(".vscomp-toggle-all-button"), this.$toggleAllCheckbox = this.$dropboxContainer.querySelector(".vscomp-toggle-all-checkbox"), this.addEvent(this.$searchInput, "input", "onSearch"), this.addEvent(this.$searchClear, "click", "onSearchClear"), this.addEvent(this.$toggleAllButton, "click", "onToggleAllOptions"), this.addEvent(this.$dropboxContainerBottom, "focus", "onDropboxContainerTopOrBottomFocus"), this.addEvent(this.$dropboxContainerTop, "focus", "onDropboxContainerTopOrBottomFocus") } } }, { key: "addEvents", value: function () { this.addEvent(document, "click", "onDocumentClick"), this.addEvent(this.$allWrappers, "keydown", "onKeyDown"), this.addEvent(this.$toggleButton, "click", "onToggleButtonClick"), this.addEvent(this.$clearButton, "click keydown", "onClearButtonClick"), this.addEvent(this.$dropboxContainer, "click", "onDropboxContainerClick"), this.addEvent(this.$dropboxCloseButton, "click", "onDropboxCloseButtonClick"), this.addEvent(this.$optionsContainer, "scroll", "onOptionsScroll"), this.addEvent(this.$options, "click", "onOptionsClick"), this.addEvent(this.$options, "mouseover", "onOptionsMouseOver"), this.addEvent(this.$options, "touchmove", "onOptionsTouchMove"), this.addMutationObserver() } }, { key: "addEvent", value: function (e, t, i) { var o = this; e && n.removeArrayEmpty(t.split(" ")).forEach((function (t) { var s = "".concat(i, "-").concat(t), n = o.events[s]; n || (n = o[i].bind(o), o.events[s] = n), d.addEvent(e, t, n) })) } }, { key: "removeEvents", value: function () { this.removeEvent(document, "click", "onDocumentClick"), this.removeEvent(this.$allWrappers, "keydown", "onKeyDown"), this.removeEvent(this.$toggleButton, "click", "onToggleButtonClick"), this.removeEvent(this.$clearButton, "click keydown", "onClearButtonClick"), this.removeEvent(this.$dropboxContainer, "click", "onDropboxContainerClick"), this.removeEvent(this.$dropboxCloseButton, "click", "onDropboxCloseButtonClick"), this.removeEvent(this.$optionsContainer, "scroll", "onOptionsScroll"), this.removeEvent(this.$options, "click", "onOptionsClick"), this.removeEvent(this.$options, "mouseover", "onOptionsMouseOver"), this.removeEvent(this.$options, "touchmove", "onOptionsTouchMove"), this.removeMutationObserver() } }, { key: "removeEvent", value: function (e, t, i) { var o = this; e && n.removeArrayEmpty(t.split(" ")).forEach((function (t) { var s = "".concat(i, "-").concat(t), n = o.events[s]; n && d.removeEvent(e, t, n) })) } }, { key: "onDocumentClick", value: function (e) { var t = e.target.closest(".vscomp-wrapper"); t !== this.$wrapper && t !== this.$dropboxWrapper && this.isOpened() && this.closeDropbox() } }, { key: "onKeyDown", value: function (e) { var t = e.which || e.keyCode, i = C[t]; if (document.activeElement !== this.$searchInput || e.shiftKey || 9 !== t || (e.preventDefault(), this.focusFirstVisibleOption()), document.activeElement !== this.$toggleAllButton || 13 !== t) { if (27 === t || "Escape" === e.key) { var o = this.showAsPopup ? this.$wrapper : this.$dropboxWrapper; if ((document.activeElement === o || o.contains(document.activeElement)) && !this.keepAlwaysOpen) return void this.closeDropbox() } i && this[i](e) } else this.toggleAllOptions() } }, { key: "onEnterPress", value: function (e) { e.preventDefault(), this.isOpened() ? this.selectFocusedOption() : !1 === this.$ele.disabled && this.openDropbox() } }, { key: "onDownArrowPress", value: function (e) { e.preventDefault(), this.isOpened() ? this.focusOption({ direction: "next" }) : this.openDropbox() } }, { key: "onUpArrowPress", value: function (e) { e.preventDefault(), this.isOpened() ? this.focusOption({ direction: "previous" }) : this.openDropbox() } }, { key: "onBackspaceOrDeletePress", value: function (e) { e.target === this.$wrapper && (e.preventDefault(), this.selectedValues.length > 0 && this.reset()) } }, { key: "onToggleButtonClick", value: function (e) { var t = e.target; t.closest(".vscomp-value-tag-clear-button") ? this.removeValue(t.closest(".vscomp-value-tag")) : t.closest(".toggle-button-child") || this.toggleDropbox() } }, { key: "onClearButtonClick", value: function (e) { "click" === e.type ? this.reset() : "keydown" !== e.type || "Enter" !== e.code && "Space" !== e.code || (e.stopPropagation(), this.reset()) } }, { key: "onOptionsScroll", value: function () { this.setVisibleOptions() } }, { key: "onOptionsClick", value: function (e) { var t = e.target.closest(".vscomp-option"); t && !d.hasClass(t, "disabled") && (d.hasClass(t, "group-title") ? this.onGroupTitleClick(t) : this.selectOption(t, { event: e })) } }, { key: "onGroupTitleClick", value: function (e) { if (e && this.multiple && !this.disableOptionGroupCheckbox) { var t = !d.hasClass(e, "selected"); this.toggleGroupTitleCheckbox(e, t), this.toggleGroupOptions(e, t) } } }, { key: "onDropboxContainerClick", value: function (e) { e.target.closest(".vscomp-dropbox") || this.closeDropbox() } }, { key: "onDropboxCloseButtonClick", value: function () { this.closeDropbox() } }, { key: "onOptionsMouseOver", value: function (e) { var t = e.target.closest(".vscomp-option"); t && this.isOpened() && (d.hasClass(t, "disabled") || d.hasClass(t, "group-title") ? this.removeOptionFocus() : this.focusOption({ $option: t })) } }, { key: "onOptionsTouchMove", value: function () { this.removeOptionFocus() } }, { key: "onSearch", value: function (e) { e.stopPropagation(), this.setSearchValue(e.target.value, !0) } }, { key: "onSearchClear", value: function () { this.setSearchValue(""), this.focusSearchInput() } }, { key: "onToggleAllOptions", value: function () { this.toggleAllOptions() } }, { key: "onDropboxContainerTopOrBottomFocus", value: function () { this.closeDropbox() } }, { key: "onResize", value: function () { this.setOptionsContainerHeight(!0) } }, { key: "addMutationObserver", value: function () { var e = this; if (this.hasDropboxWrapper) { var t = this.$ele; this.mutationObserver = new MutationObserver((function (i) { var o = !1, s = !1; i.forEach((function (e) { o || (o = g(e.addedNodes).some((function (e) { return !(e !== t && !e.contains(t)) }))), s || (s = g(e.removedNodes).some((function (e) { return !(e !== t && !e.contains(t)) }))) })), s && !o && e.destroy() })), this.mutationObserver.observe(document.querySelector("body"), { childList: !0, subtree: !0 }) } } }, { key: "removeMutationObserver", value: function () { this.mutationObserver.disconnect() } }, { key: "beforeValueSet", value: function (e) { this.toggleAllOptionsClass(!e && void 0) } }, { key: "beforeSelectNewValue", value: function () { var e = this, t = this.getNewOption(), i = t.index; this.newValues.push(t.value), this.setOptionProp(i, "isCurrentNew", !1), this.setOptionProp(i, "isNew", !0), setTimeout((function () { e.setSearchValue(""), e.focusSearchInput() }), 0) } }, { key: "afterRenderWrapper", value: function () { d.addClass(this.$ele, "vscomp-ele"), this.renderSearch(), this.setEleStyles(), this.setDropboxStyles(), this.setOptionsHeight(), this.setVisibleOptions(), this.setOptionsContainerHeight(), this.addEvents(), this.setEleProps(), this.keepAlwaysOpen || this.showAsPopup || this.initDropboxPopover(), this.initialSelectedValue ? this.setValueMethod(this.initialSelectedValue, this.silentInitialValueSet) : this.autoSelectFirstOption && this.visibleOptions.length && this.setValueMethod(this.visibleOptions[0].value, this.silentInitialValueSet), this.showOptionsOnlyOnSearch && this.setSearchValue("", !1, !0), this.initialDisabled && this.disable(), this.autofocus && this.focus() } }, { key: "afterRenderOptions", value: function () { var e = this.getVisibleOptions(), t = !this.options.length && !this.hasServerSearch, i = !t && !e.length; if ((!this.allowNewOption || this.hasServerSearch || this.showOptionsOnlyOnSearch) && (d.toggleClass(this.$allWrappers, "has-no-search-results", i), i ? (d.setAttr(this.$noSearchResults, "tabindex", "0"), d.setAttr(this.$noSearchResults, "aria-hidden", "false")) : (d.setAttr(this.$noSearchResults, "tabindex", "-1"), d.setAttr(this.$noSearchResults, "aria-hidden", "true"))), d.toggleClass(this.$allWrappers, "has-no-options", t), t ? (d.setAttr(this.$noOptions, "tabindex", "0"), d.setAttr(this.$noOptions, "aria-hidden", "false")) : (d.setAttr(this.$noOptions, "tabindex", "-1"), d.setAttr(this.$noOptions, "aria-hidden", "true")), this.setOptionAttr(), this.setOptionsPosition(), this.setOptionsTooltip(), document.activeElement !== this.$searchInput) { var o = d.getElementsBySelector(".focused", this.$dropboxContainer)[0]; void 0 !== o && o.focus() } } }, { key: "afterSetOptionsContainerHeight", value: function (e) { e && this.showAsPopup && this.setVisibleOptions() } }, { key: "afterSetSearchValue", value: function () { var e = this; this.hasServerSearch ? (clearInterval(this.serverSearchTimeout), this.serverSearchTimeout = setTimeout((function () { e.serverSearch() }), this.searchDelay)) : this.setVisibleOptionsCount(), this.selectAllOnlyVisible && this.toggleAllOptionsClass(), this.focusOption({ focusFirst: !0 }) } }, { key: "afterSetVisibleOptionsCount", value: function () { this.scrollToTop(), this.setOptionsHeight(), this.setVisibleOptions(), this.updatePosition() } }, { key: "afterValueSet", value: function () { this.scrollToTop(), this.setSearchValue(""), this.renderOptions() } }, { key: "afterSetOptions", value: function (e) { e && this.setSelectedProp(), this.setOptionsHeight(), this.setVisibleOptions(), this.showOptionsOnlyOnSearch && this.setSearchValue("", !1, !0), e || this.reset() } }, { key: "setProps", value: function (e) { var t = this.setDefaultProps(e); this.setPropsFromElementAttr(t); var i = n.convertToBoolean; this.$ele = t.ele, this.dropboxWrapper = t.dropboxWrapper, this.valueKey = t.valueKey, this.labelKey = t.labelKey, this.descriptionKey = t.descriptionKey, this.aliasKey = t.aliasKey, this.optionHeightText = t.optionHeight, this.optionHeight = parseFloat(this.optionHeightText), this.multiple = i(t.multiple), this.hasSearch = i(t.search), this.searchByStartsWith = i(t.searchByStartsWith), this.searchGroup = i(t.searchGroup), this.hideClearButton = i(t.hideClearButton), this.autoSelectFirstOption = i(t.autoSelectFirstOption), this.hasOptionDescription = i(t.hasOptionDescription), this.silentInitialValueSet = i(t.silentInitialValueSet), this.allowNewOption = i(t.allowNewOption), this.markSearchResults = i(t.markSearchResults), this.showSelectedOptionsFirst = i(t.showSelectedOptionsFirst), this.disableSelectAll = i(t.disableSelectAll), this.keepAlwaysOpen = i(t.keepAlwaysOpen), this.showDropboxAsPopup = i(t.showDropboxAsPopup), this.hideValueTooltipOnSelectAll = i(t.hideValueTooltipOnSelectAll), this.showOptionsOnlyOnSearch = i(t.showOptionsOnlyOnSearch), this.selectAllOnlyVisible = i(t.selectAllOnlyVisible), this.alwaysShowSelectedOptionsCount = i(t.alwaysShowSelectedOptionsCount), this.alwaysShowSelectedOptionsLabel = i(t.alwaysShowSelectedOptionsLabel), this.disableAllOptionsSelectedText = i(t.disableAllOptionsSelectedText), this.showValueAsTags = i(t.showValueAsTags), this.disableOptionGroupCheckbox = i(t.disableOptionGroupCheckbox), this.enableSecureText = i(t.enableSecureText), this.setValueAsArray = i(t.setValueAsArray), this.disableValidation = i(t.disableValidation), this.initialDisabled = i(t.disabled), this.required = i(t.required), this.autofocus = i(t.autofocus), this.useGroupValue = i(t.useGroupValue), this.focusSelectedOptionOnOpen = i(t.focusSelectedOptionOnOpen), this.noOptionsText = t.noOptionsText, this.noSearchResultsText = t.noSearchResultsText, this.selectAllText = t.selectAllText, this.searchNormalize = t.searchNormalize, this.searchPlaceholderText = t.searchPlaceholderText, this.searchFormLabel = t.searchFormLabel, this.optionsSelectedText = t.optionsSelectedText, this.optionSelectedText = t.optionSelectedText, this.allOptionsSelectedText = t.allOptionsSelectedText, this.clearButtonText = t.clearButtonText, this.moreText = t.moreText, this.placeholder = t.placeholder, this.position = t.position, this.textDirection = t.textDirection, this.dropboxWidth = t.dropboxWidth, this.tooltipFontSize = t.tooltipFontSize, this.tooltipAlignment = t.tooltipAlignment, this.tooltipMaxWidth = t.tooltipMaxWidth, this.updatePositionThrottle = t.updatePositionThrottle, this.noOfDisplayValues = parseInt(t.noOfDisplayValues), this.zIndex = parseInt(t.zIndex), this.maxValues = parseInt(t.maxValues), this.minValues = parseInt(t.minValues), this.name = this.secureText(t.name), this.additionalClasses = t.additionalClasses, this.additionalDropboxClasses = t.additionalDropboxClasses, this.additionalDropboxContainerClasses = t.additionalDropboxContainerClasses, this.additionalToggleButtonClasses = t.additionalToggleButtonClasses, this.popupDropboxBreakpoint = t.popupDropboxBreakpoint, this.popupPosition = t.popupPosition, this.onServerSearch = t.onServerSearch, this.labelRenderer = t.labelRenderer, this.selectedLabelRenderer = t.selectedLabelRenderer, this.initialSelectedValue = 0 === t.selectedValue ? "0" : t.selectedValue, this.emptyValue = t.emptyValue, this.ariaLabelledby = t.ariaLabelledby, this.ariaLabelText = t.ariaLabelText, this.ariaLabelClearButtonText = t.ariaLabelClearButtonText, this.maxWidth = t.maxWidth, this.searchDelay = t.searchDelay, this.selectedValues = [], this.selectedOptions = [], this.newValues = [], this.events = {}, this.tooltipEnterDelay = 200, this.searchValue = "", this.searchValueOriginal = "", this.isAllSelected = !1, (void 0 === t.search && this.multiple || this.allowNewOption || this.showOptionsOnlyOnSearch) && (this.hasSearch = !0), this.hasServerSearch = "function" == typeof this.onServerSearch, (this.maxValues || this.hasServerSearch || this.showOptionsOnlyOnSearch) && (this.disableSelectAll = !0, this.disableOptionGroupCheckbox = !0), this.keepAlwaysOpen && (this.dropboxWrapper = "self"), this.showAsPopup = this.showDropboxAsPopup && !this.keepAlwaysOpen && window.innerWidth <= parseFloat(this.popupDropboxBreakpoint), this.hasSearchContainer = this.hasSearch || this.multiple && !this.disableSelectAll, this.optionsCount = this.getOptionsCount(t.optionsCount), this.halfOptionsCount = Math.ceil(this.optionsCount / 2), this.optionsHeight = this.getOptionsHeight(), this.uniqueId = this.getUniqueId() } }, { key: "setDefaultProps", value: function (e) { var t = { dropboxWrapper: "self", valueKey: "value", labelKey: "label", descriptionKey: "description", aliasKey: "alias", ariaLabelText: "Options list", ariaLabelClearButtonText: "Clear button", optionsCount: 5, noOfDisplayValues: 50, optionHeight: "40px", noOptionsText: "No options found", noSearchResultsText: "No results found", selectAllText: "Select All", searchNormalize: !1, searchPlaceholderText: "Search...", searchFormLabel: "Search", clearButtonText: "Clear", moreText: "more...", optionsSelectedText: "options selected", optionSelectedText: "option selected", allOptionsSelectedText: "All", placeholder: "Select", position: "bottom left", zIndex: e.keepAlwaysOpen ? 1 : 2, tooltipFontSize: "14px", tooltipAlignment: "center", tooltipMaxWidth: "300px", updatePositionThrottle: 100, name: "", additionalClasses: "", additionalDropboxClasses: "", additionalDropboxContainerClasses: "", additionalToggleButtonClasses: "", maxValues: 0, showDropboxAsPopup: !0, popupDropboxBreakpoint: "576px", popupPosition: "center", hideValueTooltipOnSelectAll: !0, emptyValue: "", searchDelay: 300, focusSelectedOptionOnOpen: !0 }; return e.hasOptionDescription && (t.optionsCount = 4, t.optionHeight = "50px"), Object.assign(t, e) } }, { key: "setPropsFromElementAttr", value: function (e) { var t = e.ele; Object.keys(k).forEach((function (i) { var o = t.getAttribute(i); -1 === E.indexOf(i) || "" !== o && "true" !== o || (o = !0), o && (e[k[i]] = o) })) } }, { key: "setEleProps", value: function () { var t = this.$ele; t.virtualSelect = this, t.value = this.multiple ? [] : "", t.name = this.name, t.disabled = !1, t.required = this.required, t.autofocus = this.autofocus, t.multiple = this.multiple, t.form = t.closest("form"), t.reset = e.reset, t.setValue = e.setValueMethod, t.setOptions = e.setOptionsMethod, t.setDisabledOptions = e.setDisabledOptionsMethod, t.setEnabledOptions = e.setEnabledOptionsMethod, t.toggleSelectAll = e.toggleSelectAll, t.isAllSelected = e.isAllSelected, t.addOption = e.addOptionMethod, t.getNewValue = e.getNewValueMethod, t.getDisplayValue = e.getDisplayValueMethod, t.getSelectedOptions = e.getSelectedOptionsMethod, t.getDisabledOptions = e.getDisabledOptionsMethod, t.open = e.openMethod, t.close = e.closeMethod, t.focus = e.focusMethod, t.enable = e.enableMethod, t.disable = e.disableMethod, t.destroy = e.destroyMethod, t.validate = e.validateMethod, t.toggleRequired = e.toggleRequiredMethod, this.hasDropboxWrapper && (this.$dropboxWrapper.virtualSelect = this) } }, { key: "setValueMethod", value: function (e, t) { var i = {}, o = {}, s = [], n = this.multiple, r = e; if (r) { if (Array.isArray(r) || (r = [r]), n) { var a = this.maxValues; a && r.length > a && r.splice(a) } else r.length > 1 && (r = [r[0]]); r = r.map((function (e) { return e || 0 === e ? e.toString() : "" })), this.useGroupValue && (r = this.setGroupOptionsValue(r)), r.forEach((function (e, t) { i[e] = !0, o[e] = t })), this.allowNewOption && r && this.setNewOptionsFromValue(r) } if (this.options.forEach((function (e) { !0 !== i[e.value] || e.isDisabled || e.isGroupTitle ? e.isSelected = !1 : (e.isSelected = !0, s.push(e.value)) })), n) this.hasOptionGroup && this.setGroupsSelectedProp(), s.sort((function (e, t) { return o[e] - o[t] })); else { var l = m(s, 1); s = l[0] } this.beforeValueSet(), this.setValue(s, { disableEvent: t }), this.afterValueSet() } }, { key: "setGroupOptionsValue", value: function (e) { var t = [], i = {}, o = {}; return e.forEach((function (e) { o[e] = !0 })), this.options.forEach((function (e) { var s = e.value, n = !0 === o[s]; e.isGroupTitle ? n && (i[e.index] = !0) : (n || i[e.groupIndex]) && t.push(s) })), t } }, { key: "setGroupsSelectedProp", value: function () { var e = this.isAllGroupOptionsSelected.bind(this); this.options.forEach((function (t) { t.isGroupTitle && (t.isSelected = e(t.index)) })) } }, { key: "setOptionsMethod", value: function (e, t) { this.setOptions(e), this.afterSetOptions(t) } }, { key: "setDisabledOptionsMethod", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.setDisabledOptions(e, !0), t || (this.setValueMethod(null), this.toggleAllOptionsClass()), this.setVisibleOptions() } }, { key: "setDisabledOptions", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = []; if (e) if (!0 === e) t && this.options.forEach((function (e) { return e.isDisabled = !0, i.push(e.value), e })); else { i = e.map((function (e) { return e.toString() })); var o = {}; i.forEach((function (e) { o[e] = !0 })), t && this.options.forEach((function (e) { return e.isDisabled = !0 === o[e.value], e })) } else t && this.options.forEach((function (e) { return e.isDisabled = !1, e })); this.disabledOptions = i } }, { key: "setEnabledOptionsMethod", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.setEnabledOptions(e), t || (this.setValueMethod(null), this.toggleAllOptionsClass()), this.setVisibleOptions() } }, { key: "setEnabledOptions", value: function (e) { if (void 0 !== e) { var t = []; if (!0 === e) this.options.forEach((function (e) { return e.isDisabled = !1, e })); else { var i = {}; e.forEach((function (e) { i[e] = !0 })), this.options.forEach((function (e) { var o = !0 !== i[e.value]; return e.isDisabled = o, o && t.push(e.value), e })) } this.disabledOptions = t } } }, { key: "setOptions", value: function () { var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], i = [], o = this.disabledOptions.length, s = this.valueKey, r = this.labelKey, a = this.descriptionKey, l = this.aliasKey, u = this.hasOptionDescription, c = n.getString, p = n.convertToBoolean, h = this.secureText.bind(this), d = this.getAlias.bind(this), v = 0, f = !1, m = {}, g = !1; this.disabledOptions.forEach((function (e) { m[e] = !0 })); var O = function (t) { "object" !== b(t) && (t = y(y({}, s, t), r, t)); var S = h(c(t[s])), x = h(c(t[r])), w = t.options, k = !!w, C = { index: v, value: S, label: x, labelNormalized: e.searchNormalize ? n.normalizeString(x).toLowerCase() : x.toLowerCase(), alias: d(t[l]), isVisible: p(t.isVisible, !0), isNew: t.isNew || !1, isGroupTitle: k, classNames: t.classNames }; if (g || "" !== S || (g = !0), o && (C.isDisabled = !0 === m[S]), t.isGroupOption && (C.isGroupOption = !0, C.groupIndex = t.groupIndex), u && (C.description = h(c(t[a]))), t.customData && (C.customData = t.customData), i.push(C), v += 1, k) { var E = C.index; f = !0, w.forEach((function (e) { e.isGroupOption = !0, e.groupIndex = E, O(e) })) } }; Array.isArray(t) && t.forEach(O); var S = i.length, x = this.$ele; x.options = i, x.length = S, this.options = i, this.visibleOptionsCount = S, this.lastOptionIndex = S - 1, this.newValues = [], this.hasOptionGroup = f, this.hasEmptyValueOption = g, this.setSortedOptions() } }, { key: "setServerOptions", value: function () { var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []; this.setOptionsMethod(t, !0); var i = this.selectedOptions, o = this.options, s = !1; if (i.length) { var n = {}; s = !0, o.forEach((function (e) { n[e.value] = !0 })), i.forEach((function (e) { !0 !== n[e.value] && (e.isVisible = !1, o.push(e)) })), this.setOptionsMethod(o, !0) } this.allowNewOption && this.searchValue && (o.some((function (t) { return t.label.toLowerCase() === e.searchValue })) || (s = !0, this.setNewOption())), s ? (this.setVisibleOptionsCount(), this.multiple && this.toggleAllOptionsClass(), this.setValueText()) : this.updatePosition(), this.setVisibleOptionsCount(), d.removeClass(this.$allWrappers, "server-searching") } }, { key: "setSelectedOptions", value: function () { this.selectedOptions = this.options.filter((function (e) { return e.isSelected })) } }, { key: "setSortedOptions", value: function () { var e = g(this.options); this.showSelectedOptionsFirst && this.selectedValues.length && (e = this.hasOptionGroup ? this.sortOptionsGroup(e) : this.sortOptions(e)), this.sortedOptions = e } }, { key: "setVisibleOptions", value: function () { var e = g(this.sortedOptions), t = 2 * this.optionsCount, i = this.getVisibleStartIndex(), o = this.getNewOption(), s = i + t - 1, n = 0; o && (o.visibleIndex = n, n += 1), e = e.filter((function (e) { var t = !1; return e.isVisible && !e.isCurrentNew && (t = n >= i && n <= s, e.visibleIndex = n, n += 1), t })), o && (e = [o].concat(g(e))), this.visibleOptions = e, this.visibleOptionsCount = e.length, this.renderOptions() } }, { key: "setOptionsPosition", value: function (e) { var t = parseInt((e || this.getVisibleStartIndex()) * this.optionHeight); this.$options.style.transform = "translate3d(0, ".concat(t, "px, 0)"), d.setData(this.$options, "top", t) } }, { key: "setOptionsTooltip", value: function () { var e = this, t = this.getVisibleOptions(), i = this.hasOptionDescription; t.forEach((function (t) { var o = e.$dropboxContainer.querySelector('.vscomp-option[data-index="'.concat(t.index, '"]')); d.setData(o.querySelector(".vscomp-option-text"), "tooltip", t.label), i && d.setData(o.querySelector(".vscomp-option-description"), "tooltip", t.description) })) } }, { key: "setValue", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i = t.disableEvent, o = void 0 !== i && i, s = t.disableValidation, r = void 0 !== s && s; this.hasEmptyValueOption && "" === e || e ? Array.isArray(e) ? this.selectedValues = g(e) : this.selectedValues = [e] : this.selectedValues = []; var a = this.getValue(); this.$ele.value = a, this.$hiddenInput.value = this.getInputValue(a), this.isMaxValuesSelected = !!(this.maxValues && this.maxValues <= this.selectedValues.length), this.toggleAllOptionsClass(), this.setValueText(), d.toggleClass(this.$allWrappers, "has-value", n.isNotEmpty(this.selectedValues)), d.toggleClass(this.$allWrappers, "max-value-selected", this.isMaxValuesSelected), r || this.validate(), o || d.dispatchEvent(this.$ele, "change", !0) } }, { key: "setValueText", value: function () { var e = this, t = this.multiple, i = this.selectedValues, o = this.noOfDisplayValues, s = this.showValueAsTags, r = this.$valueText, a = this.selectedLabelRenderer, l = [], u = [], c = i.length, p = 0, h = this.isAllSelected && !this.hasServerSearch && !this.disableAllOptionsSelectedText && !s; if (h && this.hideValueTooltipOnSelectAll) r.innerHTML = "".concat(this.allOptionsSelectedText, " (").concat(c, ")"); else { this.getSelectedOptions({ fullDetails: !0, keepSelectionOrder: !0 }).some((function (t) { if (t.isCurrentNew) return !1; if (p >= o) return !0; var i = t.label; if ("function" == typeof a && (i = a(t)), l.push(i), p += 1, s) { var c = n.willTextOverflow(r.parentElement, i) ? e.getTooltipAttrText(i, !1, !0) : "", h = '<span class="vscomp-value-tag" data-index="'.concat(t.index, '" ').concat(c, '>\n                  <span class="vscomp-value-tag-content">').concat(i, '</span>\n                  <span class="vscomp-value-tag-clear-button">\n                    <i class="vscomp-clear-icon"></i>\n                  </span>\n                </span>'); u.push(h) } else u.push(i); return !1 })); var v = c - o; v > 0 && u.push('<span class="vscomp-value-tag more-value-count">+ '.concat(v, " ").concat(this.moreText, "</span>")); var f = l.join(", "); if ("" === f) r.innerHTML = this.placeholder; else if (r.innerHTML = f, t) { var y = this.maxValues; if (this.alwaysShowSelectedOptionsCount || d.hasEllipsis(r) || y || s) { var b = '<span class="vscomp-selected-value-count">'.concat(c, "</span>"); if (y && (b += ' / <span class="vscomp-max-value-count">'.concat(y, "</span>")), h) r.innerHTML = "".concat(this.allOptionsSelectedText, " (").concat(c, ")"); else if (s) r.innerHTML = u.join(""), this.$valueTags = r.querySelectorAll(".vscomp-value-tag"), this.setValueTagAttr(); else if (!this.alwaysShowSelectedOptionsLabel) { var m = 1 === c ? this.optionSelectedText : this.optionsSelectedText; r.innerHTML = "".concat(b, " ").concat(m) } } else u = [] } } var g = ""; 0 === c ? g = this.placeholder : s || (g = u.join(", ")), s || d.setData(r, "tooltip", g), t && (s ? this.updatePosition() : d.setData(r, "tooltipEllipsisOnly", 0 === c)) } }, { key: "setSearchValue", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; if (e !== this.searchValueOriginal || i) { t || (this.$searchInput.value = e); var o = e.replace(/\\/g, "").toLowerCase().trim(); this.searchValue = o, this.searchValueOriginal = e, d.toggleClass(this.$allWrappers, "has-search-value", e), this.afterSetSearchValue() } } }, { key: "setVisibleOptionsCount", value: function () { var e, t = 0, i = !1, o = this.searchGroup, s = this.showOptionsOnlyOnSearch, r = this.searchByStartsWith, a = this.searchValue; a = this.searchNormalize ? n.normalizeString(a) : a; var l = this.isOptionVisible.bind(this); this.hasOptionGroup && (e = this.getVisibleOptionGroupsMapping(a)), this.options.forEach((function (n) { var u; n.isCurrentNew || (s && !a ? (n.isVisible = !1, u = { isVisible: !1, hasExactOption: !1 }) : u = l({ data: n, searchValue: a, hasExactOption: i, visibleOptionGroupsMapping: e, searchGroup: o, searchByStartsWith: r }), u.isVisible && (t += 1), i || (i = u.hasExactOption)) })), this.allowNewOption && (a && !i ? (this.setNewOption(), t += 1) : this.removeNewOption()), this.visibleOptionsCount = t, this.afterSetVisibleOptionsCount() } }, { key: "setOptionProp", value: function (e, t, i) { this.options[e] && (this.options[e][t] = i) } }, { key: "setOptionsHeight", value: function () { this.$optionsList.style.height = "".concat(this.optionHeight * this.visibleOptionsCount, "px") } }, { key: "setOptionsContainerHeight", value: function (e) { var t; e ? this.showAsPopup && (this.optionsCount = this.getOptionsCount(), this.halfOptionsCount = Math.ceil(this.optionsCount / 2), t = this.getOptionsHeight(), this.optionsHeight = t) : (t = this.optionsHeight, this.keepAlwaysOpen && (d.setStyle(this.$noOptions, "height", t), d.setStyle(this.$noSearchResults, "height", t))), d.setStyle(this.$optionsContainer, "max-height", t), this.afterSetOptionsContainerHeight(e) } }, { key: "setNewOption", value: function (e) { var t = e || this.searchValueOriginal.trim(); if (t) { var i = this.getNewOption(); if (i) { var o = i.index; this.setOptionProp(o, "value", this.secureText(t)), this.setOptionProp(o, "label", this.secureText(t)) } else { var s = { value: t, label: t }; e ? (s.isNew = !0, this.newValues.push(t)) : s.isCurrentNew = !0, this.addOption(s) } } } }, { key: "setSelectedProp", value: function () { var e = {}; this.selectedValues.forEach((function (t) { e[t] = !0 })), this.options.forEach((function (t) { !0 === e[t.value] && (t.isSelected = !0) })) } }, { key: "setNewOptionsFromValue", value: function (e) { if (e) { var t = this.setNewOption.bind(this), i = {}; this.options.forEach((function (e) { i[e.value] = !0 })), e.forEach((function (e) { e && !0 !== i[e] && t(e) })) } } }, { key: "setDropboxWrapperWidth", value: function () { if (!this.showAsPopup) { var e = this.dropboxWidth || "".concat(this.$wrapper.offsetWidth, "px"); d.setStyle(this.$dropboxContainer, "max-width", e) } } }, { key: "setEleStyles", value: function () { var e = this.maxWidth, t = {}; e && (t["max-width"] = e), d.setStyles(this.$ele, t) } }, { key: "setDropboxStyles", value: function () { var e = this.dropboxWidth, t = {}, i = { "z-index": this.zIndex }; e && (this.showAsPopup ? t["max-width"] = e : i.width = e), d.setStyles(this.$dropboxContainer, i), d.setStyles(this.$dropbox, t) } }, { key: "setOptionAttr", value: function () { var e = this.$visibleOptions, t = this.options, i = "".concat(this.optionHeight, "px"), o = d.setStyle, s = d.getData, n = d.setData; e && e.length && e.forEach((function (e) { var r = t[s(e, "index")]; o(e, "height", i), n(e, "value", r.value) })) } }, { key: "setValueTagAttr", value: function () { var e = this.$valueTags; if (e && e.length) { var t = d.getData, i = d.setData, o = this.options; e.forEach((function (e) { var s = t(e, "index"); if (void 0 !== s) { var n = o[s]; i(e, "value", n.value) } })) } } }, { key: "setScrollTop", value: function () { var e = this.selectedValues; if (!this.showSelectedOptionsFirst && this.focusSelectedOptionOnOpen && 0 !== e.length) { var t, i = {}; e.forEach((function (e) { i[e] = !0 })), this.options.some((function (e) { return !!i[e.value] && (t = e.visibleIndex, !0) })), t && (this.$optionsContainer.scrollTop = this.optionHeight * t) } } }, { key: "getVisibleOptions", value: function () { return this.visibleOptions || [] } }, { key: "getValue", value: function () { return this.multiple ? this.useGroupValue ? this.getGroupValue() : this.selectedValues : this.selectedValues[0] || "" } }, { key: "getGroupValue", value: function () { var e = [], t = {}; return this.options.forEach((function (i) { if (i.isSelected) { var o = i.value; i.isGroupTitle ? o && (t[i.index] = !0, e.push(o)) : !0 !== t[i.groupIndex] && e.push(o) } })), e } }, { key: "getInputValue", value: function (e) { var t = e; return t && t.length ? this.setValueAsArray && this.multiple && (t = JSON.stringify(t)) : t = this.emptyValue, t } }, { key: "getFirstVisibleOptionIndex", value: function () { return Math.ceil(this.$optionsContainer.scrollTop / this.optionHeight) } }, { key: "getVisibleStartIndex", value: function () { var e = this.getFirstVisibleOptionIndex() - this.halfOptionsCount; return e < 0 && (e = 0), e } }, { key: "getTooltipAttrText", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o = { "data-tooltip": (n.containsHTML(e) ? n.replaceDoubleQuotesWithHTML(e) : e) || "", "data-tooltip-enter-delay": this.tooltipEnterDelay, "data-tooltip-z-index": this.zIndex, "data-tooltip-font-size": this.tooltipFontSize, "data-tooltip-alignment": this.tooltipAlignment, "data-tooltip-max-width": this.tooltipMaxWidth, "data-tooltip-ellipsis-only": t, "data-tooltip-allow-html": i }; return d.getAttributesText(o) } }, { key: "getOptionObj", value: function (e) { if (e) { var t = n.getString, i = this.secureText.bind(this); return { index: e.index, value: i(t(e.value)), label: i(t(e.label)), description: i(t(e.description)), alias: this.getAlias(e.alias), isCurrentNew: e.isCurrentNew || !1, isNew: e.isNew || !1, isVisible: !0 } } } }, { key: "getNewOption", value: function () { var e = this.options[this.lastOptionIndex]; if (e && e.isCurrentNew) return e } }, { key: "getOptionIndex", value: function (e) { var t; return this.options.some((function (i) { return i.value === e && (t = i.index, !0) })), t } }, { key: "getNewValue", value: function () { var e = {}; this.newValues.forEach((function (t) { e[t] = !0 })); var t = this.selectedValues.filter((function (t) { return !0 === e[t] })); return this.multiple ? t : t[0] } }, { key: "getAlias", value: function (e) { var t = e; return t && (t = (t = Array.isArray(t) ? t.join(",") : t.toString().trim()).toLowerCase()), t || "" } }, { key: "getDisplayValue", value: function () { var e = []; return this.options.forEach((function (t) { t.isSelected && e.push(t.label) })), this.multiple ? e : e[0] || "" } }, { key: "getSelectedOptions", value: function () { var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t = e.fullDetails, i = void 0 !== t && t, o = e.keepSelectionOrder, s = void 0 !== o && o, n = this.valueKey, r = this.labelKey, a = this.selectedValues, l = []; if (this.options.forEach((function (e) { if (e.isSelected && !e.isGroupTitle) if (i) l.push(e); else { var t = y(y({}, n, e.value), r, e.label); e.isNew && (t.isNew = !0), e.customData && (t.customData = e.customData), l.push(t) } })), s) { var u = {}; a.forEach((function (e, t) { u[e] = t })), l.sort((function (e, t) { return u[e.value] - u[t.value] })) } return this.multiple || i ? l : l[0] } }, { key: "getDisabledOptions", value: function () { var e = this.valueKey, t = this.labelKey, i = this.disabledOptions, o = {}, s = []; return i.forEach((function (e) { o[e] = !0 })), this.options.forEach((function (i) { var n = i.value, r = i.label; o[n] && s.push(y(y({}, e, n), t, r)) })), s } }, { key: "getVisibleOptionGroupsMapping", value: function (e) { var t = this.options, i = {}, o = this.isOptionVisible.bind(this); return (t = this.structureOptionGroup(t)).forEach((function (t) { i[t.index] = t.options.some((function (t) { return o({ data: t, searchValue: e }).isVisible })) })), i } }, { key: "getOptionsCount", value: function (e) { var t; if (this.showAsPopup) { var i = 80 * window.innerHeight / 100 - 48; this.hasSearchContainer && (i -= 40), t = Math.floor(i / this.optionHeight) } else t = parseInt(e); return t } }, { key: "getOptionsHeight", value: function () { return "".concat(this.optionsCount * this.optionHeight, "px") } }, { key: "getSibling", value: function (e, t) { var i = "next" === t ? "nextElementSibling" : "previousElementSibling", o = e; do { o && (o = o[i]) } while (d.hasClass(o, "disabled") || d.hasClass(o, "group-title")); return o } }, { key: "getUniqueId", value: function () { var e = n.getRandomInt(1e4); return document.querySelector("#vscomp-ele-wrapper-".concat(e)) ? this.getUniqueId() : e } }, { key: "initDropboxPopover", value: function () { var e = { ele: this.$ele, target: this.$dropboxContainer, position: this.position, zIndex: this.zIndex, margin: 4, transitionDistance: 30, hideArrowIcon: !0, disableManualAction: !0, disableUpdatePosition: !this.hasDropboxWrapper, updatePositionThrottle: this.updatePositionThrottle, afterShow: this.afterShowPopper.bind(this), afterHide: this.afterHidePopper.bind(this) }; this.dropboxPopover = new PopoverComponent(e) } }, { key: "openDropbox", value: function (e) { this.isSilentOpen = e, e ? d.setStyle(this.$dropboxContainer, "display", "inline-flex") : (d.dispatchEvent(this.$ele, "beforeOpen"), d.setAria(this.$wrapper, "expanded", !0)), this.setDropboxWrapperWidth(), d.removeClass(this.$allWrappers, "closed"), d.changeTabIndex(this.$allWrappers, 0), this.dropboxPopover && !e ? this.dropboxPopover.show() : this.afterShowPopper() } }, { key: "afterShowPopper", value: function () { var e = this.isSilentOpen; this.isSilentOpen = !1, e || (this.moveSelectedOptionsFirst(), this.setScrollTop(), d.addClass(this.$allWrappers, "focused"), this.showAsPopup ? (d.addClass(this.$body, "vscomp-popup-active"), this.isPopupActive = !0) : this.focusElementOnOpen(), d.dispatchEvent(this.$ele, "afterOpen")) } }, { key: "closeDropbox", value: function (e) { this.isSilentClose = e, !1 !== this.isOpened() && (this.keepAlwaysOpen ? this.removeOptionFocus() : (e ? d.setStyle(this.$dropboxContainer, "display", "") : (d.dispatchEvent(this.$ele, "beforeClose"), d.setAria(this.$wrapper, "expanded", !1), d.setAria(this.$wrapper, "activedescendant", "")), this.dropboxPopover && !e ? this.dropboxPopover.hide() : this.afterHidePopper())) } }, { key: "afterHidePopper", value: function () { var e = this.isSilentClose; this.isSilentClose = !1, d.removeClass(this.$allWrappers, "focused"), this.removeOptionFocus(), !e && this.isPopupActive && (d.removeClass(this.$body, "vscomp-popup-active"), this.isPopupActive = !1), d.addClass(this.$allWrappers, "closed"), e || d.dispatchEvent(this.$ele, "afterClose"), this.$wrapper.focus() } }, { key: "moveSelectedOptionsFirst", value: function () { this.showSelectedOptionsFirst && (this.setSortedOptions(), this.$optionsContainer.scrollTop && this.selectedValues.length ? this.scrollToTop() : this.setVisibleOptions()) } }, { key: "toggleDropbox", value: function () { this.isOpened() ? this.closeDropbox() : this.openDropbox() } }, { key: "updatePosition", value: function () { this.dropboxPopover && this.isOpened() && this.$ele.updatePosition() } }, { key: "isOpened", value: function () { return !d.hasClass(this.$wrapper, "closed") } }, { key: "focusSearchInput", value: function () { var e = this.$searchInput; e && e.focus() } }, { key: "focusElementOnOpen", value: function () { var e = this.$searchInput, t = !this.options.length && !this.hasServerSearch; if (e) t && !this.allowNewOption ? (d.setAttr(e, "disabled", ""), this.$noOptions.focus()) : (e.removeAttribute("disabled"), e.focus()); else { var i = this.$dropbox.querySelector('[tabindex="0"]'); void 0 !== d.getData(i, "index") ? this.focusOption({ direction: "next" }) : i ? i.focus() : this.focusFirstVisibleOption() } } }, { key: "focusFirstVisibleOption", value: function () { var e = this.$optionsContainer.querySelector("[data-index='".concat(this.getFirstVisibleOptionIndex(), "']")); e ? (d.hasClass(e, "group-title") && (e = this.getSibling(e, "next")), d.setAttr(e, "tabindex", "0"), this.$optionsContainer.scrollTop = this.optionHeight * this.getFirstVisibleOptionIndex(), this.focusOption({ focusFirst: !0 }), e.focus()) : (e = this.$dropbox.querySelector('[tabindex="0"]')) && e.focus() } }, { key: "focusOption", value: function () { var e, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, i = t.direction, o = t.$option, s = t.focusFirst, n = this.$dropboxContainer.querySelector(".vscomp-option.focused"); if (o) e = o; else if (!n || s) { var r = this.getFirstVisibleOptionIndex(); e = this.$dropboxContainer.querySelector('.vscomp-option[data-visible-index="'.concat(r, '"]')), (d.hasClass(e, "disabled") || d.hasClass(e, "group-title")) && (e = this.getSibling(e, "next")) } else e = this.getSibling(n, i); e && e !== n && (n && this.toggleOptionFocusedState(n, !1), this.toggleOptionFocusedState(e, !0), this.toggleFocusedProp(d.getData(e, "index"), !0), this.moveFocusedOptionToView(e)) } }, { key: "moveFocusedOptionToView", value: function (e) { var t = e || this.$dropboxContainer.querySelector(".vscomp-option.focused"); if (t) { var i, o = this.$optionsContainer.getBoundingClientRect(), s = t.getBoundingClientRect(), n = o.top, r = o.bottom, a = o.height, l = s.top, u = s.bottom, c = s.height, p = t.offsetTop, h = d.getData(this.$options, "top", "number"); n > l ? i = p + h : r < u && (i = p - a + c + h), void 0 !== i && (this.$optionsContainer.scrollTop = i) } } }, { key: "removeOptionFocus", value: function () { var e = this.$dropboxContainer.querySelector(".vscomp-option.focused"); e && (this.toggleOptionFocusedState(e, !1), this.toggleFocusedProp(null)) } }, { key: "selectOption", value: function (e) { var t = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).event; if (e) { var i = !d.hasClass(e, "selected"); if (i) { if (this.multiple && this.isMaxValuesSelected) return } else if (!this.multiple) return void this.closeDropbox(); var o = this.selectedValues, s = d.getData(e, "value"), r = d.getData(e, "index", "number"), a = d.hasClass(e, "current-new"), l = !1, u = this.lastSelectedOptionIndex; if (this.lastSelectedOptionIndex = null, this.toggleSelectedProp(r, i), i) { if (this.multiple) o.push(s), this.toggleAllOptionsClass(), this.toggleGroupOptionsParent(e), t && t.shiftKey && (l = !0); else { o.length && this.toggleSelectedProp(this.getOptionIndex(o[0]), !1), o = [s]; var c = this.$dropboxContainer.querySelector(".vscomp-option.selected"); c && this.toggleOptionSelectedState(c, !1), this.closeDropbox(), a || this.setSearchValue("") } this.lastSelectedOptionIndex = r, this.toggleOptionSelectedState(e) } else this.multiple && (this.toggleOptionSelectedState(e), n.removeItemFromArray(o, s), this.toggleAllOptionsClass(!1), this.toggleGroupOptionsParent(e, !1)); a && this.beforeSelectNewValue(), this.setValue(o), l && this.selectRangeOptions(u, r) } } }, { key: "selectFocusedOption", value: function () { this.selectOption(this.$dropboxContainer.querySelector(".vscomp-option.focused")) } }, { key: "selectRangeOptions", value: function (e, t) { var i = this; if ("number" == typeof e && !this.maxValues) { var o, s, n = this.selectedValues, r = this.hasOptionGroup, a = {}; if (e < t ? (o = e, s = t) : (o = t, s = e), this.options.forEach((function (e) { if (!e.isDisabled && !e.isGroupTitle && e.isVisible && !e.isSelected) { var t = e.index; if (t > o && t < s) { if (r) { var i = e.groupIndex; "number" == typeof i && (a[i] = !0) } e.isSelected = !0, n.push(e.value) } } })), this.toggleAllOptionsClass(), this.setValue(n), (a = Object.keys(a)).length) { var l = this.toggleGroupTitleProp.bind(this); a.forEach((function (e) { l(parseInt(e)) })) } setTimeout((function () { i.renderOptions() }), 0) } } }, { key: "toggleAllOptions", value: function (e) { if (this.multiple && !this.disableSelectAll) { var t = "boolean" == typeof isSelected ? e : !d.hasClass(this.$toggleAllCheckbox, "checked"), i = [], o = this.selectAllOnlyVisible; this.options.forEach((function (e) { var s = e; if (!s.isDisabled && !s.isCurrentNew) { var n = s.isVisible, r = s.isSelected; !t && (!o || n || !r) || t && o && !n && !r ? s.isSelected = !1 : (s.isSelected = !0, s.isGroupTitle || i.push(s.value)) } })), this.toggleAllOptionsClass(t), this.setValue(i), this.renderOptions() } } }, { key: "toggleAllOptionsClass", value: function (e) { if (this.multiple) { var t = !1; "boolean" == typeof e || (e = this.isAllOptionsSelected()), !e && this.selectAllOnlyVisible && "" !== this.searchValue && (this.visibleOptionsCount > 0 || "" === this.searchValue) && (t = this.isAllOptionsSelected(!0)), d.toggleClass(this.$toggleAllCheckbox, "checked", e || t), this.isAllSelected = e } } }, { key: "isAllOptionsSelected", value: function (e) { var t = !1; return this.options.length && this.selectedValues.length && (t = !this.options.some((function (t) { return !t.isSelected && !t.isDisabled && !t.isGroupTitle && (!e || t.isVisible) }))), t } }, { key: "isAllGroupOptionsSelected", value: function (e) { var t = !1; return this.options.length && (t = !this.options.some((function (t) { return !t.isSelected && !t.isDisabled && !t.isGroupTitle && t.groupIndex === e }))), t } }, { key: "toggleGroupOptionsParent", value: function (e, t) { if (this.hasOptionGroup && !this.disableOptionGroupCheckbox && e) { var i = d.getData(e, "groupIndex"); void 0 !== i && (i = parseInt(i)); var o = this.$options.querySelector('.vscomp-option[data-index="'.concat(i, '"]')), s = "boolean" == typeof t ? t : this.isAllGroupOptionsSelected(i); this.toggleGroupTitleCheckbox(o, s), this.toggleGroupTitleProp(i, s) } } }, { key: "toggleGroupTitleProp", value: function (e, t) { var i = "boolean" == typeof t ? t : this.isAllGroupOptionsSelected(e); this.toggleSelectedProp(e, i) } }, { key: "toggleGroupOptions", value: function (e, t) { var i = this; if (this.hasOptionGroup && !this.disableOptionGroupCheckbox && e) { var o = d.getData(e, "index", "number"), s = this.selectedValues, r = this.selectAllOnlyVisible, a = {}, l = n.removeItemFromArray; s.forEach((function (e) { a[e] = !0 })), this.options.forEach((function (e) { if (!e.isDisabled && e.groupIndex === o) { var i = e.value; !t || r && !e.isVisible ? (e.isSelected = !1, a[i] && l(s, i)) : (e.isSelected = !0, a[i] || s.push(i)) } })), this.toggleAllOptionsClass(!!t && null), this.setValue(s), setTimeout((function () { i.renderOptions() }), 0) } } }, { key: "toggleGroupTitleCheckbox", value: function (e, t) { if (e) { var i = d.getData(e, "index", "number"); this.toggleSelectedProp(i, t), this.toggleOptionSelectedState(e, t) } } }, { key: "toggleFocusedProp", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.focusedOptionIndex && this.setOptionProp(this.focusedOptionIndex, "isFocused", !1), this.setOptionProp(e, "isFocused", t), this.focusedOptionIndex = e } }, { key: "toggleSelectedProp", value: function (e) { var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.setOptionProp(e, "isSelected", t) } }, { key: "scrollToTop", value: function () { this.$optionsContainer.scrollTop > 0 && (this.$optionsContainer.scrollTop = 0) } }, { key: "reset", value: function () { var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.options.forEach((function (e) { e.isSelected = !1 })), this.beforeValueSet(!0), this.setValue(null, { disableEvent: t, disableValidation: e }), this.afterValueSet(), e && d.removeClass(this.$allWrappers, "has-error"), d.dispatchEvent(this.$ele, "reset") } }, { key: "addOption", value: function (e, t) { if (e) { this.lastOptionIndex += 1; var i = this.getOptionObj(f(f({}, e), {}, { index: this.lastOptionIndex })); this.options.push(i), this.sortedOptions.push(i), t && (this.visibleOptionsCount += 1, this.afterSetOptions()) } } }, { key: "removeOption", value: function (e) { (e || 0 === e) && (this.options.splice(e, 1), this.lastOptionIndex -= 1) } }, { key: "removeNewOption", value: function () { var e = this.getNewOption(); e && this.removeOption(e.index) } }, { key: "sortOptions", value: function (e) { return e.sort((function (e, t) { var i = e.isSelected || e.isAnySelected, o = t.isSelected || t.isAnySelected; return i || o ? i && (!o || e.index < t.index) ? -1 : 1 : 0 })) } }, { key: "sortOptionsGroup", value: function (e) { var t = this.sortOptions.bind(this), i = this.structureOptionGroup(e); return i.forEach((function (e) { var i = e.options; e.isAnySelected = i.some((function (e) { return e.isSelected })), e.isAnySelected && t(i) })), t(i), this.destructureOptionGroup(i) } }, { key: "isOptionVisible", value: function (e) { var t = e.data, i = e.searchValue, o = e.hasExactOption, s = e.visibleOptionGroupsMapping, n = e.searchGroup, r = e.searchByStartsWith, a = t.value.toLowerCase(), l = this.searchNormalize ? t.labelNormalized : t.label.toLowerCase(), u = t.description, c = t.alias, p = r ? l.startsWith(i) : l.includes(i); return !t.isGroupTitle || n && p || (p = s[t.index]), r || !c || p || (p = c.includes(i)), r || !u || p || (p = u.toLowerCase().includes(i)), t.isVisible = p, o || (o = l === i || a === i), { isVisible: p, hasExactOption: o } } }, { key: "structureOptionGroup", value: function (e) { var t = [], i = {}; return e.forEach((function (e) { if (e.isGroupTitle) { var o = []; e.options = o, i[e.index] = o, t.push(e) } })), e.forEach((function (e) { e.isGroupOption && i[e.groupIndex].push(e) })), t } }, { key: "destructureOptionGroup", value: function (e) { var t = []; return e.forEach((function (e) { t.push(e), t = t.concat(e.options) })), t } }, { key: "serverSearch", value: function () { d.removeClass(this.$allWrappers, "has-no-search-results"), d.addClass(this.$allWrappers, "server-searching"), this.setSelectedOptions(), this.onServerSearch(this.searchValue, this) } }, { key: "removeValue", value: function (e) { var t = this.selectedValues, i = d.getData(e, "value"); n.removeItemFromArray(t, i), this.setValueMethod(t) } }, { key: "focus", value: function () { this.$wrapper.focus() } }, { key: "enable", value: function () { this.$ele.disabled = !1, this.$ele.removeAttribute("disabled"), this.$hiddenInput.removeAttribute("disabled"), d.setAria(this.$wrapper, "disabled", !1), d.changeTabIndex(this.$wrapper, 0) } }, { key: "disable", value: function () { this.$ele.disabled = !0, this.$ele.setAttribute("disabled", ""), this.$hiddenInput.setAttribute("disabled", ""), d.setAria(this.$wrapper, "disabled", !0), d.changeTabIndex(this.$wrapper, -1), this.$wrapper.blur() } }, { key: "validate", value: function () { if (this.disableValidation) return !0; var e = !1, t = this.selectedValues, i = this.minValues; return this.required && (n.isEmpty(t) || this.multiple && i && t.length < i) && (e = !0), d.toggleClass(this.$allWrappers, "has-error", e), !e } }, { key: "destroy", value: function () { var e = this.$ele; e.virtualSelect = void 0, e.value = void 0, e.innerHTML = "", this.hasDropboxWrapper && (this.$dropboxWrapper.remove(), this.removeEvents()), this.dropboxPopover && this.dropboxPopover.destroy(), d.removeClass(e, "vscomp-ele") } }, { key: "createSecureTextElements", value: function () { this.$secureDiv = document.createElement("div"), this.$secureText = document.createTextNode(""), this.$secureDiv.appendChild(this.$secureText) } }, { key: "secureText", value: function (e) { return e && this.enableSecureText ? (this.$secureText.nodeValue = n.replaceDoubleQuotesWithHTML(e), this.$secureDiv.innerHTML) : e } }, { key: "toggleRequired", value: function (e) { this.required = n.convertToBoolean(e), this.$ele.required = this.required } }, { key: "toggleOptionSelectedState", value: function (e, t) { var i = t; void 0 === i && (i = !d.hasClass(e, "selected")), d.toggleClass(e, "selected", i), d.setAria(e, "selected", i) } }, { key: "toggleOptionFocusedState", value: function (e, t) { e && (d.toggleClass(e, "focused", t), d.setAttr(e, "tabindex", t ? "0" : "-1"), document.activeElement !== this.$searchInput && e.focus(), t && d.setAria(this.$wrapper, "activedescendant", e.id)) } }], o = [{ key: "init", value: function (t) { var i = t.ele; if (i) { var o = !1; if ("string" == typeof i) { var s = (i = document.querySelectorAll(i)).length; if (0 === s) return; 1 === s && (o = !0) } void 0 !== i.length && void 0 !== i.forEach || (i = [i], o = !0); var n = []; return i.forEach((function (i) { i.virtualSelect ? n.push(i.virtualSelect) : (t.ele = i, "SELECT" === i.tagName && e.setPropsFromSelect(t), n.push(new e(t))) })), o ? n[0] : n } } }, { key: "getAttrProps", value: function () { var e = d.convertPropToDataAttr, t = {}; return $.forEach((function (e) { t[e] = e })), A.forEach((function (i) { t[e(i)] = i })), t } }, { key: "setPropsFromSelect", value: function (e) { var t = e.ele, i = [], o = [], s = function (e) { var t = []; return Array.from(e.children).forEach((function (e) { var n = e.value, r = { value: n }; "OPTGROUP" === e.tagName ? (r.label = e.getAttribute("label"), r.options = s(e)) : r.label = e.innerHTML, t.push(r), e.disabled && i.push(n), e.selected && o.push(n) })), t }, n = s(t), r = document.createElement("div"); d.setAttrFromEle(t, r, Object.keys(k), E), t.parentNode.insertBefore(r, t), t.remove(), e.ele = r, e.options = n, e.disabledOptions = i, e.selectedValue = o } }, { key: "onFormReset", value: function (e) { var t = e.target.closest("form"); t && t.querySelectorAll(".vscomp-ele-wrapper").forEach((function (e) { e.parentElement.virtualSelect.reset(!0) })) } }, { key: "onFormSubmit", value: function (t) { e.validate(t.target.closest("form")) || t.preventDefault() } }, { key: "validate", value: function (e) { if (!e) return !0; var t = !1; return e.querySelectorAll(".vscomp-ele-wrapper").forEach((function (e) { var i = e.parentElement.virtualSelect.validate(); t || i || (t = !0) })), !t } }, { key: "reset", value: function () { var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.virtualSelect.reset(e, t) } }, { key: "setValueMethod", value: function () { var e; (e = this.virtualSelect).setValueMethod.apply(e, arguments) } }, { key: "setOptionsMethod", value: function () { var e; (e = this.virtualSelect).setOptionsMethod.apply(e, arguments) } }, { key: "setDisabledOptionsMethod", value: function () { var e; (e = this.virtualSelect).setDisabledOptionsMethod.apply(e, arguments) } }, { key: "setEnabledOptionsMethod", value: function () { var e; (e = this.virtualSelect).setEnabledOptionsMethod.apply(e, arguments) } }, { key: "toggleSelectAll", value: function (e) { this.virtualSelect.toggleAllOptions(e) } }, { key: "isAllSelected", value: function () { return this.virtualSelect.isAllSelected } }, { key: "addOptionMethod", value: function (e) { this.virtualSelect.addOption(e, !0) } }, { key: "getNewValueMethod", value: function () { return this.virtualSelect.getNewValue() } }, { key: "getDisplayValueMethod", value: function () { return this.virtualSelect.getDisplayValue() } }, { key: "getSelectedOptionsMethod", value: function (e) { return this.virtualSelect.getSelectedOptions(e) } }, { key: "getDisabledOptionsMethod", value: function () { return this.virtualSelect.getDisabledOptions() } }, { key: "openMethod", value: function () { return this.virtualSelect.openDropbox() } }, { key: "closeMethod", value: function () { return this.virtualSelect.closeDropbox() } }, { key: "focusMethod", value: function () { return this.virtualSelect.focus() } }, { key: "enableMethod", value: function () { return this.virtualSelect.enable() } }, { key: "disableMethod", value: function () { return this.virtualSelect.disable() } }, { key: "destroyMethod", value: function () { return this.virtualSelect.destroy() } }, { key: "validateMethod", value: function () { return this.virtualSelect.validate() } }, { key: "toggleRequiredMethod", value: function (e) { return this.virtualSelect.toggleRequired(e) } }, { key: "onResizeMethod", value: function () { document.querySelectorAll(".vscomp-ele-wrapper").forEach((function (e) { e.parentElement.virtualSelect.onResize() })) } }], i && x(t.prototype, i), o && x(t, o), Object.defineProperty(t, "prototype", { writable: !1 }), t; var t, i, o }(); document.addEventListener("reset", T.onFormReset), document.addEventListener("submit", T.onFormSubmit), window.addEventListener("resize", T.onResizeMethod), k = T.getAttrProps(), window.VirtualSelect = T, "undefined" != typeof NodeList && NodeList.prototype && !NodeList.prototype.forEach && (NodeList.prototype.forEach = Array.prototype.forEach) }(), function () { "use strict"; function e(e) { return function (e) { if (Array.isArray(e)) return t(e) }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || function (e, i) { if (e) { if ("string" == typeof e) return t(e, i); var o = Object.prototype.toString.call(e).slice(8, -1); return "Object" === o && e.constructor && (o = e.constructor.name), "Map" === o || "Set" === o ? Array.from(e) : "Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o) ? t(e, i) : void 0 } }(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function t(e, t) { (null == t || t > e.length) && (t = e.length); for (var i = 0, o = new Array(t); i < t; i++)o[i] = e[i]; return o } var i = function () { function t() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, t) } var i; return i = [{ key: "addClass", value: function (i, o) { i && (o = o.split(" "), t.getElements(i).forEach((function (t) { var i; (i = t.classList).add.apply(i, e(o)) }))) } }, { key: "removeClass", value: function (i, o) { i && (o = o.split(" "), t.getElements(i).forEach((function (t) { var i; (i = t.classList).remove.apply(i, e(o)) }))) } }, { key: "getElements", value: function (e) { if (e) return void 0 === e.forEach && (e = [e]), e } }, { key: "getMoreVisibleSides", value: function (e) { if (!e) return {}; var t = e.getBoundingClientRect(), i = window.innerWidth, o = window.innerHeight, s = t.left, n = t.top; return { horizontal: s > i - s - t.width ? "left" : "right", vertical: n > o - n - t.height ? "top" : "bottom" } } }, { key: "getAbsoluteCoords", value: function (e) { if (e) { var t = e.getBoundingClientRect(), i = window.pageXOffset, o = window.pageYOffset; return { width: t.width, height: t.height, top: t.top + o, right: t.right + i, bottom: t.bottom + o, left: t.left + i } } } }, { key: "getCoords", value: function (e) { return e ? e.getBoundingClientRect() : {} } }, { key: "getData", value: function (e, t, i) { if (e) { var o = e ? e.dataset[t] : ""; return "number" === i ? o = parseFloat(o) || 0 : "true" === o ? o = !0 : "false" === o && (o = !1), o } } }, { key: "setData", value: function (e, t, i) { e && (e.dataset[t] = i) } }, { key: "setStyle", value: function (e, t, i) { e && (e.style[t] = i) } }, { key: "show", value: function (e) { var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "block"; t.setStyle(e, "display", i) } }, { key: "hide", value: function (e) { t.setStyle(e, "display", "none") } }, { key: "getHideableParent", value: function (e) { for (var t, i = e.parentElement; i;) { var o = getComputedStyle(i).overflow; if (-1 !== o.indexOf("scroll") || -1 !== o.indexOf("auto")) { t = i; break } i = i.parentElement } return t } }], i && function (e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o) } }(t, i), t }(), o = ["top", "bottom", "left", "right"].map((function (e) { return "position-".concat(e) })), s = { top: "rotate(180deg)", left: "rotate(90deg)", right: "rotate(-90deg)" }, n = function () { function e(t) { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e); try { this.setProps(t), this.init() } catch (e) { console.warn("Couldn't initiate popper"), console.error(e) } } var t; return t = [{ key: "init", value: function () { var e = this.$popperEle; e && this.$triggerEle && (i.setStyle(e, "zIndex", this.zIndex), this.setPosition()) } }, { key: "setProps", value: function (e) { var t = (e = this.setDefaultProps(e)).position ? e.position.toLowerCase() : "auto"; if (this.$popperEle = e.$popperEle, this.$triggerEle = e.$triggerEle, this.$arrowEle = e.$arrowEle, this.margin = parseFloat(e.margin), this.offset = parseFloat(e.offset), this.enterDelay = parseFloat(e.enterDelay), this.exitDelay = parseFloat(e.exitDelay), this.showDuration = parseFloat(e.showDuration), this.hideDuration = parseFloat(e.hideDuration), this.transitionDistance = parseFloat(e.transitionDistance), this.zIndex = parseFloat(e.zIndex), this.afterShowCallback = e.afterShow, this.afterHideCallback = e.afterHide, this.hasArrow = !!this.$arrowEle, -1 !== t.indexOf(" ")) { var i = t.split(" "); this.position = i[0], this.secondaryPosition = i[1] } else this.position = t } }, { key: "setDefaultProps", value: function (e) { return Object.assign({ position: "auto", margin: 8, offset: 5, enterDelay: 0, exitDelay: 0, showDuration: 300, hideDuration: 200, transitionDistance: 10, zIndex: 1 }, e) } }, { key: "setPosition", value: function () { i.show(this.$popperEle, "inline-flex"); var e, t, n, r = window.innerWidth, a = window.innerHeight, l = i.getAbsoluteCoords(this.$popperEle), u = i.getAbsoluteCoords(this.$triggerEle), c = l.width, p = l.height, h = l.top, d = l.right, v = l.bottom, f = l.left, y = u.width, b = u.height, m = u.top, g = u.right, O = u.bottom, S = u.left, x = m - h, w = S - f, k = w, C = x, E = this.position, $ = this.secondaryPosition, A = y / 2 - c / 2, T = b / 2 - p / 2, D = this.margin, V = this.transitionDistance, P = window.scrollY - h, I = a + P, M = window.scrollX - f, F = r + M, L = this.offset; L && (P += L, I -= L, M += L, F -= L), "auto" === E && (E = i.getMoreVisibleSides(this.$triggerEle).vertical); var H = { top: { top: C - p - D, left: k + A }, bottom: { top: C + b + D, left: k + A }, right: { top: C + T, left: k + y + D }, left: { top: C + T, left: k - c - D } }, G = H[E]; if (C = G.top, k = G.left, $ && ("top" === $ ? C = x : "bottom" === $ ? C = x + b - p : "left" === $ ? k = w : "right" === $ && (k = w + y - c)), k < M ? "left" === E ? n = "right" : k = M + f > g ? g - f : M : k + c > F && ("right" === E ? n = "left" : k = F + f < S ? S - d : F - c), C < P ? "top" === E ? n = "bottom" : C = P + h > O ? O - h : P : C + p > I && ("bottom" === E ? n = "top" : C = I + h < m ? m - v : I - p), n) { var N = H[n]; "top" === (E = n) || "bottom" === E ? C = N.top : "left" !== E && "right" !== E || (k = N.left) } "top" === E ? (e = C + V, t = k) : "right" === E ? (e = C, t = k - V) : "left" === E ? (e = C, t = k + V) : (e = C - V, t = k); var W = "translate3d(".concat(parseInt(t), "px, ").concat(parseInt(e), "px, 0)"); if (i.setStyle(this.$popperEle, "transform", W), i.setData(this.$popperEle, "fromLeft", t), i.setData(this.$popperEle, "fromTop", e), i.setData(this.$popperEle, "top", C), i.setData(this.$popperEle, "left", k), i.removeClass(this.$popperEle, o.join(" ")), i.addClass(this.$popperEle, "position-".concat(E)), this.hasArrow) { var B = 0, j = 0, q = k + f, R = C + h, z = this.$arrowEle.offsetWidth / 2, K = s[E] || ""; "top" === E || "bottom" === E ? (B = y / 2 + S - q) < z ? B = z : B > c - z && (B = c - z) : "left" !== E && "right" !== E || ((j = b / 2 + m - R) < z ? j = z : j > p - z && (j = p - z)), i.setStyle(this.$arrowEle, "transform", "translate3d(".concat(parseInt(B), "px, ").concat(parseInt(j), "px, 0) ").concat(K)) } i.hide(this.$popperEle) } }, { key: "resetPosition", value: function () { i.setStyle(this.$popperEle, "transform", "none"), this.setPosition() } }, { key: "show", value: function () { var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, o = t.resetPosition, s = t.data; clearTimeout(this.exitDelayTimeout), clearTimeout(this.hideDurationTimeout), o && this.resetPosition(), this.enterDelayTimeout = setTimeout((function () { var t = i.getData(e.$popperEle, "left"), o = i.getData(e.$popperEle, "top"), n = "translate3d(".concat(parseInt(t), "px, ").concat(parseInt(o), "px, 0)"), r = e.showDuration; i.show(e.$popperEle, "inline-flex"), i.getCoords(e.$popperEle), i.setStyle(e.$popperEle, "transitionDuration", r + "ms"), i.setStyle(e.$popperEle, "transform", n), i.setStyle(e.$popperEle, "opacity", 1), e.showDurationTimeout = setTimeout((function () { "function" == typeof e.afterShowCallback && e.afterShowCallback(s) }), r) }), this.enterDelay) } }, { key: "hide", value: function () { var e = this, t = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).data; clearTimeout(this.enterDelayTimeout), clearTimeout(this.showDurationTimeout), this.exitDelayTimeout = setTimeout((function () { if (e.$popperEle) { var o = parseInt(i.getData(e.$popperEle, "fromLeft")), s = parseInt(i.getData(e.$popperEle, "fromTop")), n = "translate3d(".concat(o, "px, ").concat(s, "px, 0)"), r = e.hideDuration; i.setStyle(e.$popperEle, "transitionDuration", r + "ms"), i.setStyle(e.$popperEle, "transform", n), i.setStyle(e.$popperEle, "opacity", 0), e.hideDurationTimeout = setTimeout((function () { i.hide(e.$popperEle), "function" == typeof e.afterHideCallback && e.afterHideCallback(t) }), r) } }), this.exitDelay) } }, { key: "updatePosition", value: function () { i.setStyle(this.$popperEle, "transitionDuration", "0ms"), this.resetPosition(); var e = parseInt(i.getData(this.$popperEle, "left")), t = parseInt(i.getData(this.$popperEle, "top")); i.show(this.$popperEle, "inline-flex"), i.setStyle(this.$popperEle, "transform", "translate3d(".concat(e, "px, ").concat(t, "px, 0)")) } }], t && function (e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o) } }(e.prototype, t), e }(); window.PopperComponent = n }(), function () { "use strict"; function e(t) { return (e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e })(t) } function t(e, t) { for (var o = 0; o < t.length; o++) { var s = t[o]; s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(e, i(s.key), s) } } function i(t) { var i = function (t, i) { if ("object" != e(t) || !t) return t; var o = t[Symbol.toPrimitive]; if (void 0 !== o) { var s = o.call(t, "string"); if ("object" != e(s)) return s; throw new TypeError("@@toPrimitive must return a primitive value.") } return String(t) }(t); return "symbol" == e(i) ? i : i + "" } var o = function () { return e = function e() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e) }, i = [{ key: "convertToBoolean", value: function (e) { return !0 === e || "true" === e || !1 !== e && "false" !== e && arguments.length > 1 && void 0 !== arguments[1] && arguments[1] } }, { key: "removeArrayEmpty", value: function (e) { return Array.isArray(e) && e.length ? e.filter((function (e) { return !!e })) : [] } }, { key: "throttle", value: function (e, t) { var i, o = 0; return function () { for (var s = arguments.length, n = new Array(s), r = 0; r < s; r++)n[r] = arguments[r]; var a = (new Date).getTime(), l = t - (a - o); clearTimeout(i), l <= 0 ? (o = a, e.apply(void 0, n)) : i = setTimeout((function () { e.apply(void 0, n) }), l) } } }], i && t(e, i), Object.defineProperty(e, "prototype", { writable: !1 }), e; var e, i }(); function s(e) { return s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, s(e) } function n(e) { return function (e) { if (Array.isArray(e)) return r(e) }(e) || function (e) { if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e) }(e) || function (e, t) { if (e) { if ("string" == typeof e) return r(e, t); var i = Object.prototype.toString.call(e).slice(8, -1); return "Object" === i && e.constructor && (i = e.constructor.name), "Map" === i || "Set" === i ? Array.from(e) : "Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? r(e, t) : void 0 } }(e) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function r(e, t) { (null == t || t > e.length) && (t = e.length); for (var i = 0, o = new Array(t); i < t; i++)o[i] = e[i]; return o } function a(e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, l(o.key), o) } } function l(e) { var t = function (e, t) { if ("object" != s(e) || !e) return e; var i = e[Symbol.toPrimitive]; if (void 0 !== i) { var o = i.call(e, "string"); if ("object" != s(o)) return o; throw new TypeError("@@toPrimitive must return a primitive value.") } return String(e) }(e); return "symbol" == s(t) ? t : t + "" } var u = function () { function e() { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e) } return t = e, i = [{ key: "addClass", value: function (t, i) { t && (i = i.split(" "), e.getElements(t).forEach((function (e) { var t; (t = e.classList).add.apply(t, n(i)) }))) } }, { key: "removeClass", value: function (t, i) { t && (i = i.split(" "), e.getElements(t).forEach((function (e) { var t; (t = e.classList).remove.apply(t, n(i)) }))) } }, { key: "hasClass", value: function (e, t) { return !!e && e.classList.contains(t) } }, { key: "getElement", value: function (e) { return e && ("string" == typeof e ? e = document.querySelector(e) : void 0 !== e.length && (e = e[0])), e || null } }, { key: "getElements", value: function (e) { if (e) return void 0 === e.forEach && (e = [e]), e } }, { key: "addEvent", value: function (t, i, o) { e.addOrRemoveEvent(t, i, o, "add") } }, { key: "removeEvent", value: function (t, i, o) { e.addOrRemoveEvent(t, i, o, "remove") } }, { key: "addOrRemoveEvent", value: function (t, i, s, n) { t && (i = o.removeArrayEmpty(i.split(" "))).forEach((function (i) { (t = e.getElements(t)).forEach((function (e) { "add" === n ? e.addEventListener(i, s) : e.removeEventListener(i, s) })) })) } }, { key: "getScrollableParents", value: function (e) { if (!e) return []; for (var t = [window], i = e.parentElement; i;) { var o = getComputedStyle(i).overflow; -1 === o.indexOf("scroll") && -1 === o.indexOf("auto") || t.push(i), i = i.parentElement } return t } }, { key: "convertPropToDataAttr", value: function (e) { return e ? "data-popover-".concat(e).replace(/([A-Z])/g, "-$1").toLowerCase() : "" } }], i && a(t, i), Object.defineProperty(t, "prototype", { writable: !1 }), t; var t, i }(); function c(e) { return c = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, c(e) } function p(e, t) { for (var i = 0; i < t.length; i++) { var o = t[i]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, h(o.key), o) } } function h(e) { var t = function (e, t) { if ("object" != c(e) || !e) return e; var i = e[Symbol.toPrimitive]; if (void 0 !== i) { var o = i.call(e, "string"); if ("object" != c(o)) return o; throw new TypeError("@@toPrimitive must return a primitive value.") } return String(e) }(e); return "symbol" == c(t) ? t : t + "" } var d, v = { 27: "onEscPress" }, f = ["target", "position", "margin", "offset", "enterDelay", "exitDelay", "showDuration", "hideDuration", "transitionDistance", "updatePositionThrottle", "zIndex", "hideOnOuterClick", "showOnHover", "hideArrowIcon", "disableManualAction", "disableUpdatePosition"], y = function () { function e(t) { !function (e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") }(this, e); try { this.setProps(t), this.init() } catch (e) { console.warn("Couldn't initiate Popover component"), console.error(e) } } return t = e, s = [{ key: "init", value: function (t) { var i = t.ele; if (i) { var o = !1; if ("string" == typeof i) { if (!(i = document.querySelectorAll(i))) return; 1 === i.length && (o = !0) } void 0 === i.length && (i = [i], o = !0); var s = []; return i.forEach((function (i) { t.ele = i, e.destroy(i), s.push(new e(t)) })), o ? s[0] : s } } }, { key: "destroy", value: function (e) { if (e) { var t = e.popComp; t && t.destroy() } } }, { key: "showMethod", value: function () { this.popComp.show() } }, { key: "hideMethod", value: function () { this.popComp.hide() } }, { key: "updatePositionMethod", value: function () { this.popComp.popper.updatePosition() } }, { key: "getAttrProps", value: function () { var e = u.convertPropToDataAttr, t = {}; return f.forEach((function (i) { t[e(i)] = i })), t } }], (i = [{ key: "init", value: function () { this.$popover && (this.setElementProps(), this.renderArrow(), this.initPopper(), this.addEvents()) } }, { key: "getEvents", value: function () { var e = [{ $ele: document, event: "click", method: "onDocumentClick" }, { $ele: document, event: "keydown", method: "onDocumentKeyDown" }]; return this.disableManualAction || (e.push({ $ele: this.$ele, event: "click", method: "onTriggerEleClick" }), this.showOnHover && (e.push({ $ele: this.$ele, event: "mouseenter", method: "onTriggerEleMouseEnter" }), e.push({ $ele: this.$ele, event: "mouseleave", method: "onTriggerEleMouseLeave" }))), e } }, { key: "addOrRemoveEvents", value: function (e) { var t = this; this.getEvents().forEach((function (i) { t.addOrRemoveEvent({ action: e, $ele: i.$ele, events: i.event, method: i.method }) })) } }, { key: "addEvents", value: function () { this.addOrRemoveEvents("add") } }, { key: "removeEvents", value: function () { this.addOrRemoveEvents("remove"), this.removeScrollEventListeners(), this.removeResizeEventListeners() } }, { key: "addOrRemoveEvent", value: function (e) { var t = this, i = e.action, s = e.$ele, n = e.events, r = e.method, a = e.throttle; s && (n = o.removeArrayEmpty(n.split(" "))).forEach((function (e) { var n = "".concat(r, "-").concat(e), l = t.events[n]; l || (l = t[r].bind(t), a && (l = o.throttle(l, a)), t.events[n] = l), "add" === i ? u.addEvent(s, e, l) : u.removeEvent(s, e, l) })) } }, { key: "addScrollEventListeners", value: function () { this.$scrollableElems = u.getScrollableParents(this.$ele), this.addOrRemoveEvent({ action: "add", $ele: this.$scrollableElems, events: "scroll", method: "onAnyParentScroll", throttle: this.updatePositionThrottle }) } }, { key: "removeScrollEventListeners", value: function () { this.$scrollableElems && (this.addOrRemoveEvent({ action: "remove", $ele: this.$scrollableElems, events: "scroll", method: "onAnyParentScroll" }), this.$scrollableElems = null) } }, { key: "addResizeEventListeners", value: function () { this.addOrRemoveEvent({ action: "add", $ele: window, events: "resize", method: "onResize", throttle: this.updatePositionThrottle }) } }, { key: "removeResizeEventListeners", value: function () { this.addOrRemoveEvent({ action: "remove", $ele: window, events: "resize", method: "onResize" }) } }, { key: "onAnyParentScroll", value: function () { this.popper.updatePosition() } }, { key: "onResize", value: function () { this.popper.updatePosition() } }, { key: "onDocumentClick", value: function (e) { var t = e.target, i = t.closest(".pop-comp-ele"), o = t.closest(".pop-comp-wrapper"); this.hideOnOuterClick && i !== this.$ele && o !== this.$popover && this.hide() } }, { key: "onDocumentKeyDown", value: function (e) { var t = e.which || e.keyCode, i = v[t]; i && this[i](e) } }, { key: "onEscPress", value: function () { this.hideOnOuterClick && this.hide() } }, { key: "onTriggerEleClick", value: function () { this.toggle() } }, { key: "onTriggerEleMouseEnter", value: function () { this.show() } }, { key: "onTriggerEleMouseLeave", value: function () { this.hide() } }, { key: "setProps", value: function (e) { e = this.setDefaultProps(e), this.setPropsFromElementAttr(e); var t = o.convertToBoolean; this.$ele = e.ele, this.target = e.target, this.position = e.position, this.margin = parseFloat(e.margin), this.offset = parseFloat(e.offset), this.enterDelay = parseFloat(e.enterDelay), this.exitDelay = parseFloat(e.exitDelay), this.showDuration = parseFloat(e.showDuration), this.hideDuration = parseFloat(e.hideDuration), this.transitionDistance = parseFloat(e.transitionDistance), this.updatePositionThrottle = parseFloat(e.updatePositionThrottle), this.zIndex = parseFloat(e.zIndex), this.hideOnOuterClick = t(e.hideOnOuterClick), this.showOnHover = t(e.showOnHover), this.hideArrowIcon = t(e.hideArrowIcon), this.disableManualAction = t(e.disableManualAction), this.disableUpdatePosition = t(e.disableUpdatePosition), this.beforeShowCallback = e.beforeShow, this.afterShowCallback = e.afterShow, this.beforeHideCallback = e.beforeHide, this.afterHideCallback = e.afterHide, this.events = {}, this.$popover = u.getElement(this.target) } }, { key: "setDefaultProps", value: function (e) { return Object.assign({ position: "auto", margin: 8, offset: 5, enterDelay: 0, exitDelay: 0, showDuration: 300, hideDuration: 200, transitionDistance: 10, updatePositionThrottle: 100, zIndex: 1, hideOnOuterClick: !0, showOnHover: !1, hideArrowIcon: !1, disableManualAction: !1, disableUpdatePosition: !1 }, e) } }, { key: "setPropsFromElementAttr", value: function (e) { var t = e.ele; for (var i in d) { var o = t.getAttribute(i); o && (e[d[i]] = o) } } }, { key: "setElementProps", value: function () { var t = this.$ele; t.popComp = this, t.show = e.showMethod, t.hide = e.hideMethod, t.updatePosition = e.updatePositionMethod, u.addClass(this.$ele, "pop-comp-ele"), u.addClass(this.$popover, "pop-comp-wrapper") } }, { key: "getOtherTriggerPopComp", value: function () { var e, t = this.$popover.popComp; return t && t.$ele !== this.$ele && (e = t), e } }, { key: "initPopper", value: function () { var e = { $popperEle: this.$popover, $triggerEle: this.$ele, $arrowEle: this.$arrowEle, position: this.position, margin: this.margin, offset: this.offset, enterDelay: this.enterDelay, exitDelay: this.exitDelay, showDuration: this.showDuration, hideDuration: this.hideDuration, transitionDistance: this.transitionDistance, zIndex: this.zIndex, afterShow: this.afterShow.bind(this), afterHide: this.afterHide.bind(this) }; this.popper = new PopperComponent(e) } }, { key: "beforeShow", value: function () { "function" == typeof this.beforeShowCallback && this.beforeShowCallback(this) } }, { key: "beforeHide", value: function () { "function" == typeof this.beforeHideCallback && this.beforeHideCallback(this) } }, { key: "show", value: function () { this.isShown() || (this.isShownForOtherTrigger() ? this.showAfterOtherHide() : (u.addClass(this.$popover, "pop-comp-disable-events"), this.$popover.popComp = this, this.beforeShow(), this.popper.show({ resetPosition: !0 }), u.addClass(this.$ele, "pop-comp-active"))) } }, { key: "hide", value: function () { this.isShown() && (this.beforeHide(), this.popper.hide(), this.removeScrollEventListeners(), this.removeResizeEventListeners()) } }, { key: "toggle", value: function (e) { void 0 === e && (e = !this.isShown()), e ? this.show() : this.hide() } }, { key: "isShown", value: function () { return u.hasClass(this.$ele, "pop-comp-active") } }, { key: "isShownForOtherTrigger", value: function () { var e = this.getOtherTriggerPopComp(); return !!e && e.isShown() } }, { key: "showAfterOtherHide", value: function () { var e = this, t = this.getOtherTriggerPopComp(); if (t) { var i = t.exitDelay + t.hideDuration + 100; setTimeout((function () { e.show() }), i) } } }, { key: "afterShow", value: function () { var e = this; this.showOnHover ? setTimeout((function () { u.removeClass(e.$popover, "pop-comp-disable-events") }), 2e3) : u.removeClass(this.$popover, "pop-comp-disable-events"), this.disableUpdatePosition || (this.addScrollEventListeners(), this.addResizeEventListeners()), "function" == typeof this.afterShowCallback && this.afterShowCallback(this) } }, { key: "afterHide", value: function () { u.removeClass(this.$ele, "pop-comp-active"), "function" == typeof this.afterHideCallback && this.afterHideCallback(this) } }, { key: "renderArrow", value: function () { if (!this.hideArrowIcon) { var e = this.$popover.querySelector(".pop-comp-arrow"); e || (this.$popover.insertAdjacentHTML("afterbegin", '<i class="pop-comp-arrow"></i>'), e = this.$popover.querySelector(".pop-comp-arrow")), this.$arrowEle = e } } }, { key: "destroy", value: function () { this.removeEvents() } }]) && p(t.prototype, i), s && p(t, s), Object.defineProperty(t, "prototype", { writable: !1 }), t; var t, i, s }(); d = y.getAttrProps(), window.PopoverComponent = y }();
    </script>
    <!-- jsPDF - versão correta -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

</body>

</html>